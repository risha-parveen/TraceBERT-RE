issue_id,commit_id,p_x,l_x,issue_desc,issue_comments,summary,diff,files,created_at,closed_at,commit_time
6,4fa9eda88b8e6a94c4e6662a86f87da7bc41d060,2.929818037955556e-05,1,"An end user wants to know when an expression will always return empty due to table enforcement rule ( e.g primary/foreign key , CHECK constraint ) Minimal implementation : detect PKEY , FKEY and CHECK constraints",Detect implied expressions,Merge pull request # 59 from Project-C-SQL/feat/implied-expression,"insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 29 , 217.18 , 124 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 104 , 97.04 , 11 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 88 , 210.95 , 158 ) ; SqlParser , insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 1 , 535.36 , 111 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 202 , 'Sonja ' , 'Pentycross ' , ' B ' , 'Carthaette ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 172 , 15.3 , 30 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 207 , 'Elise ' , 'Kamenar ' , ' C ' , 'Caswell ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 41 , 158.78 , 145 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 12 , 'Tiffi ' , 'Riolfo ' , ' C ' , 'Ada ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 205 , 'Orlan ' , 'Kynder ' , ' C ' , 'Cassandra ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 248 , 321.97 , 195 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 242 , 356.69 , 244 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 210 , 332.45 , 47 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 79 , 94.87 , 194 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 118 , 23.96 , 195 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 1 , 'Josi ' , 'Grimsell ' , ' B ' , 'Aaron ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 68 , 73.27 , 189 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 117 , 23.13 , 46 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 155 , 274.14 , 151 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 60 , 'Sibyl ' , 'Thoms ' , ' C ' , 'Almira ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 197 , 'Missie ' , 'Fealty ' , ' C ' , 'Carol ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 42 , 561.85 , 222 ) ; parsed_sql = sql_parser.parse_one ( sql_statement ) insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 112 , 38.97 , 239 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 187 , 271.52 , 242 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 83 , 451.45 , 203 ) ; , PRIMARY KEY ( order_id ) import sqlglot.expressions as exp insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 27 , 'Callean ' , 'Werlock ' , ' C ' , 'Aileen ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 183 , 546.08 , 88 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 36 , 'Bendite ' , 'Morfett ' , ' B ' , 'Aleksandr ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 198 , 'Kellby ' , 'Threlfall ' , ' C ' , 'Carolann ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 201 , 411.07 , 202 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 20 , 'Robbi ' , ' O '' Caherny ' , ' B ' , 'Adelphia ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 179 , 'Daphne ' , 'Kells ' , ' C ' , 'Broderick ' ) ; assert checker ! = None insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 248 , 'Norby ' , 'Biernacki ' , ' C ' , 'Clementine ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 173 , 297.4 , 85 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 166 , 95.01 , 189 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 97 , 'Germain ' , 'Haly ' , ' B ' , 'Archilles ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 96 , 'Tiertza ' , 'Bunford ' , ' C ' , 'Archibald ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 119 , 579.12 , 43 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 97 , 313.39 , 241 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 135 , 574.1 , 222 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 169 , 'Elsbeth ' , 'Nucciotti ' , ' B ' , 'Bradley ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 174 , 'Carolyn ' , 'Quinlan ' , ' C ' , 'Brian ' ) ; from pytest_postgresql import factories insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 110 , 144.28 , 59 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 80 , 17.1 , 21 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 227 , 189.25 , 230 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 198 , 120.47 , 95 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 4 , 'Nancey ' , 'Fawlkes ' , ' C ' , 'Abel ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 152 , 'Towny ' , 'Middell ' , ' B ' , 'Bert ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 56 , 'Kaitlin ' , 'Payle ' , ' B ' , 'Allyson ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 194 , 'Corilla ' , 'Aldwinckle ' , ' C ' , 'Carmellia ' ) ; import copy insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 222 , 416.65 , 59 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 223 , 200.44 , 47 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 114 , 339.9 , 108 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 2 , 'Tomlin ' , 'Nozzolinii ' , ' B ' , 'Abbigail ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 90 , 169.25 , 30 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 11 , 'Amby ' , 'Ligoe ' , ' C ' , 'Absalom ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 63 , 'Gratia ' , 'Moss ' , ' B ' , 'Althea ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 70 , 'Carmela ' , 'Sedgeworth ' , ' C ' , 'Amos ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 104 , 'Timofei ' , 'Grene ' , ' B ' , 'Armena ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 115 , 351.68 , 153 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 171 , 175.72 , 249 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 47 , 'Tracey ' , 'Sauvan ' , ' B ' , 'Alice ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 102 , 158.53 , 220 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 63 , 542.48 , 52 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 76 , 281.92 , 183 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 62 , 418.98 , 60 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 134 , 296.72 , 222 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 120 , 454.18 , 214 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 239 , 327.06 , 34 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 25 , 83.54 , 79 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 40 , 33.89 , 23 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 195 , 504.28 , 117 ) ; SELECT ( 1 , 2 , 3 ) ; '' '' '' insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 34 , 64.76 , 13 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 109 , 'Marquita ' , 'Impy ' , ' B ' , 'Aron ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 151 , 'Prentiss ' , 'Filby ' , ' B ' , 'Berney ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 216 , 'Elsbeth ' , 'MacGaughie ' , ' B ' , 'Charles ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 225 , 'Egbert ' , 'Vasyunin ' , ' B ' , 'Chloe ' ) ; WHERE sname > fname ; '' '' '' insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 241 , 296.03 , 169 ) ; Column , insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 111 , 490.85 , 191 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 69 , 'Maryjo ' , 'Pink ' , ' C ' , 'Amelia ' ) ; SQL_SIMPLE = \ insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 161 , 184.39 , 94 ) ; self._conn.commit ( ) insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 72 , 539.87 , 62 ) ; self.db_connection : Connection = db_connection insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 195 , 'Dewey ' , 'Bottom ' , ' C ' , 'Carmelo ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 80 , 'Petey ' , 'Colloby ' , ' B ' , 'Ann ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 222 , 'Hazel ' , 'Rushforth ' , ' C ' , 'Chester ' ) ; qep_parser_with_constraint_exclusion.parse ( self.sql_statement ) insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 238 , 448.86 , 16 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 53 , 'Riva ' , 'Scawen ' , ' C ' , 'Allen ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 145 , 112.51 , 162 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 58 , 'Lettie ' , 'Coffin ' , ' B ' , 'Almena ' ) ; with self._conn.cursor ( ) as cur : insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 73 , 144.33 , 52 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 59 , 'Lin ' , 'Race ' , ' B ' , 'Almina ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 209 , 203.86 , 244 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 203 , 545.33 , 116 ) ; , PRIMARY KEY ( customer_id ) insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 127 , 451.77 , 17 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 113 , 'Dania ' , 'Foxton ' , ' C ' , 'Arthusa ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 146 , 184.13 , 22 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 170 , 539.11 , 92 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 94 , 'Halimeda ' , 'Freak ' , ' B ' , 'Arabelle ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 148 , 'Lidia ' , 'Quinane ' , ' C ' , 'Benjamin ' ) ; , nickname VARCHAR ( 20 ) NOT NULL insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 100 , 424.83 , 50 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 81 , 'Sharline ' , 'Rosenwald ' , ' B ' , 'Anna ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 213 , 329.78 , 105 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 137 , 417.16 , 215 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 231 , 'Calhoun ' , 'BoHlingolsen ' , ' C ' , 'Christina ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 31 , 394.48 , 62 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 15 , 47.79 , 248 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 167 , 'Ninnette ' , 'Steere ' , ' C ' , 'Brad ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 17 , 'Carlyle ' , 'Zimek ' , ' B ' , 'Adelbert ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 235 , 'Justus ' , 'Barthrup ' , ' B ' , 'Christy ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 142 , 509.25 , 190 ) ; from .sqlparser import ( conn : Connection = psycopg.connect ( * * kwargs ) if constraint_exclusion : insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 220 , 367.15 , 163 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 220 , 'Kylen ' , 'Bewicke ' , ' B ' , 'Cheryl ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 180 , 'Leonelle ' , 'Chiommienti ' , ' B ' , 'Caitlin ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 52 , 81.47 , 212 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 90 , 'Forest ' , 'Trim ' , ' B ' , 'Appoline ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 221 , 'Cassondra ' , 'Mattingson ' , ' B ' , 'Chesley ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 8 , 424.8 , 244 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 229 , 89.34 , 147 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 21 , 'Nady ' , 'Lempertz ' , ' B ' , 'Adolphus ' ) ; def test_check ( sql_parser : SqlParser , db_connection : Connection ) : insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 67 , 550.21 , 63 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 103 , 'Ede ' , 'Golden of Ireland ' , ' C ' , 'Armanda ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 89 , 556.68 , 74 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 162 , 168.92 , 27 ) ; CHECK ( type IN ( ' C ' , ' B ' ) ) -- C = customer , B = business from .. implied_expression_checker import ImpliedExpressionChecker insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 76 , 'Ardys ' , 'Currm ' , ' B ' , 'Andriane ' ) ; cur.execute ( insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 247 , 'Dulcie ' , 'Crutchley ' , ' B ' , 'Clement ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 163 , 61.42 , 69 ) ; SELECT * def load_database ( * * kwargs ) : insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 182 , 'Sasha ' , 'Stiffkins ' , ' C ' , 'Caldonia ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 49 , 'Theodosia ' , 'Rosson ' , ' B ' , 'Aline ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 55 , 'Terrill ' , 'Syde ' , ' B ' , 'Allison ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 5 , 'Callida ' , 'Tomasello ' , ' B ' , 'Abiel ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 154 , 291.52 , 54 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 191 , 'Frankie ' , 'Canny ' , ' B ' , 'Candace ' ) ; SQL_CHECK_CONSTRAINT_VIOLATION = \ self._conn.commit ( ) insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 10 , 'Sonnie ' , 'Kelling ' , ' B ' , 'Abram ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 68 , 'Leisha ' , 'Darlington ' , ' C ' , 'Ambrose ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 212 , 179.55 , 180 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 226 , 212.04 , 28 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 229 , 'Melessa ' , 'MacAleese ' , ' C ' , 'Christiana ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 140 , 'Suki ' , 'Flinn ' , ' B ' , 'Bea ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 88 , 'Sansone ' , 'Copsey ' , ' C ' , 'Antonia ' ) ; else : insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 224 , 293.35 , 186 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 50 , 'Anne-marie ' , 'Mounsie ' , ' B ' , 'Alison ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 204 , 'Cassy ' , 'Pearcehouse ' , ' C ' , 'Casper ' ) ; load= [ load_database ] , insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 188 , 'Ferguson ' , 'Mackriell ' , ' B ' , 'Cameron ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 48 , 'Marve ' , 'Eykel ' , ' C ' , 'Alicia ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 208 , 'Legra ' , 'Drought ' , ' C ' , 'Catherine ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 249 , 'Rhoda ' , 'Leheude ' , ' C ' , 'Cliff ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 77 , 'Maegan ' , 'Wheldon ' , ' C ' , 'Angela ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 181 , 'Daria ' , 'Wistance ' , ' C ' , 'Caitlyn ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 156 , 'Allistir ' , 'Frary ' , ' C ' , 'Beth ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 72 , 'Nadiya ' , 'Gingles ' , ' B ' , 'Anderson ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 7 , 183.92 , 236 ) ; has_onetime_filter_with_constraint_exclusion and \ insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 7 , 'Lorin ' , 'Dollimore ' , ' C ' , 'Abijah ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 79 , 'Preston ' , 'Groves ' , ' B ' , 'Angelina ' ) ; QEPAnalysis , insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 144 , 504.73 , 154 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 219 , 594.84 , 121 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 141 , 183.27 , 44 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 217 , 'Lucy ' , 'Durtnell ' , ' C ' , 'Charlie ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 140 , 297.41 , 101 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 215 , 'Nollie ' , 'Jemmett ' , ' B ' , 'Charity ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 85 , 404.96 , 79 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 27 , 137.86 , 21 ) ; return node.get ( `` One-Time Filter '' ) ! = None insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 240 , 384.87 , 107 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 115 , 'Shirl ' , 'Pilpovic ' , ' C ' , 'Asahel ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 96 , 311.78 , 173 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 206 , 226.62 , 228 ) ; Returns warning_msg if implied expression is detected , otherwise None . insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 155 , 'Murdock ' , 'Dix ' , ' C ' , 'Bess ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 38 , 366.31 , 59 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 19 , 107.53 , 94 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 138 , 'Ainsley ' , 'Wraighte ' , ' C ' , 'Barticus ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 176 , 'Marylou ' , 'Guilloton ' , ' C ' , 'Bridget ' ) ; sql_statement = SQL_SIMPLE insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 233 , 87.21 , 179 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 177 , 334.0 , 167 ) ; CREATE TABLE { ORDERS_TABLE_NAME } ( parsed_sql , sql_statement , db_connection ) f '' '' '' insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 178 , 563.08 , 161 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 30 , 'Colin ' , 'Jansie ' , ' C ' , 'Alastair ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 160 , 144.6 , 82 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 153 , 'Alfy ' , 'McCahill ' , ' B ' , 'Bertha ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 124 , 552.02 , 191 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 114 , 'Fara ' , 'Arkil ' , ' B ' , 'Arzada ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 206 , 'Ardyth ' , 'Conningham ' , ' B ' , 'Cassidy ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 108 , 294.25 , 131 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 46 , 362.72 , 240 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 29 , 'Dawna ' , 'Knipe ' , ' C ' , 'Alanson ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 111 , 'Torey ' , 'Sessuns ' , ' B ' , 'Artemus ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 2 , 409.8 , 217 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 112 , 'Nanci ' , 'Byrd ' , ' C ' , 'Arthur ' ) ; ORDERS_TABLE_NAME = `` implied_expression_test_table_orders '' insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 126 , 384.61 , 226 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 182 , 478.47 , 70 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 81 , 490.65 , 41 ) ; cur.execute ( `` set constraint_exclusion = on ; '' ) QEPNode , SQL_NO_IMPLIED_EXPRESSION = \ insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 197 , 529.63 , 46 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 232 , 'Maritsa ' , 'Cowpland ' , ' C ' , 'Christine ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 230 , 'Cordell ' , 'Bineham ' , ' B ' , 'Christiano ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 168 , 137.02 , 109 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 11 , 88.19 , 50 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 130 , 'Rora ' , 'Adcock ' , ' C ' , 'Babs ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 122 , 'Myrlene ' , 'Worcs ' , ' B ' , 'Augusta ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 217 , 302.24 , 189 ) ; db_connection : Connection ) : insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 151 , 221.16 , 212 ) ; CREATE TABLE { CUSTOMERS_TABLE_NAME } ( insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 60 , 473.05 , 208 ) ; warning_msg = checker.check ( ) insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 23 , 236.48 , 51 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 200 , 'Fanni ' , 'Iacopetti ' , ' C ' , 'Carolyn ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 250 , 367.56 , 214 ) ; '' '' '' ) qep_parser_without_constraint_exclusion.parse ( self.sql_statement ) def __init__ ( self , parsed_sql : exp.Expression , sql_statement : str , checker = ImpliedExpressionChecker ( insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 235 , 230.72 , 168 ) ; sql_statement = SQL_NO_IMPLIED_EXPRESSION insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 185 , 'Tanitansy ' , 'Headington ' , ' C ' , 'Calista ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 53 , 592.15 , 207 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 211 , 399.2 , 138 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 131 , 'Ive ' , 'Matches ' , ' B ' , 'Barbara ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 26 , 'Jenica ' , 'Martina ' , ' C ' , 'Agnes ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 202 , 99.52 , 171 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 3 , 189.43 , 19 ) ; import psycopg insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 211 , 'Jobi ' , 'Bails ' , ' B ' , 'Cecilia ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 226 , 'Emelina ' , 'Ayliff ' , ' B ' , 'Chris ' ) ; warning_msg = `` Warning : Found impossible comparison due to column/table constraints [ pg4n : :ImpliedExpression ] '' insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 121 , 'Clywd ' , 'Stokey ' , ' B ' , 'August ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 107 , 'Celisse ' , 'Rubra ' , ' B ' , 'Arminta ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 149 , 'Erik ' , 'Cushe ' , ' B ' , 'Benjy ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 44 , 537.56 , 2 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 239 , 'Atalanta ' , 'Girdler ' , ' C ' , 'Claire ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 56 , 501.06 , 129 ) ; , customer_id INT NOT NULL insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 31 , 'Dario ' , 'Siehard ' , ' C ' , 'Alazama ' ) ; from .qepparser import ( , FOREIGN KEY ( customer_id ) insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 61 , 343.91 , 223 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 42 , 'Pyotr ' , 'Feldhorn ' , ' C ' , 'Alexis ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 203 , 'Rory ' , 'Hallatt ' , ' C ' , 'Casey ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 228 , 'Rudd ' , 'Ames ' , ' B ' , 'Christian ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 61 , 'Blisse ' , 'Dillway ' , ' C ' , 'Alonzo ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 164 , 'Abel ' , 'Bezants ' , ' C ' , 'Bob ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 65 , 318.64 , 6 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 136 , 'Aretha ' , 'Arias ' , ' C ' , 'Bart ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 152 , 291.54 , 10 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 69 , 266.3 , 39 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 196 , 'Louisa ' , 'Matasov ' , ' B ' , 'Carmon ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 160 , 'Patti ' , 'Louis ' , ' C ' , 'Biddie ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 48 , 199.52 , 234 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 236 , 485.18 , 167 ) ; has_onetime_filter_without_constraint_exclusion = \ insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 214 , 'Chalmers ' , 'Britton ' , ' C ' , 'Celinda ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 189 , 164.91 , 68 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 210 , 'Pamelina ' , 'Vittery ' , ' C ' , 'Cathy ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 101 , 328.66 , 189 ) ; , fname VARCHAR ( 50 ) NOT NULL insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 62 , 'Seline ' , 'McGray ' , ' B ' , 'Alphinias ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 65 , 'Glenna ' , 'Alastair ' , ' C ' , 'Alyssa ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 75 , 'Erma ' , 'Cranstone ' , ' B ' , 'Andrew ' ) ; sql_statement = SQL_CHECK_CONSTRAINT_VIOLATION insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 231 , 51.77 , 118 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 129 , 426.3 , 136 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 66 , 'Sadella ' , 'Boxhall ' , ' B ' , 'Alzada ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 37 , 'Talbot ' , 'Keddey ' , ' B ' , 'Aleva ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 98 , 177.22 , 86 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 122 , 406.1 , 80 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 204 , 212.04 , 203 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 227 , 'Jeralee ' , 'Atwill ' , ' C ' , 'Christa ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 221 , 487.39 , 227 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 186 , 'Chloette ' , 'Ratt ' , ' B ' , 'Calpurnia ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 209 , 'Dulcea ' , 'Akister ' , ' C ' , 'Cathleen ' ) ; def db_connection ( postgresql : Connection ) : from typing import Optional insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 4 , 144.14 , 157 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 71 , 175.29 , 115 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 218 , 389.51 , 177 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 183 , 'Harvey ' , 'Skinn ' , ' B ' , 'Caleb ' ) ; postgresql = factories.postgresql ( `` factory '' ) insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 119 , 'Gregg ' , 'Lazenbury ' , ' B ' , 'Aubrey ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 18 , 'Odie ' , 'Rowling ' , ' C ' , 'Adele ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 236 , 'Garnette ' , 'Tabrett ' , ' C ' , 'Cicely ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 146 , 'Dunstan ' , 'Cressey ' , ' B ' , 'Bella ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 118 , 'Hermy ' , 'Whieldon ' , ' B ' , 'Ashley ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 237 , 293.23 , 140 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 224 , 'Dayle ' , 'Eirwin ' , ' B ' , 'Chick ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 199 , 376.5 , 53 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 28 , 87.44 , 1 ) ; len ( qep_analysis_with_constraint_exclusion.root.rfind ( finder ) ) > 0 insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 106 , 236.57 , 4 ) ; def __init__ ( self , * args , conn=None , constraint_exclusion=True , * * kwargs ) : insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 16 , 330.92 , 130 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 131 , 255.66 , 127 ) ; return postgresql with conn.cursor ( ) as cur : insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 93 , 'Sashenka ' , 'Fedorski ' , ' C ' , 'Arabella ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 103 , 14.83 , 183 ) ; QEPParser ( conn=self.db_connection , constraint_exclusion=False ) insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 232 , 330.85 , 204 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 94 , 406.59 , 129 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 161 , 'Barron ' , 'Dishmon ' , ' B ' , 'Bill ' ) ; return None insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 10 , 414.55 , 234 ) ; WHERE sname IS NULL ; '' '' '' insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 200 , 592.16 , 137 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 71 , 'Cynthie ' , 'Rouby ' , ' B ' , 'Anastasia ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 249 , 491.05 , 63 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 116 , 'Annmarie ' , 'Errichelli ' , ' B ' , 'Asaph ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 143 , 239.98 , 109 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 244 , 273.35 , 153 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 194 , 328.76 , 41 ) ; return warning_msg insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 245 , 327.9 , 212 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 133 , 499.73 , 235 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 142 , 'Elfrieda ' , 'Cleary ' , ' C ' , 'Becca ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 64 , 'Dyan ' , 'Crosbie ' , ' B ' , 'Alverta ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 67 , 'Zsazsa ' , 'Bellocht ' , ' C ' , 'Amanda ' ) ; cur.execute ( `` set constraint_exclusion = on ; '' ) insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 201 , 'Arv ' , 'Spawforth ' , ' B ' , 'Carrie ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 134 , 'Georgetta ' , 'Crossley ' , ' B ' , 'Barnabas ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 101 , 'Hamilton ' , 'Pellew ' , ' B ' , 'Arizona ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 243 , 209.34 , 31 ) ; DROP TABLE IF EXISTS { CUSTOMERS_TABLE_NAME } ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 123 , 'Lyon ' , 'Nolleau ' , ' C ' , 'Augustina ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 43 , 'Belle ' , 'Barsham ' , ' B ' , 'Alfonse ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 205 , 508.59 , 59 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 17 , 302.31 , 225 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 99 , 354.37 , 66 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 176 , 22.8 , 175 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 3 , 'Christen ' , 'Culley ' , ' C ' , 'Abednego ' ) ; , type CHAR ( 1 ) NOT NULL insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 141 , 'Jacinta ' , 'Villiers ' , ' B ' , 'Beatrice ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 167 , 547.07 , 197 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 159 , 281.36 , 198 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 102 , 'Ricca ' , 'Rupprecht ' , ' B ' , 'Arlene ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 175 , 'Davy ' , 'Blomefield ' , ' B ' , 'Brianna ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 120 , 'Corinna ' , 'Pyburn ' , ' B ' , 'Audrey ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 162 , 'Jessee ' , 'List ' , ' B ' , 'Billy ' ) ; assert warning_msg == None insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 157 , 477.53 , 205 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 52 , 'Gerrilee ' , 'Ackland ' , ' B ' , 'Allan ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 126 , 'Lilllie ' , 'Annis ' , ' C ' , 'Aurelia ' ) ; def sql_parser ( postgresql : Connection ) : insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 109 , 170.82 , 206 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 24 , 'Jacinthe ' , 'Kleeman ' , ' B ' , 'Adrienne ' ) ; f '' '' '' insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 91 , 'Bobby ' , 'Fortesquieu ' , ' B ' , 'Aquilla ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 38 , 'Web ' , 'Catterill ' , ' B ' , 'Alex ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 51 , 244.27 , 119 ) ; cur.execute ( `` set constraint_exclusion = off ; '' ) insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 75 , 238.65 , 203 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 184 , 'Louise ' , 'Jansey ' , ' C ' , 'California ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 54 , 'Malchy ' , 'Hearty ' , ' B ' , 'Allisandra ' ) ; WHERE type = ' A ' ; '' '' '' insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 208 , 344.91 , 150 ) ; ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 137 , 'Lucilia ' , 'Bentick ' , ' C ' , 'Bartholomew ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 25 , 'Neely ' , 'Merrydew ' , ' B ' , 'Agatha ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 41 , 'Reilly ' , 'Kennler ' , ' B ' , 'Alexandria ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 93 , 452.63 , 115 ) ; qep_parser_without_constraint_exclusion = \ insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 240 , 'Britte ' , 'Muge ' , ' B ' , 'Clara ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 121 , 132.25 , 50 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 230 , 389.39 , 247 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 154 , 'Conney ' , 'Riteley ' , ' C ' , 'Bertram ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 132 , 'Olympe ' , 'Faber ' , ' B ' , 'Barbery ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 241 , 'Sigismund ' , 'Mowsdill ' , ' B ' , 'Clare ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 106 , 'Merrily ' , 'Coundley ' , ' C ' , 'Arminda ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 242 , 'Brenden ' , 'Simmons ' , ' B ' , 'Clarence ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 218 , 'Raffarty ' , 'Sweeney ' , ' C ' , 'Charlotte ' ) ; return SqlParser ( db_connection=postgresql ) CUSTOMERS_TABLE_NAME = `` implied_expression_orderby_test_table_customers '' insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 173 , 'Kristopher ' , 'Mackelworth ' , ' B ' , 'Brenda ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 187 , 'Donall ' , 'Casolla ' , ' B ' , 'Calvin ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 107 , 23.63 , 179 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 186 , 561.85 , 156 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 172 , 'Pammi ' , 'Codling ' , ' B ' , 'Breeanna ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 14 , 586.06 , 181 ) ; qep_analysis_with_constraint_exclusion = \ insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 83 , 'Wolf ' , 'Brenton ' , ' B ' , 'Annette ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 98 , 'Elfreda ' , 'Tome ' , ' C ' , 'Ariadne ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 223 , 'Annice ' , 'Haynes ' , ' B ' , 'Chet ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 147 , 180.39 , 2 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 57 , 349.14 , 58 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 129 , 'Ashla ' , 'De-Ville ' , ' C ' , 'Bab ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 45 , 46.05 , 177 ) ; len ( qep_analysis_without_constraint_exclusion.root.rfind ( finder ) ) > 0 SQL_NOT_NULL_CONSTRAINT_VIOLATION = \ qep_analysis_without_constraint_exclusion = \ , sname VARCHAR ( 50 ) NOT NULL insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 78 , 'Matilde ' , 'Froome ' , ' B ' , 'Angelica ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 212 , 'Annecorinne ' , 'Soles ' , ' B ' , 'Cedric ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 87 , 441.16 , 191 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 145 , 'Adena ' , 'Wenham ' , ' C ' , 'Belinda ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 91 , 331.76 , 115 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 84 , 396.02 , 111 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 138 , 223.81 , 183 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 139 , 'Kelsi ' , 'Suddell ' , ' C ' , 'Bazaleel ' ) ; if not has_implied_expression : insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 54 , 591.44 , 145 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 33 , 'Amble ' , 'Jewes ' , ' B ' , 'Alberta ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 117 , 'Marysa ' , 'Wadman ' , ' C ' , 'Asenath ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 32 , 331.93 , 144 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 234 , 'Cayla ' , 'Statter ' , ' B ' , 'Christopher ' ) ; QEPParser , def finder ( node : QEPNode ) - > bool : insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 123 , 370.87 , 115 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 165 , 84.61 , 1 ) ; QEPParser ( conn=self.db_connection , constraint_exclusion=True ) insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 39 , 42.62 , 95 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 188 , 495.68 , 39 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 215 , 515.79 , 96 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 192 , 'Dudley ' , 'Vesco ' , ' B ' , 'Carlotta ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 13 , 'Marion ' , 'Penelli ' , ' B ' , 'Adaline ' ) ; ) insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 105 , 107.29 , 12 ) ; `` One-Time Filter '' : str , insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 125 , 'Leo ' , 'Creaney ' , ' B ' , 'Augustus ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 18 , 438.38 , 26 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 247 , 123.55 , 179 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 163 , 'Gerhardt ' , 'Simcock ' , ' B ' , 'Blanche ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 30 , 435.57 , 105 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 214 , 520.52 , 98 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 150 , 'Agnesse ' , 'Liebmann ' , ' B ' , 'Bernard ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 33 , 140.92 , 236 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 21 , 471.12 , 179 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 28 , 'Nanice ' , 'MacMaster ' , ' B ' , 'Alan ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 144 , 'Ange ' , 'Pasterfield ' , ' C ' , 'Bedelia ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 95 , 'Amandie ' , 'Botham ' , ' B ' , 'Araminta ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 128 , 415.86 , 243 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 159 , 'Carilyn ' , 'Vinecombe ' , ' B ' , 'Bezaleel ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 193 , 449.91 , 213 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 191 , 183.55 , 142 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 113 , 305.06 , 123 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 6 , 'Daisey ' , 'Hamill ' , ' B ' , 'Abigail ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 87 , 'Nanette ' , 'McElwee ' , ' B ' , 'Antoinette ' ) ; DROP TABLE IF EXISTS { ORDERS_TABLE_NAME } ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 238 , 'Gregor ' , 'Crinion ' , ' B ' , 'Cindy ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 110 , 'Donall ' , 'Labrenz ' , ' B ' , 'Artelepsa ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 12 , 591.72 , 143 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 174 , 597.34 , 184 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 136 , 411.87 , 10 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 99 , 'Phineas ' , 'Yuryaev ' , ' B ' , 'Arielle ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 179 , 453.95 , 43 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 14 , 'Davon ' , 'Burris ' , ' C ' , 'Addison ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 130 , 575.58 , 235 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 193 , 'Brucie ' , 'Coning ' , ' C ' , 'Carlton ' ) ; sql_statement = SQL_NOT_NULL_CONSTRAINT_VIOLATION FROM { CUSTOMERS_TABLE_NAME } self.sql_statement : str = sql_statement insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 58 , 10.24 , 74 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 156 , 130.63 , 188 ) ; with self._conn.cursor ( ) as cur : insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 9 , 'Lester ' , 'Markus ' , ' C ' , 'Abraham ' ) ; class ImpliedExpressionChecker : insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 150 , 439.75 , 18 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 250 , 'Langston ' , 'Prosser ' , ' C ' , 'Clifford ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 77 , 335.23 , 149 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 125 , 170.66 , 131 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 149 , 340.62 , 215 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 177 , 'Genvieve ' , 'Marthen ' , ' B ' , 'Brittany ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 23 , 'Jeanette ' , 'Fincher ' , ' B ' , 'Adriane ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 20 , 207.6 , 9 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 92 , 156.72 , 192 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 24 , 538.88 , 38 ) ; customer_id INT insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 233 , 'Tibold ' , 'Sleigh ' , ' C ' , 'Christoph ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 153 , 350.78 , 247 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 171 , 'Fredrick ' , 'Matuszynski ' , ' C ' , 'Breanna ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 127 , 'Rhoda ' , 'Kurton ' , ' C ' , 'Avarilla ' ) ; from .. sqlparser import SqlParser not has_onetime_filter_without_constraint_exclusion assert warning_msg ! = None insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 148 , 203.36 , 180 ) ; factory = factories.postgresql_proc ( insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 189 , 'Merle ' , 'Erridge ' , ' C ' , 'Camille ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 57 , 'Vita ' , 'Dunnett ' , ' B ' , 'Allyssa ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 181 , 150.37 , 69 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 243 , 'Hannah ' , 'Mattheis ' , ' C ' , 'Clarinda ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 139 , 441.16 , 97 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 9 , 519.43 , 175 ) ; self.parsed_sql : exp.Expression = parsed_sql order_id INT insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 132 , 488.95 , 234 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 199 , 'Matilda ' , 'Malenoir ' , ' C ' , 'Caroline ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 44 , 'Buffy ' , ' O '' Cridigan ' , ' B ' , 'Alfred ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 225 , 26.43 , 228 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 185 , 505.7 , 49 ) ; conn.commit ( ) insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 108 , 'Janene ' , 'Motten ' , ' C ' , 'Arnold ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 178 , 'Rogers ' , 'Plose ' , ' B ' , 'Brittney ' ) ; def __init__ ( self , * args , conn=None , * * kwargs ) : insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 5 , 582.52 , 172 ) ; print ( warning_msg ) insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 175 , 161.61 , 58 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 45 , 'Seymour ' , 'Mayer ' , ' B ' , 'Alfreda ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 158 , 65.82 , 201 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 135 , 'Janenna ' , 'McCamish ' , ' C ' , 'Barney ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 47 , 163.79 , 141 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 37 , 322.11 , 41 ) ; has_onetime_filter_with_constraint_exclusion = \ insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 168 , 'Melicent ' , 'Cheston ' , ' B ' , 'Bradford ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 35 , 389.81 , 218 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 43 , 133.73 , 196 ) ; import pytest insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 180 , 452.67 , 234 ) ; from psycopg import Connection insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 92 , 'Raven ' , 'Eilles ' , ' C ' , 'Ara ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 234 , 254.56 , 98 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 190 , 'Kara ' , 'Backs ' , ' B ' , 'Campbell ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 124 , 'Penelope ' , 'Quadling ' , ' C ' , 'Augustine ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 237 , 'Jeramie ' , 'Gallehock ' , ' C ' , 'Cinderella ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 184 , 380.46 , 98 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 19 , 'Daphne ' , 'Bullen ' , ' B ' , 'Adeline ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 147 , 'Wilmer ' , 'MacWhan ' , ' B ' , 'Benedict ' ) ; REFERENCES { CUSTOMERS_TABLE_NAME } ( customer_id ) insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 219 , 'Adriane ' , 'Ccomini ' , ' B ' , 'Chauncey ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 244 , 'Katrine ' , 'Janiak ' , ' B ' , 'Clarissa ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 133 , 'Clementia ' , 'Fergusson ' , ' B ' , 'Barbie ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 46 , 'Mechelle ' , 'Vinick ' , ' B ' , 'Algernon ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 246 , 'Albert ' , 'Heimann ' , ' B ' , 'Cleatus ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 213 , 'Rubin ' , 'Lunney ' , ' B ' , 'Celeste ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 32 , 'Aubrie ' , 'Lockitt ' , ' C ' , 'Albert ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 22 , 193.12 , 6 ) ; qep_parser_with_constraint_exclusion = \ insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 95 , 367.31 , 48 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 59 , 141.8 , 118 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 39 , 'Tabbie ' , 'Glison ' , ' B ' , 'Alexander ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 216 , 388.15 , 142 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 86 , 537.64 , 201 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 26 , 590.52 , 50 ) ; SELECT customer_id , fname , sname insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 70 , 596.2 , 221 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 128 , 'Jere ' , 'Cometti ' , ' B ' , 'Azariah ' ) ; def check ( self ) - > Optional [ str ] : insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 64 , 534.3 , 108 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 165 , 'Angele ' , 'Wildbore ' , ' C ' , 'Bobby ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 16 , 'Augustin ' , 'Blaxall ' , ' C ' , 'Adelaide ' ) ; , order_total_eur DECIMAL ( 6,2 ) NOT NULL insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 34 , 'Lorens ' , 'Buzin ' , ' C ' , 'Aldo ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 13 , 503.52 , 216 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 49 , 376.9 , 89 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 192 , 206.39 , 151 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 22 , 'Grazia ' , 'Syne ' , ' C ' , 'Adrian ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 74 , 'Giffy ' , 'Cottee ' , ' C ' , 'Andrea ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 164 , 193.39 , 169 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 6 , 132.85 , 206 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 116 , 292.86 , 97 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 86 , 'Lauren ' , 'Tolworth ' , ' B ' , 'Anthony ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 50 , 306.71 , 235 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 166 , 'Angelo ' , 'Vanstone ' , ' C ' , 'Boetius ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 35 , 'Lainey ' , 'Davidow ' , ' C ' , 'Aldrich ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 143 , 'Sasha ' , 'Eunson ' , ' C ' , 'Beck ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 100 , 'Gypsy ' , 'Bottrell ' , ' C ' , 'Aristotle ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 74 , 63.02 , 117 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 73 , 'Seymour ' , 'Maffioletti ' , ' B ' , 'Andre ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 170 , 'Bard ' , 'Shaw ' , ' C ' , 'Brady ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 84 , 'Birk ' , 'Malling ' , ' C ' , 'Annie ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 89 , 'Nickie ' , 'Bloss ' , ' C ' , 'Antonio ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 36 , 225.6 , 136 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 190 , 401.19 , 88 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 85 , 'Brig ' , 'Triswell ' , ' C ' , 'Anselm ' ) ; has_implied_expression = \ insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 246 , 510.74 , 188 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 245 , 'Holly ' , 'Roy ' , ' C ' , 'Claudia ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 228 , 542.3 , 42 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 15 , 'Zachary ' , 'Faloon ' , ' C ' , 'Adela ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 158 , 'Anett ' , 'Hercules ' , ' B ' , 'Beverly ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 8 , 'Gasparo ' , 'Bohlje ' , ' C ' , 'Abner ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 169 , 552.88 , 241 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 207 , 205.25 , 199 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 105 , 'Cary ' , 'Sells ' , ' C ' , 'Armilda ' ) ; `` `` '' insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 51 , 'Kennan ' , 'Burstowe ' , ' B ' , 'Alixandra ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 78 , 569.4 , 99 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 196 , 259.0 , 244 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 82 , 106.39 , 237 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 157 , 'Noach ' , 'MacRitchie ' , ' C ' , 'Bethena ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 82 , 'Abey ' , 'Darridon ' , ' C ' , 'Anne ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 66 , 454.41 , 11 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 55 , 391.93 , 128 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 40 , 'Olva ' , 'Leborgne ' , ' C ' , 'Alexandra ' ) ;","['src/pg4n/implied_expression_checker.py', 'src/pg4n/qepparser.py', 'src/pg4n/test/test_implied_expression_checker.py']",2022-09-23 11:37:52+00:00,2022-11-08 08:09:34+00:00,2022-11-08 10:09:32+02:00
15,576ff1d3f49e6180a05f05e0e2ae13ba93d7ecb4,1.0347650459152646e-05,1,"Add requirements.txt , directory structure , thought out main.py , etc .",Incorporate project template and a thought out main.py,Merge pull request # 31 from Project-C-SQL/feat/add-docs,"{ file = `` MarkupSafe-2.1.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl '' , hash = `` sha256:56442863ed2b06d19c37f94d999035e15ee982988920e12a5b4ba29b62ad1f77 '' } , key : poetry-1.2.2-0 { file = `` packaging-21.3-py3-none-any.whl '' , hash = `` sha256 : ef103e05f519cdc783ae24ea4e2e0f508a9c99b2d4969652eed6a2e1ea5bd522 '' } , { file = `` sphinxcontrib-qthelp-1.0.3.tar.gz '' , hash = `` sha256:4c33767ee058b70dba89a6fc5c1892c0d57a54be67ddd3e7875a18d14cba5a72 '' } , myst-parser = `` ^0.18.1 '' version = `` 2.1.1 '' self._conn : Connection = conn or psycopg.connect ( * args , * * kwargs ) packaging = [ version = `` 2022.9.24 '' description = `` Pygments is a syntax highlighting package written in Python . '' description = `` PostgreSQL for novices - helps debug PostgreSQL queries '' { file = `` psycopg_binary-3.1.3-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl '' , hash = `` sha256 : a0cf56d57d6f1abc90ce724a8f98555c72d8b0c970cbf8b5cd4bedb0d0b352ec '' } , This project uses [ Poetry ] ( https : //python-poetry.org/ ) for packaging . Although one should refer to [ Poetry docs ] ( https : //python-poetry.org/docs/ ) for a thorough introduction , here 's a short summary of the intended workflow with Poetry : iniconfig = `` * '' description = `` Process executor ( not only ) for tests . '' Parse for the content between two prompts . Returns an empty list if there is no statement or there was an error . black src -- check & & { file = `` imagesize-1.4.1-py2.py3-none-any.whl '' , hash = `` sha256:0d8d18d08f840c19d0ee7ca1fd82490fdc3729b7ac93f49870406ddde8ef8d8b '' } , { file = `` certifi-2022.9.24.tar.gz '' , hash = `` sha256:0d9c601124e5a6ba9712dbc60d9c53c21e34f5f641fe83002317394311bdce14 '' } , name = `` attrs '' { file = `` pytz-2022.4-py2.py3-none-any.whl '' , hash = `` sha256:2c0784747071402c6e99f0bafdb7da0fa22645f06554c7ae06bf6358897e9c91 '' } , { file = `` pexpect-4.8.0-py2.py3-none-any.whl '' , hash = `` sha256:0b48a55dcb3c05f3329815901ea4fc1537514d6ba867a152b581d69ae3710937 '' } , name = `` autopep8 '' { file = `` sphinx-5.2.3-py3-none-any.whl '' , hash = `` sha256:7abf6fabd7b58d0727b7317d5e2650ef68765bbe0ccb63c8795fa8683477eaa2 '' } , tomli = `` > =1.0.0 '' py = [ lambda x : x.parent is not None , ptyprocess = [ from . import psqlwrapper { file = `` snowballstemmer-2.2.0-py2.py3-none-any.whl '' , hash = `` sha256 : c8e1716e83cc398ae16824e5572ae04e0d9fc2c6b985fb0f900f5f0c96ecba1a '' } , version = `` 4.4.0 '' category = `` dev '' { file = `` tomli-2.0.1-py3-none-any.whl '' , hash = `` sha256:939de3e7a6161af0c887ef91b7d41a53e7c5a1ca976325f429cb46ea9bc30ecc '' } , type-comment = [ `` typed-ast ( > =1.5.4 ) '' ] # Program architecture version = `` 3.4 '' { file = `` psycopg_binary-3.1.3-cp310-cp310-win_amd64.whl '' , hash = `` sha256 : ec872e3664334805e50c704ee9ba8fb6b7c5c0da269cd1e982792dd07b8d1ba8 '' } , version = `` 5.9.2 '' pytest = [ To add/remove a dependency , type ` poetry add < dep > ` / ` poetry remove < dep > ` . name = `` pygments '' templates_path = [ '_templates ' ] wrap = psqlwrapper.PsqlWrapper ( sys.argv [ 1 ] .encode ( `` utf-8 '' ) , always_document_param_types = False pytz = `` > =2015.7 '' description = `` Cross-platform colored terminal text . '' docutils = [ 'sphinx.ext.viewcode ' , conn : connection = psycopg2.connect ( * * kwargs ) # ` virtualenvs-in-project : true ` creates a ` .venv ` in test dir for easy caching { file = `` psycopg_binary-3.1.3-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl '' , hash = `` sha256:5dba8866d9628916a249fc428bd7baef607e24a4b54d54825ec8866624114fb2 '' } , { file = `` sphinxcontrib-serializinghtml-1.1.5.tar.gz '' , hash = `` sha256 : aa5f6de5dfdf809ef505c4895e51ef5c9eac17d0f287933eb49ec495280b6952 '' } , To install all dependencies and the application , type ` poetry install ` . After installation , if the Python scripts folder is in your PATH , you should be able to invoke ` main.main ( ) ` with ` pg4n ` . { file = `` setuptools-65.4.1-py3-none-any.whl '' , hash = `` sha256:1b6bdc6161661409c5f21508763dc63ab20a9ac2f8ba20029aaaa7fdb9118012 '' } , services : description = `` Postgresql fixtures and fixture factories for Pytest . '' { file = `` psycopg_binary-3.1.3-cp37-cp37m-musllinux_1_1_x86_64.whl '' , hash = `` sha256:69f5b4b1da0cb1432de36c044a705aff61a8ab130ccafab3548a7a3b789538fd '' } , if len ( sys.argv ) > 1 : ` parser ` is an implementation of PsqlParser interface . { file = `` PyYAML-6.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl '' , hash = `` sha256:213c60cd50106436cc818accf5baa1aba61c0189ff610f64f4a3e8c6726218ba '' } , { file = `` MarkupSafe-2.1.1-cp310-cp310-macosx_10_9_x86_64.whl '' , hash = `` sha256 : f121a1420d4e173a5d96e47e9a0c0dcff965afdf1626d28de1460815f7c4ee7a '' } , testing = [ `` pytest '' , `` pytest-benchmark '' ] imagesize = `` > =1.3 '' { file = `` MarkupSafe-2.1.1-cp37-cp37m-macosx_10_9_x86_64.whl '' , hash = `` sha256:671cd1187ed5e62818414afe79ed29da836dde67166a9fac6d435873c44fdd02 '' } , ptyprocess = `` > =0.5 '' sphinxcontrib-devhelp = `` * '' { file = `` psycopg_binary-3.1.3-cp39-cp39-musllinux_1_1_aarch64.whl '' , hash = `` sha256:0a4b8a0935153dbfe4d9546b3b6594a0e5114d6ef17eb5ae57c83e581bd06c37 '' } , { file = `` PyYAML-6.0-cp311-cp311-macosx_10_9_x86_64.whl '' , hash = `` sha256 : d4b0ba9512519522b118090257be113b9468d804b19d63c71dbcf4a48fa32358 '' } , { file = `` PyYAML-6.0-cp37-cp37m-win32.whl '' , hash = `` sha256 : c5687b8d43cf58545ade1fe3e055f70eac7a5a1a0bf42824308d868289a95737 '' } , # mypy = `` ^0.982 '' i18n = [ `` Babel ( > =2.7 ) '' ] { file = `` MarkupSafe-2.1.1-cp37-cp37m-win_amd64.whl '' , hash = `` sha256:97a68e6ada378df82bc9f16b800ab77cbf4b2fada0081794318520138c088e4a '' } , version = `` 2.0.0 '' description = `` An easily customizable SQL parser and transpiler '' run : poetry run pytest { file = `` psycopg_binary-3.1.3-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl '' , hash = `` sha256 : b4460ebf333e6e7c212dfcd0d46bf9fd1dd04b406aaff34713d960f9e87f77d9 '' } , 'sphinx.ext.todo ' , # - run : | toml = `` * '' psqlparser.PsqlParser ( ) ) version = `` 1.11.0 '' [ tool.poetry.scripts ] pg4n = `` pg4n : main.main '' autopep8 = `` ^1.7.0 '' { file = `` PyYAML-6.0-cp310-cp310-win_amd64.whl '' , hash = `` sha256 : daf496c58a8c52083df09b80c860005194014c3698698d1a57cbcfa182142a3a '' } , import sys { file = `` tomli-2.0.1.tar.gz '' , hash = `` sha256 : de526c12914f0c550d15924c62d72abc48d6fe7364aa87328337a31007fe8a4f '' } , docutils = `` > =0.14 , < 0.20 '' description = `` iniconfig : brain-dead simple config-ini parsing '' { file = `` psycopg_binary-3.1.3-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl '' , hash = `` sha256 : bb1894056f00fba3d684b7bfc336fc25c18983861cadcfb0cad0be7eb841f485 '' } , attrs = `` > =19.2.0 '' { file = `` myst-parser-0.18.1.tar.gz '' , hash = `` sha256:79317f4bb2c13053dd6e64f9da1ba1da6cd9c40c8a430c447a7b146a594c246d '' } , Note that the GitHub Pages site is only updated on pushes to ` main ` branch . PGPASSWORD : postgres Running all linters : { file = `` psycopg_binary-3.1.3-cp38-cp38-macosx_10_9_x86_64.whl '' , hash = `` sha256:590fde0fbf5d94736c29bce210d9c975829f0eb667930102e7783c5ef35fa7c3 '' } , description = `` Utility that helps with local TCP ports management . It can find an unused TCP localhost port and remember the association . '' { file = `` MarkupSafe-2.1.1-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl '' , hash = `` sha256:3ce11ee3f23f79dbd06fb3d63e2f6af7b12db1d46932fe7bd8afa259a5996603 '' } , python-versions = `` > =2.7 , ! =3.0 . * , ! =3.1 . * , ! =3.2 . * , ! =3.3 . * , ! =3.4 . * , ! =3.5 . * , < 4 '' { file = `` pytest-postgresql-4.1.1.tar.gz '' , hash = `` sha256:144d6af4000641decb1f0e8025d9bfdd4a0572f418c5fec7ef409b51b991295d '' } , pycodestyle = `` > =2.9.1 '' To execute a command from within virtual environment shell , type ` poetry run < cmd > ` . { file = `` PyYAML-6.0-cp36-cp36m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl '' , hash = `` sha256:98c4d36e99714e55cfbaaee6dd5badbc9a1ec339ebfc3b1f52e293aee6bb71a4 '' } , python-versions = `` > =2.7 , ! =3.0 . * , ! =3.1 . * , ! =3.2 . * , ! =3.3 . * '' linkify = [ `` linkify-it-py ( > =1.0 , < 2.0 ) '' ] [ tool.poetry.group.dev.dependencies ] { file = `` MarkupSafe-2.1.1-cp38-cp38-macosx_10_9_universal2.whl '' , hash = `` sha256 : e8c843bbcda3a2f1e3c2ab25913c80a3c5376cd00c6e8c4a86a89a28c8dc5452 '' } , poetry run sphinx-apidoc -q -f -o docs/api src/pg4n ' * /test_ * ' & & \ poetry run ' sqlglot.exp.Select ) ) description = `` sphinxcontrib-applehelp is a sphinx extension which outputs Apple help books '' { file = `` psycopg_binary-3.1.3-cp310-cp310-musllinux_1_1_x86_64.whl '' , hash = `` sha256 : a799eaa75dedf60630665e2fe8f74bafa1a3a79b9a5f56769236eee131112a01 '' } , git-config-name : github-actions { file = `` colorama-0.4.5-py2.py3-none-any.whl '' , hash = `` sha256:854bf444933e37f5824ae7bfc1e98d5bce2ebe4160d46b5edf346a89358e99da '' } , { file = `` markdown-it-py-2.1.0.tar.gz '' , hash = `` sha256 : cf7e59fed14b5ae17c0006eff14a2d9a00ed5f3a846148153899a0224e2c07da '' } , { file = `` MarkupSafe-2.1.1-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl '' , hash = `` sha256 : b7bd98b796e2b6553da7225aeb61f447f80a1ca64f41d83612e6139ca5213aa4 '' } , { file = `` toml-0.10.2.tar.gz '' , hash = `` sha256 : b3bda1d108d5dd99f4a20d24d9c348e91c4db7ab1b749200bded2f839ccbe68f '' } , name = `` urllib3 '' { file = `` ptyprocess-0.7.0.tar.gz '' , hash = `` sha256:5c5d0a3b48ceee0b48485e0c26037c0acd7d29765ca3fbb5cb3831d347423220 '' } , py = `` > =1.8.2 '' sphinx-autodoc-typehints = `` ^1.19.4 '' wrap = psqlwrapper.PsqlWrapper ( sys.argv [ 1 ] .encode ( `` utf-8 '' ) , description = `` pyparsing module - Classes and methods to define and execute parsing grammars '' [ tool.poetry ] { file = `` MarkupSafe-2.1.1-cp310-cp310-win_amd64.whl '' , hash = `` sha256 : dda30ba7e87fbbb7eab1ec9f58678558fd9a6b8b853530e176eabd064da81417 '' } , else : name = `` mdit-py-plugins '' name = `` mirakuru '' name = `` sphinxcontrib-applehelp '' { file = `` py-1.11.0-py2.py3-none-any.whl '' , hash = `` sha256:607c53218732647dff4acdfcd50cb62615cedf612e72d1724fb1a0cc6405b378 '' } , # # # ` parse_for_a_new_prompt ( psql : str ) - > List [ str ] ` api/pg4n benchmarking = [ `` psutil '' , `` pytest '' , `` pytest-benchmark ( > =3.2 , < 4.0 ) '' ] name = `` psycopg-binary '' alabaster = `` > =0.7 , < 0.8 '' { file = `` psycopg_binary-3.1.3-cp310-cp310-manylinux_2_17_i686.manylinux2014_i686.whl '' , hash = `` sha256:5f3a0045946b1638a1d3a3c02313902d8cbd70c7dd973d9408fb9c341385c9a9 '' } , { file = `` psutil-5.9.2-cp37-cp37m-win32.whl '' , hash = `` sha256:7cbb795dcd8ed8fd238bc9e9f64ab188f3f4096d2e811b5a82da53d164b84c3f '' } , # # # Building documents { file = `` psutil-5.9.2-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl '' , hash = `` sha256:4fb54941aac044a61db9d8eb56fc5bee207db3bc58645d657249030e15ba3727 '' } , [ Documentation ] ( https : //project-c-sql.github.io/ ) { file = `` pycodestyle-2.9.1-py2.py3-none-any.whl '' , hash = `` sha256 : d1735fc58b418fd7c5f658d28d943854f8a849b01a5d0a1e6f3f3fdd0166804b '' } , { file = `` psutil-5.9.2-cp39-cp39-win_amd64.whl '' , hash = `` sha256:68b35cbff92d1f7103d8f1db77c977e72f49fcefae3d3d2b91c76b0e7aef48b8 '' } , } pytest-postgresql = [ { file = `` PyYAML-6.0-cp37-cp37m-macosx_10_9_x86_64.whl '' , hash = `` sha256:819b3830a1543db06c4d4b865e70ded25be52a2e0631ccd2f6a47a2822f2fd7c '' } , Jinja2 = `` > =3.0 '' # # # ` parse_first_found_stmt ( psql : str ) - > List [ str ] ` { file = `` psutil-5.9.2-cp36-cp36m-win_amd64.whl '' , hash = `` sha256:9770c1d25aee91417eba7869139d629d6328a9422ce1cdd112bd56377ca98444 '' } , { file = `` PyYAML-6.0-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl '' , hash = `` sha256 : cba8c411ef271aa037d7357a2bc8f9ee8b58b9965831d9e51baf703280dc73d3 '' } , Returns an empty list if no prompt is found . Returns prompt text ( `` dbname= > '' or `` dbname= # '' ) if found . docs = [ `` sphinxcontrib-websupport '' ] { file = `` attrs-22.1.0.tar.gz '' , hash = `` sha256:29adc2665447e5191d0e7c568fde78b21f9672d344281d0c6e1ab085429b22b6 '' } , { file = `` psycopg_binary-3.1.3-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl '' , hash = `` sha256:1ae68869d7338f917db476da44928b58fd19137867694ff8075f44d2adab7f31 '' } , id : cache-deps conn : Connection = psycopg.connect ( * * kwargs ) name = `` pycodestyle '' docutils = `` < 0.18 '' name = `` port-for '' { file = `` MarkupSafe-2.1.1-cp310-cp310-macosx_10_9_universal2.whl '' , hash = `` sha256:86b1f75c4e7c2ac2ccdaec2b9022845dbb81880ca318bb7a0a01fbf7813e3812 '' } , { file = `` pluggy-1.0.0-py2.py3-none-any.whl '' , hash = `` sha256:74134bbf457f031a36d68416e1509f34bd5ccc019f0bcc952c7b909d06b37bd3 '' } , 'sphinx.ext.autodoc ' , psutil = { version = `` > =4.0.0 '' , markers = `` sys_platform ! = \ '' cygwin\ '' '' } version = `` 1.0.0 '' mdurl = `` > =0.1 , < 1.0 '' { file = `` MarkupSafe-2.1.1-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl '' , hash = `` sha256:6fbf47b5d3728c6aea2abb0589b5d30459e369baa772e0f37a0320185e87c980 '' } , description = `` pytest : simple powerful testing with Python '' description = `` The Real First Universal Charset Detector . Open , modern and actively maintained alternative to Chardet . '' { file = `` PyYAML-6.0-cp38-cp38-win32.whl '' , hash = `` sha256 : d4eccecf9adf6fbcc6861a38015c2a64f38b9d94838ac1810a9023a0609e1b78 '' } , description = `` A configurable sidebar-enabled Sphinx theme '' else : { file = `` psutil-5.9.2-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl '' , hash = `` sha256 : f7929a516125f62399d6e8e026129c8835f6c5a3aab88c3fff1a05ee8feb840d '' } , { file = `` psycopg_binary-3.1.3-cp37-cp37m-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl '' , hash = `` sha256:2be3770e558bed382b6bb5df39933501a92c7d2817e6965d270352a4af1cc281 '' } , { file = `` psycopg_binary-3.1.3-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl '' , hash = `` sha256:62baa7ed5e0507d4436d16fb5ff13a540850f30b29b06bccac5185e14270d651 '' } , print ( f '' { os.path.basename ( sys.executable ) } main.py < database name > '' ) description = `` An extended commonmark compliant parser , with bridges to docutils & sphinx . '' iniconfig = [ version = `` 2.9.1 '' name = `` alabaster '' { file = `` psycopg_binary-3.1.3-cp310-cp310-musllinux_1_1_aarch64.whl '' , hash = `` sha256 : a8bd8becebc5e0945574cf99075a39f2942b885917c50091cea6ae2f7446e173 '' } , { file = `` MarkupSafe-2.1.1-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl '' , hash = `` sha256:8e576a51ad59e4bfaac456023a78f6b5e6e7651dcd383bcc3e18d06f9b55d6d1 '' } , html_theme = 'sphinx_rtd_theme ' { file = `` psycopg_binary-3.1.3-cp37-cp37m-manylinux_2_17_i686.manylinux2014_i686.whl '' , hash = `` sha256:211035cbd159842db7358069d135b2e4646036c33595aa4f0012644b2c64db24 '' } , program-architecture { file = `` PyYAML-6.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl '' , hash = `` sha256:77f396e6ef4c73fdc33a9157446466f1cff553d979bd00ecb64385760c6babdc '' } , sphinxcontrib-devhelp = [ > typing-extensions = [ sphinxcontrib-htmlhelp = [ sphinxcontrib-qthelp = `` * '' { file = `` psutil-5.9.2-cp37-cp37m-win_amd64.whl '' , hash = `` sha256:5d39e3a2d5c40efa977c9a8dd4f679763c43c6c255b1340a56489955dbca767c '' } , { file = `` sphinx_rtd_theme-1.0.0-py2.py3-none-any.whl '' , hash = `` sha256:4d35a56f4508cfee4c4fb604373ede6feae2a306731d533f409ef5c3496fdbd8 '' } , test = [ `` cython '' , `` html5lib '' , `` pytest ( > =4.6 ) '' , `` typed_ast '' ] authors = [ version = `` 6.0 '' name = `` sphinx-rtd-theme '' version = `` 3.1.2 '' * : ref : ` genindex ` For linting , you need the CI tools : ` poetry install -with ci ` . { file = `` PyYAML-6.0-cp311-cp311-macosx_11_0_arm64.whl '' , hash = `` sha256:81957921f441d50af23654aa6c5e5eaf9b06aba7f0a19c18a538dc7ef291c5a1 '' } , code-style = [ `` pre-commit ( ==2.6 ) '' ] version = `` 0.6.2 '' psutil = [ testing = [ `` beautifulsoup4 '' , `` coverage [ toml ] '' , `` pytest ( > =6 , < 7 ) '' , `` pytest-cov '' , `` pytest-param-files ( > =0.3.4 , < 0.4.0 ) '' , `` pytest-regressions '' , `` sphinx ( < 5.2 ) '' , `` sphinx-pytest '' ] author = 'Heikkilä et al . ' version = `` 0.4.5 '' name = `` typing-extensions '' { file = `` psycopg_binary-3.1.3-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl '' , hash = `` sha256:355eb31f6ff5d4438cf7ac108c9ee1dec36950dd6b98651e5877be0dc699b49f '' } , rtd = [ `` ipython '' , `` sphinx-book-theme '' , `` sphinx-design '' , `` sphinxcontrib.mermaid ( > =0.7.1 , < 0.8.0 ) '' , `` sphinxext-opengraph ( > =0.6.3 , < 0.7.0 ) '' , `` sphinxext-rediraffe ( > =0.2.7 , < 0.3.0 ) '' ] # Interfaces { file = `` sqlglot-6.3.5.tar.gz '' , hash = `` sha256:5ebc4f04d7d6771d5a4ed8c638f71044b28b1ccb754bfd5cc8fbef95d250260c '' } , pyparsing = `` > =2.0.2 , < 3.0.5 || > 3.0.5 '' import psqlwrapper { file = `` requests-2.28.1-py3-none-any.whl '' , hash = `` sha256:8fefa2a1a1365bf5520aac41836fbee479da67864514bdb821f31ce07ce65349 '' } , sphinxcontrib-serializinghtml = [ sphinx-rtd-theme = [ { file = `` mirakuru-2.4.2-py3-none-any.whl '' , hash = `` sha256 : fdb67d141cc9f7abd485a515d618daf3272c3e6ff48380749997ff8e8c5f2cb2 '' } , # postgresql-for-novices { file = `` Jinja2-3.1.2-py3-none-any.whl '' , hash = `` sha256:6088930bfe239f0e6710546ab9c19c9ef35e29792895fed6e6e31a023a182a61 '' } , { file = `` Babel-2.10.3-py3-none-any.whl '' , hash = `` sha256 : ff56f4892c1c4bf0d814575ea23471c230d544203c7748e8c68f0089478d48eb '' } , code-style = [ `` pre-commit '' ] name = `` sphinxcontrib-devhelp '' def parser ( postgresql : Connection ) : def parser ( postgresql : connection ) : from . import psqlparser PGPORT : 5432 { file = `` PyYAML-6.0-cp36-cp36m-win_amd64.whl '' , hash = `` sha256:07751360502caac1c067a8132d150cf3d61339af5691fe9e87803040dbc5db57 '' } , name = `` pytest-postgresql '' { file = `` Jinja2-3.1.2.tar.gz '' , hash = `` sha256:31351a702a408a9e7595a8fc6150fc3f43bb6bf7e319770cbc0db9df9437e852 '' } , # # # ` Wrapper ( db_name : str , hook_f : Callable [ str , str ] , parser : PsqlParser ) ` def __init__ ( self , * args , conn=None , * * kwargs ) : { file = `` pytest-7.1.3.tar.gz '' , hash = `` sha256:4f365fec2dff9c1162f834d9f18af1ba13062db0c708bf7b946f8a5c76180c39 '' } , if : steps.cache-deps.outputs.cache-hit ! = 'true ' python-versions = `` > =3.7 , < 4 '' description = `` A very fast and expressive template engine . '' pylint src ' { file = `` sphinxcontrib_serializinghtml-1.1.5-py2.py3-none-any.whl '' , hash = `` sha256:352a9a00ae864471d3a7ead8d7d79f5fc0b57e8b3f95e9867eb9eb28999b92fd '' } , { file = `` MarkupSafe-2.1.1-cp39-cp39-win_amd64.whl '' , hash = `` sha256:46d00d6cfecdde84d40e572d63735ef81423ad31184100411e6e3388d405e247 '' } , steps : name = `` psutil '' { file = `` psycopg_binary-3.1.3-cp37-cp37m-musllinux_1_1_i686.whl '' , hash = `` sha256:4a34d2487d2a62b66cc5b18f849749ee206294aa8a134c4adb8fafc0415a47f6 '' } , description = `` A tool that automatically formats Python code to conform to the PEP 8 style guide '' pygments = [ { file = `` psycopg_binary-3.1.3-cp38-cp38-musllinux_1_1_x86_64.whl '' , hash = `` sha256:9f1e11796963adcd29000649310e68b95260a786b54438bec19c14deb5e568dc '' } , lambda x : `` Helpful message '' , { file = `` psutil-5.9.2-cp39-cp39-macosx_10_9_x86_64.whl '' , hash = `` sha256 : b3591616fa07b15050b2f87e1cdefd06a554382e72866fcc0ab2be9d116486c8 '' } , '.txt ' : 'markdown ' , packaging = `` * '' { file = `` psycopg_binary-3.1.3-cp310-cp310-macosx_11_0_arm64.whl '' , hash = `` sha256 : de1be1748d33ce3dbeacfec4e59886052dbbdff987ab9bd3025613d12fd716a3 '' } , mdit-py-plugins = [ version = `` 2.1.0 '' { file = `` port-for-0.6.2.tar.gz '' , hash = `` sha256:9d4e73523d98f2f9f270308bbf415926c698b5439db8909384a79f152328b4d2 '' } , { file = `` MarkupSafe-2.1.1-cp38-cp38-musllinux_1_1_i686.whl '' , hash = `` sha256:089cf3dbf0cd6c100f02945abeb18484bd1ee57a079aefd52cffd17fba910b88 '' } , description = `` Cross-platform lib for process and system monitoring in Python . '' ` hook_f ` is the function that the wrapper sends prettified user input & program output to , and from where it gets its helpful messages to inject before next prompt . # # # Imports { file = `` urllib3-1.26.12-py2.py3-none-any.whl '' , hash = `` sha256 : b930dd878d5a8afb066a637fbb35144fe7901e3b209d1cd4f524bd0e9deee997 '' } , { file = `` MarkupSafe-2.1.1-cp37-cp37m-musllinux_1_1_x86_64.whl '' , hash = `` sha256 : e1c0b87e09fa55a220f058d1d49d3fb8df88fbfab58558f1198e08c1e1de842a '' } , { file = `` PyYAML-6.0-cp36-cp36m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl '' , hash = `` sha256:50602afada6d6cbfad699b0c7bb50d5ccffa7e46a3d738092afddc1f9758427f '' } , { file = `` docutils-0.17.1-py2.py3-none-any.whl '' , hash = `` sha256 : cf316c8370a737a022b72b56874f6602acf974a37a9fba42ec2876387549fc61 '' } , { file = `` PyYAML-6.0-cp38-cp38-macosx_10_9_x86_64.whl '' , hash = `` sha256:0b4624f379dab24d3725ffde76559cff63d9ec94e1736b556dacdfebe5ab6d4b '' } , During development , you must run the program as a module , e.g. , ` poetry run python -m src.pg4n.main ` , so that the imports work . docs = [ `` furo '' , `` jaraco.packaging ( > =9 ) '' , `` jaraco.tidelift ( > =1.4 ) '' , `` pygments-github-lexers ( ==0.0.5 ) '' , `` rst.linker ( > =1.9 ) '' , `` sphinx ( > =3.5 ) '' , `` sphinx-favicon '' , `` sphinx-hoverxref ( < 2 ) '' , `` sphinx-inline-tabs '' , `` sphinx-notfound-page ( ==0.8.3 ) '' , `` sphinx-reredirects '' , `` sphinxcontrib-towncrier '' ] { file = `` psycopg_binary-3.1.3-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl '' , hash = `` sha256:6ab64f067aa6db2119902d80d17d7cb3f0345bc55d56b1140985e478d0355f0f '' } , /docs/build { file = `` imagesize-1.4.1.tar.gz '' , hash = `` sha256:69150444affb9cb0d5cc5a92b3676f0b2fb7cd9ae39e947a5e11a36b4497cd4a '' } , { file = `` psycopg_binary-3.1.3-cp37-cp37m-macosx_10_9_x86_64.whl '' , hash = `` sha256:94edc0bcaf336def6189e7613e3bfb1c182523c2d90300c0af6d846e38c9bdfa '' } , { file = `` charset_normalizer-2.1.1-py3-none-any.whl '' , hash = `` sha256:83e9a75d1911279afd89352c68b45348559d1fc0506b054b346651b5e7fee29f '' } , { file = `` PyYAML-6.0-cp38-cp38-win_amd64.whl '' , hash = `` sha256:1e4747bc279b4f613a09eb64bba2ba602d8a6664c6ce6396a4d0cd413a50ce07 '' } , tests = [ `` pytest '' , `` pytest-cov '' ] To enter a shell session within the Poetry virtual environment , type ` poetry shell ` . pytest = `` > =6.2.0 '' name = `` colorama '' * : ref : ` modindex ` description = `` Classes Without Boilerplate '' imagesize = [ description = `` HTTP library with thread-safe connection pooling , file post , and more . '' typehints_use_rtype = False sphinx-rtd-theme = `` ^1.0.0 '' # `` -0 '' allows invalidating the cache for upgrading Poetry Returns an empty list if no SQL statement is found . If found , returns a list of strings containing complete statement ( `` SELECT ... ; '' ) if flattened . { file = `` autopep8-1.7.0-py2.py3-none-any.whl '' , hash = `` sha256:6f09e90a2be784317e84dc1add17ebfc7abe3924239957a37e5040e27d812087 '' } , import psycopg { file = `` mdurl-0.1.2.tar.gz '' , hash = `` sha256 : bb413d29f5eea38f31dd4754dd7377d4465116fb207585f97bf925588687c1ba '' } , { file = `` MarkupSafe-2.1.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl '' , hash = `` sha256:10c1bfff05d95783da83491be968e8fe789263689c02724e0c691933c52994f5 '' } , test = [ `` mypy ( > =0.981 ) '' , `` pproxy ( > =2.7 ) '' , `` pytest ( > =6.2.5 ) '' , `` pytest-asyncio ( > =0.17 ) '' , `` pytest-cov ( > =3.0 ) '' , `` pytest-randomly ( > =3.10 ) '' ] POSTGRES_PASSWORD : postgres name = `` sphinxcontrib-htmlhelp '' { file = `` PyYAML-6.0-cp310-cp310-win32.whl '' , hash = `` sha256:2cd5df3de48857ed0544b34e2d40e9fac445930039f3cfe4bcc592a1f836d513 '' } , folder : docs/build main ( ) options : > description = `` Python HTTP for Humans . '' run : poetry install -- no-interaction -- with ci { file = `` PyYAML-6.0-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl '' , hash = `` sha256 : f84fbc98b019fef2ee9a1cb3ce93e3187a6df0b2538a651bfb890254ba9f90b5 '' } , description = `` Markdown URL utilities '' with : rtd = [ `` attrs '' , `` myst-parser ( > =0.16.1 , < 0.17.0 ) '' , `` sphinx-book-theme ( > =0.1.0 , < 0.2.0 ) '' ] # nothing here description = `` Easily download , build , install , upgrade , and uninstall Python packages '' run : poetry install -- no-interaction -- with ci -- no-root To get a similar instance as with GitHub Actions workflow : < br > pyyaml = `` * '' { file = `` psycopg_binary-3.1.3-cp39-cp39-musllinux_1_1_x86_64.whl '' , hash = `` sha256:680ec51370ba42adb69c7ebe29bf12bed6e56caa7d94e85f814423c1b24fc848 '' } , { file = `` psutil-5.9.2-cp27-cp27mu-manylinux2010_i686.whl '' , hash = `` sha256:94e621c6a4ddb2573d4d30cba074f6d1aa0186645917df42c811c473dd22b339 '' } , { file = `` pytest-7.1.3-py3-none-any.whl '' , hash = `` sha256:1377bda3466d70b55e3f5cecfa55bb7cfcf219c7964629b967c37cf0bda818b7 '' } , Get query statements and their results , and sanitize them for syntactic analysis { file = `` PyYAML-6.0-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl '' , hash = `` sha256:277a0ef2981ca40581a47093e9e2d13b3f1fbbeffae064c1d21bfceba2030287 '' } , description = `` Run a subprocess in a pseudo terminal '' { file = `` mdurl-0.1.2-py3-none-any.whl '' , hash = `` sha256:84008a41e51615a49fc9966191ff91509e3c40b939176e643fd50a5c2196b8f8 '' } , version = `` 2.28.1 '' { file = `` PyYAML-6.0-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl '' , hash = `` sha256 : dbad0e9d368bb989f4515da330b88a057617d16b6a8245084f1b05400f24609f '' } , name = `` pytest '' { file = `` psutil-5.9.2-cp37-cp37m-macosx_10_9_x86_64.whl '' , hash = `` sha256:42638876b7f5ef43cef8dcf640d3401b27a51ee3fa137cb2aa2e72e188414c32 '' } , name = `` certifi '' { file = `` MarkupSafe-2.1.1-cp37-cp37m-musllinux_1_1_i686.whl '' , hash = `` sha256 : bcb3ed405ed3222f9904899563d6fc492ff75cce56cba05e32eff40e6acbeaa3 '' } , use-chardet-on-py3 = [ `` chardet ( > =3.0.2 , < 6 ) '' ] version = `` 65.4.1 '' { file = `` psycopg_binary-3.1.3-cp38-cp38-win_amd64.whl '' , hash = `` sha256:7b1e2461562f9164a90b755702fbbd1b9141dce0b96a099371d7af0a7b7fdbe0 '' } , { file = `` psutil-5.9.2-cp36-cp36m-win32.whl '' , hash = `` sha256 : f40ba362fefc11d6bea4403f070078d60053ed422255bd838cd86a40674364c9 '' } , version = `` 2.2.0 '' { file = `` charset-normalizer-2.1.1.tar.gz '' , hash = `` sha256:5a3d016c7c547f69d6f81fb0db9449ce888b418b5b9952cc5e6e66843e9dd845 '' } , { file = `` MarkupSafe-2.1.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl '' , hash = `` sha256:4b9fe39a2ccc108a4accc2676e77da025ce383c108593d65cc909add5c3bd601 '' } , name = `` packaging '' { file = `` sphinxcontrib-applehelp-1.0.2.tar.gz '' , hash = `` sha256 : a072735ec80e7675e3f432fcae8610ecf509c5f1869d17e2eecff44389cdbc58 '' } , sphinx = `` > =1.6 '' description = `` Python Library for Tom 's Obvious , Minimal Language '' password=getenv ( `` PGPASSWORD '' , `` postgres '' ) ) '.md ' : 'markdown ' , if len ( sys.argv ) > 1 : python-versions = `` > =2 '' { file = `` autopep8-1.7.0.tar.gz '' , hash = `` sha256 : ca9b1a83e53a7fad65d731dc7a2a2d50aa48f43850407c59f6a1a306c4201142 '' } , { file = `` PyYAML-6.0-cp36-cp36m-win32.whl '' , hash = `` sha256:0283c35a6a9fbf047493e3a0ce8d79ef5030852c51e9d911a27badfde0605293 '' } , testing = [ `` build [ virtualenv ] '' , `` filelock ( > =3.4.0 ) '' , `` flake8 ( < 5 ) '' , `` flake8-2020 '' , `` ini2toml [ lite ] ( > =0.9 ) '' , `` jaraco.envs ( > =2.2 ) '' , `` jaraco.path ( > =3.2.0 ) '' , `` mock '' , `` pip ( > =19.1 ) '' , `` pip-run ( > =8.8 ) '' , `` pytest ( > =6 ) '' , `` pytest-black ( > =0.3.7 ) '' , `` pytest-checkdocs ( > =2.4 ) '' , `` pytest-cov '' , `` pytest-enabler ( > =1.3 ) '' , `` pytest-flake8 '' , `` pytest-mypy ( > =0.9.1 ) '' , `` pytest-perf '' , `` pytest-xdist '' , `` tomli-w ( > =1.0.0 ) '' , `` virtualenv ( > =13.0.0 ) '' , `` wheel '' ] typehints_fully_qualified = False { file = `` psutil-5.9.2-cp38-cp38-win_amd64.whl '' , hash = `` sha256:67b33f27fc0427483b61563a16c90d9f3b547eeb7af0ef1b9fe024cdc9b3a6ea '' } , name = `` markupsafe '' poetry run sphinx-build -q -b html docs docs/build & & \ myst-parser = [ architecture sqlglot = `` ^6.3.2 '' version = `` 3.1.3 '' colorama = [ { file = `` pyparsing-3.0.9.tar.gz '' , hash = `` sha256:2b020ecf7d21b687f219b71ecad3631f644a47f01403fa1d1036b0c6416d70fb '' } , pexpect = `` ^4.8.0 '' { file = `` psutil-5.9.2-cp36-cp36m-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl '' , hash = `` sha256 : b4018d5f9b6651f9896c7a7c2c9f4652e4eea53f10751c4e7d08a9093ab587ec '' } , description = `` A lil ' TOML parser '' version : 1.2.2 markdown-it-py = [ { file = `` port_for-0.6.2-py3-none-any.whl '' , hash = `` sha256 : be154fdc1d8b2c50820cf1910151e0e9792f82a00ed09b8c277b551e5c99bb5a '' } , copyright = '2022 , Heikkilä et al . ' version = `` 0.1.0 '' [ [ package ] ] name = `` sphinxcontrib-jsmath '' { file = `` psycopg_binary-3.1.3-cp39-cp39-musllinux_1_1_i686.whl '' , hash = `` sha256 : f7bf6bd26271ce9fc3c9ce60570a67b12af4c00d4ddfe02442725816f639eeff '' } , ` docker run -- rm -P -p 127.0.0.1:5432:5432 -- name pg -e POSTGRES_PASSWORD=postgres -d postgres:14.5-alpine ` version = `` 21.3 '' print ( f '' { os.path.basename ( sys.executable ) } main.py < database name > '' ) repository-name : Project-C-SQL/Project-C-SQL.github.io description = `` Provider of IANA time zone data '' name = `` pluggy '' idna = `` > =2.5 , < 4 '' tests = [ `` pytest '' , `` pytest-cov '' , `` python-daemon '' ] python = `` ^3.10 '' { file = `` PyYAML-6.0-cp37-cp37m-manylinux_2_17_s390x.manylinux2014_s390x.whl '' , hash = `` sha256:0ce82d761c532fe4ec3f87fc45688bdd3a4c1dc5e0b4a19814b9009a29baefd4 '' } , version = `` 2022.4 '' { file = `` tzdata-2022.4.tar.gz '' , hash = `` sha256 : ada9133fbd561e6ec3d1674d3fba50251636e918aa97bd59d63735bef5a513bb '' } , { file = `` psutil-5.9.2-cp36-cp36m-macosx_10_9_x86_64.whl '' , hash = `` sha256 : dc9bda7d5ced744622f157cc8d8bdd51735dafcecff807e928ff26bdb0ff097d '' } , docs = [ `` furo ( > =2022.9.15 ) '' , `` sphinx ( > =5.2.1 ) '' , `` sphinx-autodoc-typehints ( > =1.19.3 ) '' ] import os category = `` main '' { file = `` MarkupSafe-2.1.1-cp39-cp39-macosx_10_9_x86_64.whl '' , hash = `` sha256 : b87db4360013327109564f0e591bd2a3b318547bcef31b468a92ee504d07ae4f '' } , { file = `` psutil-5.9.2-cp27-cp27m-manylinux2010_x86_64.whl '' , hash = `` sha256 : b2f248ffc346f4f4f0d747ee1947963613216b06688be0be2e393986fe20dbbb '' } , ================== if self.debug : health-timeout 5s { file = `` requests-2.28.1.tar.gz '' , hash = `` sha256:7c5599b102feddaa661c826c56ab4fee28bfd17f5abca1ebbe3e7f19d7c97983 '' } , { file = `` psutil-5.9.2-cp310-cp310-win_amd64.whl '' , hash = `` sha256 : f4cb67215c10d4657e320037109939b1c1d2fd70ca3d76301992f89fe2edb1f1 '' } , { file = `` typing_extensions-4.4.0.tar.gz '' , hash = `` sha256:1511434bb92bf8dd198c12b1cc812e800d4181cfcb867674e0f8279cc93087aa '' } , { file = `` sphinxcontrib-htmlhelp-2.0.0.tar.gz '' , hash = `` sha256 : f5f8bb2d0d629f398bf47d0d69c07bc13b65f75a81ad9e2f71a63d4b7a2f6db2 '' } , 'myst_parser ' , sql.find_all ( { file = `` psycopg_binary-3.1.3-cp39-cp39-macosx_10_9_x86_64.whl '' , hash = `` sha256:7d8cca88f1b3e79895d9becbb9ed30b31324050e5502bd20bc94219cb80bc039 '' } , name = `` pexpect '' { file = `` PyYAML-6.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl '' , hash = `` sha256 : afa17f5bc4d1b10afd4466fd3a44dc0e245382deca5b3c353d8b757f9e3ecb8d '' } , 5432:5432 { file = `` idna-3.4.tar.gz '' , hash = `` sha256:814f528e8dead7d329833b91c5faa87d60bf71824cd12a7530b5526063d02cb4 '' } , `` WHERE order_total_eur = 0 AND order_total_eur = 100 ; '' optional = false The psql wrapper module has following requirements : compare = [ `` commonmark ( > =0.9.1 , < 0.10.0 ) '' , `` markdown ( > =3.3.6 , < 3.4.0 ) '' , `` mistletoe ( > =0.8.1 , < 0.9.0 ) '' , `` mistune ( > =2.0.2 , < 2.1.0 ) '' , `` panflute ( > =2.1.3 , < 2.2.0 ) '' ] { file = `` MarkupSafe-2.1.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl '' , hash = `` sha256 : e72591e9ecd94d7feb70c1cbd7be7b3ebea3f548870aa91e2732960fa4d57a37 '' } , pytest = `` ^7.1.3 '' { file = `` PyYAML-6.0-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl '' , hash = `` sha256:473f9edb243cb1935ab5a084eb238d842fb8f404ed2193a915d1784b5a6b5fc0 '' } , python-versions = `` > =2.6 , ! =3.0 . * , ! =3.1 . * , ! =3.2 . * '' { file = `` psycopg_binary-3.1.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl '' , hash = `` sha256:18446766f3e1f3a8b6e2046a176c55992d2617b4c2b64c007969192210ee790f '' } , code-style = [ `` pre-commit ( > =2.12 , < 3.0 ) '' ] { file = `` sqlglot-6.3.5-py3-none-any.whl '' , hash = `` sha256:913628dc6cbeef5e7fee725ffe206fbc6363421d1bf2ab8f5de5a465029a522d '' } , from psycopg2.extensions import connection sphinx = `` > =4 , < 6 '' testing = [ `` coverage '' , `` pytest '' , `` pytest-cov '' , `` pytest-regressions '' ] description = `` Type hints ( PEP 484 ) support for the Sphinx autodoc extension '' version = `` 3.0.9 '' { file = `` PyYAML-6.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl '' , hash = `` sha256:231710d57adfd809ef5d34183b8ed1eeae3f76459c18fb4a0b373ad56bedcdd9 '' } , exclude_patterns = [ 'build ' , 'Thumbs.db ' , '.DS_Store ' ] [ tool.poetry.dependencies ] mdit-py-plugins = `` > =0.3.1 , < 0.4.0 '' psycopg-binary = [ { file = `` certifi-2022.9.24-py3-none-any.whl '' , hash = `` sha256:90c1a32f1d68f940488354e36370f6cca89f0f106db09518524c88d6ed83f382 '' } , description = `` sphinxcontrib-htmlhelp is a sphinx extension which renders HTML help files '' version = `` 0.7.12 '' { file = `` mdit-py-plugins-0.3.1.tar.gz '' , hash = `` sha256:3fc13298497d6e04fe96efdd41281bfe7622152f9caa1815ea99b5c893de9441 '' } , { file = `` psycopg_binary-3.1.3-cp38-cp38-musllinux_1_1_ppc64le.whl '' , hash = `` sha256:3df3283361e5e1a8e36ca8f788d83441551d3fdf50f53495156f535eb41c2dcc '' } , name = `` tzdata '' version = `` 0.17.1 '' { file = `` PyYAML-6.0.tar.gz '' , hash = `` sha256:68fb519c14306fec9720a2a5b45bc9f0c8d1b9c72adf45c37baedfcd949c35a2 '' } , version = `` 1.1.1 '' if : github.ref == 'refs/heads/main ' from .psqlparser import PsqlParser version = `` 2.10.3 '' if self.debug : user=getenv ( `` POSTGRES_USER '' , `` postgres '' ) , description = `` sphinxcontrib-serializinghtml is a sphinx extension which outputs \ '' serialized\ '' HTML files ( json and pickle ) . '' { file = `` PyYAML-6.0-cp311-cp311-win32.whl '' , hash = `` sha256 : bfaef573a63ba8923503d27530362590ff4f576c626d86a9fed95822a8255fd7 '' } , on : push path : .venv 'sphinx_autodoc_typehints ' , Constructor is the only currently required interface . { file = `` psycopg_binary-3.1.3-cp38-cp38-manylinux_2_17_i686.manylinux2014_i686.whl '' , hash = `` sha256:329a5515cdda94d13da64f3c5088307f91220538e4d6d089845e3f323d5c364d '' } , Expected to be deprecated when detecting multiple statements is implemented . version = `` 1.0.3 '' toml = [ { file = `` psutil-5.9.2-cp310-cp310-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl '' , hash = `` sha256:39ec06dc6c934fb53df10c1672e299145ce609ff0611b569e75a88f313634969 '' } , from . import util # used to test relative imports sphinxcontrib-jsmath = [ mdurl = [ { file = `` psutil-5.9.2-cp39-cp39-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl '' , hash = `` sha256:14b29f581b5edab1f133563272a6011925401804d52d603c5c606936b49c8b97 '' } , ====================== name = `` sqlglot '' name = `` sphinx '' project = 'PostgreSQL for novices ' # # # Poetry { file = `` psutil-5.9.2-cp27-cp27m-win32.whl '' , hash = `` sha256 : b1928b9bf478d31fdffdb57101d18f9b70ed4e9b0e41af751851813547b2a9ab '' } , * [ Psql wrapper interface ] ( psql-wrapper ) version = `` 1.4.1 '' # poetry run pylint src -- exit-zero { file = `` MarkupSafe-2.1.1-cp38-cp38-win_amd64.whl '' , hash = `` sha256 : fc7b548b17d238737688817ab67deebb30e8073c95749d55538ed473130ec0c7 '' } , : caption : Contents : content-hash = `` 414b5507791102a29568bebccebc8956b0259d914d547b98cbefa492fde7874f '' host=getenv ( `` PGHOST '' , `` 127.0.0.1 '' ) , rtd = [ `` attrs '' , `` myst-parser '' , `` pyyaml '' , `` sphinx '' , `` sphinx-copybutton '' , `` sphinx-design '' , `` sphinx_book_theme '' ] Indices and tables secure = [ `` certifi '' , `` cryptography ( > =1.3.4 ) '' , `` idna ( > =2.0.0 ) '' , `` ipaddress '' , `` pyOpenSSL ( > =0.14 ) '' , `` urllib3-secure-extra '' ] ` db_name ` is name of the database psql needs to access [ package.extras ] { file = `` psycopg-3.1.3-py3-none-any.whl '' , hash = `` sha256:5d19e5d10c44fd858cfb72761635200f836847df0a07cb97c3aa5df264b1379d '' } , description = `` Docutils -- Python Documentation Utilities '' docs = [ `` furo '' , `` sphinx '' , `` sphinx-notfound-page '' , `` zope.interface '' ] docutils = `` > =0.15 , < 0.20 '' { file = `` PyYAML-6.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl '' , hash = `` sha256 : d67d839ede4ed1b28a4e8909735fc992a923cdb84e618544973d7dfc71540803 '' } , { file = `` Pygments-2.13.0.tar.gz '' , hash = `` sha256:56a8508ae95f98e2b9bdf93a6be5ae3f7d8af858b43e02c5a2ff083726be40c1 '' } , pyparsing = [ { file = `` sphinxcontrib-devhelp-1.0.2.tar.gz '' , hash = `` sha256 : ff7f1afa7b9642e7060379360a67e9c41e8f3121f2ce9164266f61b9f4b338e4 '' } , dev = [ `` pre-commit '' , `` tox '' ] { file = `` snowballstemmer-2.2.0.tar.gz '' , hash = `` sha256:09b16deb8547d3412ad7b590689584cd0fe25ec8db3be37788be3810cbf19cb1 '' } , # # PsqlWrapper name = `` setuptools '' snowballstemmer = [ jinja2 = `` * '' lock-version = `` 1.1 '' { file = `` PyYAML-6.0-cp310-cp310-macosx_11_0_arm64.whl '' , hash = `` sha256:9df7ed3b3d2e0ecfe09e14741b857df43adb5a3ddadc919a2d94fbdf78fea53c '' } , if __name__ == `` __main__ '' : '.rst ' : 'restructuredtext ' , description = `` This package provides 29 stemmers for 28 languages generated from Snowball algorithms . '' 1 . If ` docs/api ` is not up-to-date or does n't exist , run : < br > ` poetry run sphinx-apidoc -f -o docs/api src/pg4n ' * /test_ * ' ` # Architecture { file = `` alabaster-0.7.12-py2.py3-none-any.whl '' , hash = `` sha256:446438bdcca0e05bd45ea2de1668c1d9b032e1a9154c2c259092d77031ddd359 '' } , MarkupSafe = `` > =2.0 '' version = `` 2.0.1 '' testing = [ `` covdefaults ( > =2.2 ) '' , `` coverage ( > =6.4.4 ) '' , `` diff-cover ( > =7.0.1 ) '' , `` nptyping ( > =2.3.1 ) '' , `` pytest ( > =7.1.3 ) '' , `` pytest-cov ( > =3 ) '' , `` sphobjinv ( > =2.2.2 ) '' , `` typing-extensions ( > =4.3 ) '' ] { file = `` MarkupSafe-2.1.1-cp310-cp310-win32.whl '' , hash = `` sha256:4a33dea2b688b3190ee12bd7cfa29d39c9ed176bda40bfa11099a3ce5d3a7ac6 '' } , sqlglot = [ runs-on : ubuntu-latest { file = `` MarkupSafe-2.1.1-cp310-cp310-musllinux_1_1_x86_64.whl '' , hash = `` sha256 : efc1913fd2ca4f334418481c7e595c00aad186563bbc1ec76067848c7ca0a933 '' } , sphinxcontrib-htmlhelp = `` > =2.0.0 '' { file = `` MarkupSafe-2.1.1-cp310-cp310-musllinux_1_1_aarch64.whl '' , hash = `` sha256 : b09bf97215625a311f669476f44b8b318b075847b49316d3e28c08e41a7a573f '' } , { file = `` PyYAML-6.0-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl '' , hash = `` sha256:40527857252b61eacd1d9af500c3337ba8deb8fc298940291486c465c8b46ec0 '' } , { file = `` PyYAML-6.0-cp310-cp310-macosx_10_9_x86_64.whl '' , hash = `` sha256 : d4db7c7aef085872ef65a8fd7d6d09a14ae91f691dec3e87ee5ee0539d516f53 '' } , { file = `` psutil-5.9.2-cp38-cp38-macosx_10_9_x86_64.whl '' , hash = `` sha256 : fd331866628d18223a4265371fd255774affd86244fc307ef66eaf00de0633d5 '' } , { file = `` pycodestyle-2.9.1.tar.gz '' , hash = `` sha256:2c9607871d58c76354b697b42f5d57e1ada7d261c261efac224b664affdc5785 '' } , { file = `` sphinxcontrib-jsmath-1.0.1.tar.gz '' , hash = `` sha256 : a9925e4a4587247ed2191a22df5f6970656cb8ca2bd6284309578f2153e0c4b8 '' } , description = `` Internationalization utilities '' { file = `` Pygments-2.13.0-py3-none-any.whl '' , hash = `` sha256 : f643f331ab57ba3c9d89212ee4a2dabc6e94f117cf4eefde99a0574720d14c42 '' } , 2 . To generate the documentation : < br > ` poetry run sphinx-build -b html docs docs/build ` { file = `` MarkupSafe-2.1.1-cp310-cp310-musllinux_1_1_i686.whl '' , hash = `` sha256:694deca8d702d5db21ec83983ce0bb4b26a578e71fbdbd4fdcd387daa90e4d5e '' } , charset-normalizer = [ # # PsqlParser health-retries 5 alabaster = [ self._conn : connection = conn or psycopg2.connect ( * args , * * kwargs ) { file = `` psycopg_binary-3.1.3-cp38-cp38-musllinux_1_1_i686.whl '' , hash = `` sha256 : e72011077546d7284b3bce59942a84805613eb1166fe7b6d6e6483b0a87ac2fc '' } , # Documentation typehints_document_rtype = True python-versions = `` > =3.6.0 '' name = `` tomli '' # Editor Handle a user 's psql session transparently with select injections to psql output . name = `` imagesize '' { file = `` PyYAML-6.0-cp311-cp311-win_amd64.whl '' , hash = `` sha256:01b45c0191e6d66c470b6cf1b9531a771a83c1c4208272ead47a3ae4f2f603bf '' } , tests-no-zope = [ `` cloudpickle '' , `` coverage [ toml ] ( > =5.0.2 ) '' , `` hypothesis '' , `` mypy ( > =0.900 , ! =0.940 ) '' , `` pympler '' , `` pytest ( > =4.3.0 ) '' , `` pytest-mypy-plugins '' ] version = `` 2.4.2 '' name = `` sphinxcontrib-serializinghtml '' test = [ `` flake8 '' , `` mypy '' , `` pytest '' ] python-versions = `` > =3.6 '' version = `` 6.3.5 '' { file = `` MarkupSafe-2.1.1-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl '' , hash = `` sha256:3799351e2336dc91ea70b034983ee71cf2f9533cdff7c14c90ea126bfd95d65a '' } , from . import sqlparser sphinxcontrib-applehelp = [ filter ( lambda x : x.parent ! = None , sql.find_all ( sqlglot.exp.Select ) ) sphinx = `` ^5.2.3 '' colorama = { version = `` * '' , markers = `` sys_platform == \ '' win32\ '' '' } def __init__ ( self , * args , conn=None , * * kwargs ) : { file = `` MarkupSafe-2.1.1-cp38-cp38-musllinux_1_1_aarch64.whl '' , hash = `` sha256:6d0072fea50feec76a4c418096652f2c3238eaa014b2f94aeb1d56a66b41403f '' } , { file = `` psutil-5.9.2-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl '' , hash = `` sha256:4642fd93785a29353d6917a23e2ac6177308ef5e8be5cc17008d885cb9f70f12 '' } , /docs/api { file = `` sphinx_autodoc_typehints-1.19.4-py3-none-any.whl '' , hash = `` sha256 : e190d8ee8204c3de05a64f41cf10e592e987e4063c8ec0de7e4b11f6e036b2e2 '' } , requests = [ [ metadata.files ] name = `` pyparsing '' description = `` A sphinx extension which renders display math in HTML via JavaScript '' urllib3 = [ path : ~/.local { file = `` MarkupSafe-2.1.1-cp39-cp39-musllinux_1_1_x86_64.whl '' , hash = `` sha256:8e3dcf21f367459434c18e71b2a9532d96547aef8a871872a5bd69a715c15f96 '' } , { file = `` docutils-0.17.1.tar.gz '' , hash = `` sha256:686577d2e4c32380bb50cbb22f575ed742d58168cee37e99117a854bcd88f125 '' } , python-versions = `` ^3.10 '' { file = `` psutil-5.9.2-cp36-cp36m-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl '' , hash = `` sha256 : d75291912b945a7351d45df682f9644540d564d62115d4a20d45fa17dc2d48f8 '' } , { file = `` sphinx_rtd_theme-1.0.0.tar.gz '' , hash = `` sha256 : eec6d497e4c2195fa0e8b2016b337532b8a699a68bcb22a512870e16925c6a5c '' } , { file = `` pytest_postgresql-4.1.1-py3-none-any.whl '' , hash = `` sha256 : e4fca93189ce7e4f306ed5974cd5fdbb988f6b18ea51d12465dd301fcace933f '' } , { file = `` py-1.11.0.tar.gz '' , hash = `` sha256:51c75c4126074b472f746a24399ad32f6053d1b34b68d2fa41e558e6f4a98719 '' } , lint = [ `` docutils-stubs '' , `` flake8 ( > =3.5.0 ) '' , `` flake8-bugbear '' , `` flake8-comprehensions '' , `` flake8-simplify '' , `` isort '' , `` mypy ( > =0.981 ) '' , `` sphinx-lint '' , `` types-requests '' , `` types-typed-ast '' ] port-for = `` * '' version = `` 1.26.12 '' { file = `` psutil-5.9.2-cp38-cp38-win32.whl '' , hash = `` sha256:561dec454853846d1dd0247b44c2e66a0a0c490f937086930ec4b8f83bf44f06 '' } , # # # Running tests version = `` 4.8.0 '' < ! -- TODO : generate appropriately scoped access token so a bot can comment lint results profiling = [ `` gprof2dot '' ] { file = `` psycopg_binary-3.1.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl '' , hash = `` sha256 : e8bc439231b835d55127c955a7f8e95d3b88b9a4f7f6a43f1ec2117a959114c7 '' } , { file = `` PyYAML-6.0-cp36-cp36m-manylinux_2_17_s390x.manylinux2014_s390x.whl '' , hash = `` sha256:48c346915c114f5fdb3ead70312bd042a953a8ce5c7106d5bfb1a5254e47da92 '' } , dev = [ `` black ( > =22.3.0 ) '' , `` dnspython ( > =2.1 ) '' , `` flake8 ( > =4.0 ) '' , `` mypy ( > =0.981 ) '' , `` types-setuptools ( > =57.4 ) '' , `` wheel ( > =0.37 ) '' ] { file = `` psutil-5.9.2-cp38-cp38-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl '' , hash = `` sha256 : b315febaebae813326296872fdb4be92ad3ce10d1d742a6b0c49fb619481ed0b '' } , python-versions = `` > =3.7 '' { file = `` psutil-5.9.2.tar.gz '' , hash = `` sha256 : feb861a10b6c3bb00701063b37e4afc754f8217f0f09c42280586bd6ac712b5c '' } , packages = [ { include = `` pg4n '' , from = `` src '' } ] subqueries = filter ( unicode-backport = [ `` unicodedata2 '' ] pyyaml = [ touch docs/build/.nojekyll run : | { file = `` psutil-5.9.2-cp27-cp27m-manylinux2010_i686.whl '' , hash = `` sha256:8f024fbb26c8daf5d70287bb3edfafa22283c255287cf523c5d81721e8e5d82c '' } , c = [ `` psycopg-c ( ==3.1.3 ) '' ] { file = `` markdown_it_py-2.1.0-py3-none-any.whl '' , hash = `` sha256:93de681e5c021a432c63147656fe21790bc01231e0cd2da73626f1aa3ac0fe27 '' } , psycopg-binary = { version = `` 3.1.3 '' , optional = true , markers = `` extra == \ '' binary\ '' '' } { file = `` Babel-2.10.3.tar.gz '' , hash = `` sha256:7614553711ee97490f732126dc077f8d0ae084ebc6a96e23db1482afabdb2c51 '' } , brotli = [ `` brotli ( > =1.0.9 ) '' , `` brotlicffi ( > =0.8.0 ) '' , `` brotlipy ( > =0.6.0 ) '' ] name = `` snowballstemmer '' babel = [ version = `` 5.2.3 '' test = [ `` pytest '' ] typing-extensions = `` * '' name = `` docutils '' { file = `` psycopg_binary-3.1.3-cp39-cp39-musllinux_1_1_ppc64le.whl '' , hash = `` sha256 : ccc2da1d4f5c9cea1686b645403e595d335b086792b240f83de331a4b4f8cfdc '' } , markdown-it-py = `` > =1.0.0 , < 3.0.0 '' .vscode/ { file = `` sphinxcontrib_devhelp-1.0.2-py2.py3-none-any.whl '' , hash = `` sha256:8165223f9a335cc1af7ffe1ed31d2871f325254c0423bc0c4c7cd1c1e4734a2e '' } , Parse for an empty prompt , usually to detect when a query evaluation has ended . attrs = [ # # # Linting version = `` 22.1.0 '' import sys name = `` markdown-it-py '' description = `` Internationalized Domain Names in Applications ( IDNA ) '' { file = `` pexpect-4.8.0.tar.gz '' , hash = `` sha256 : fc65a43959d153d0114afe13997d439c22823a27cefceb5ff35c2178c6784c0c '' } , { file = `` urllib3-1.26.12.tar.gz '' , hash = `` sha256:3fa96cf423e6987997fc326ae8df396db2a8b7c667747d47ddd8ecba91f4a74e '' } , tests = [ `` cloudpickle '' , `` coverage [ toml ] ( > =5.0.2 ) '' , `` hypothesis '' , `` mypy ( > =0.900 , ! =0.940 ) '' , `` pympler '' , `` pytest ( > =4.3.0 ) '' , `` pytest-mypy-plugins '' , `` zope.interface '' ] { file = `` myst_parser-0.18.1-py3-none-any.whl '' , hash = `` sha256:61b275b85d9f58aa327f370913ae1bec26ebad372cc99f3ab85c8ec3ee8d9fb8 '' } , { file = `` toml-0.10.2-py2.py3-none-any.whl '' , hash = `` sha256:806143ae5bfb6a3c6e736a764057db0e6a0e05e338b5630894a5f779cabb4f9b '' } , .. toctree : : colorama = { version = `` > =0.4.5 '' , markers = `` sys_platform == \ '' win32\ '' '' } source_suffix = { [ package.dependencies ] # black = `` ^22.10.0 '' { file = `` sphinxcontrib_jsmath-1.0.1-py2.py3-none-any.whl '' , hash = `` sha256:2ec2eaebfb78f3f2078e73666b1415417a116cc848b72e5172e596c871103178 '' } , version = `` 1.19.4 '' sphinxcontrib-serializinghtml = `` > =1.1.5 '' # # Notes for developers version = `` 0.7.0 '' binary = [ `` psycopg-binary ( ==3.1.3 ) '' ] image : postgres:14.5-alpine test = [ `` html5lib '' , `` pytest '' ] { file = `` sphinx_autodoc_typehints-1.19.4.tar.gz '' , hash = `` sha256 : ffd8e710f6757471b5c831c7ece88f52a9ff15f27836f4ef1c8695a64f8dcca8 '' } , description = `` plugin and hook calling mechanisms for python '' { file = `` PyYAML-6.0-cp39-cp39-macosx_11_0_arm64.whl '' , hash = `` sha256 : e61ceaab6f49fb8bdfaa0f92c4b57bcfbea54c09277b1b4f7ac376bfb7a7c174 '' } , python-versions = `` > =2.7 , ! =3.0. * , ! =3.1. * , ! =3.2. * , ! =3.3 . * '' description = `` YAML parser and emitter for Python '' socks = [ `` PySocks ( > =1.5.6 , ! =1.5.7 ) '' ] { file = `` PyYAML-6.0-cp36-cp36m-macosx_10_9_x86_64.whl '' , hash = `` sha256:897b80890765f037df3403d22bab41627ca8811ae55e9a722fd0392850ec4d86 '' } , name = `` pytz '' { file = `` psutil-5.9.2-cp27-cp27mu-manylinux2010_x86_64.whl '' , hash = `` sha256:256098b4f6ffea6441eb54ab3eb64db9ecef18f6a80d7ba91549195d55420f84 '' } , sphinxcontrib-applehelp = `` * '' name = `` myst-parser '' To make VS Code use Poetry 's virtual environment , type ` poetry env info ` , copy virtual environment executable path , press F1 and type ` Python : Select Interpreter ` > ` Enter interpreter path ... ` > paste path and press ` < ENTER > ` . pluggy = [ # poetry run isort `` src '' / * * / * .py -m 3 -- trailing-comma -c & & \ key : pydeps- $ { { hashFiles ( ' * * /poetry.lock ' ) } } { file = `` psycopg_binary-3.1.3-cp37-cp37m-musllinux_1_1_ppc64le.whl '' , hash = `` sha256:0d9fa168faf2b87d09148450819a7842d1ba499585e921725a1e0abfd132b770 '' } , def main ( ) : { file = `` MarkupSafe-2.1.1-cp39-cp39-macosx_10_9_universal2.whl '' , hash = `` sha256 : e04e26803c9c3851c931eac40c695602c6295b8d432cbe78609649ad9bd2da8a '' } , user=getenv ( `` PGUSER '' , `` postgres '' ) , { file = `` sphinxcontrib_qthelp-1.0.3-py2.py3-none-any.whl '' , hash = `` sha256 : bd9fc24bcb748a8d51fd4ecaade681350aa63009a347a8c14e637895444dfab6 '' } , python-versions = `` > =3.6.8 '' setuptools = [ # poetry run black src -- check & & \ description = `` Python style guide checker '' { file = `` ptyprocess-0.7.0-py2.py3-none-any.whl '' , hash = `` sha256:4b41f3967fce3af57cc7e94b888626c18bf37a083e3651ca8feeb66d492fef35 '' } , python-versions = `` > =2.7 , ! =3.0 . * , ! =3.1 . * , ! =3.2 . * , ! =3.3 . * , ! =3.4 . * '' `` WHERE order_total_eur = 0 AND order_total_eur = 100 ; '' { file = `` PyYAML-6.0-cp39-cp39-win32.whl '' , hash = `` sha256 : b5b9eccad747aabaaffbc6064800670f0c297e52c12754eb1d976c57e4f74dcb '' } , # poetry run mypy src -- show-error-codes -- show-error-context -- pretty & & \ language = 'en ' interfaces subqueries = \ sphinx = `` > =5.2.1 '' { file = `` psutil-5.9.2-cp37-cp37m-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl '' , hash = `` sha256:91aa0dac0c64688667b4285fa29354acfb3e834e1fd98b535b9986c883c2ce1d '' } , { file = `` MarkupSafe-2.1.1-cp38-cp38-macosx_10_9_x86_64.whl '' , hash = `` sha256:0212a68688482dc52b2d45013df70d169f542b7394fc744c02a57374a4207003 '' } , snowballstemmer = `` > =2.0 '' mypy src -- show-error-codes -- show-error-context -- pretty & & description = `` PostgreSQL database adapter for Python -- C optimisation distribution '' health-interval 10s description = `` library with cross-python path , ini-parsing , io , code , log facilities '' name = `` requests '' tomli = [ { file = `` psycopg_binary-3.1.3-cp310-cp310-macosx_10_9_x86_64.whl '' , hash = `` sha256:77a881b5bf6f7e5a5d9f0c0ad516e3577c1eff466398e50fc795cc703e022e7c '' } , { file = `` MarkupSafe-2.1.1-cp39-cp39-musllinux_1_1_aarch64.whl '' , hash = `` sha256:33b74d289bd2f5e527beadcaa3f401e0df0a89927c1559c8566c066fa4248ab7 '' } , `` ` port=getenv ( `` PGPORT '' , 5432 ) , from psqlparser import PsqlParser docs = [ `` Sphinx ( > =5.0 ) '' , `` furo ( ==2022.6.21 ) '' , `` sphinx-autobuild ( > =2021.3.14 ) '' , `` sphinx-autodoc-typehints ( > =1.12 ) '' ] This psql output analysis program is built around three essential modules : requests = `` > =2.5.0 '' { file = `` psycopg_binary-3.1.3-cp37-cp37m-musllinux_1_1_aarch64.whl '' , hash = `` sha256:61eea4dd3da1947e7fee1cbf98924935c78247cb5426d6156693caec31506e53 '' } , python-version : 3.10.7 # isort = `` ^5.10.1 '' charset-normalizer = `` > =2 , < 3 '' { file = `` Sphinx-5.2.3.tar.gz '' , hash = `` sha256:5b10cb1022dac8c035f75767799c39217a05fc0fe2d6fe5597560d38e44f0363 '' } , # pylint = `` ^2.15.4 '' version = `` 0.18.1 '' { file = `` psycopg_binary-3.1.3-cp38-cp38-macosx_11_0_arm64.whl '' , hash = `` sha256:6f5d16496db28a79bce834a5f919133ee491c4e5ae6ab555eef03d7590c77e05 '' } , description = `` Backported and Experimental Type Hints for Python 3.7+ '' { file = `` tzdata-2022.4-py2.py3-none-any.whl '' , hash = `` sha256:74da81ecf2b3887c94e53fc1d466d4362aaf8b26fc87cda18f22004544694583 '' } , jobs : tzdata = [ { file = `` psycopg_binary-3.1.3-cp39-cp39-win_amd64.whl '' , hash = `` sha256 : be1e65caeeff2a7b5454dfcea2af99d60e1a3ffade5a0dc627ef2b873a7419ac '' } , lambda x : `` Helpful message '' , name = `` babel '' name = `` jinja2 '' { file = `` iniconfig-1.1.1-py2.py3-none-any.whl '' , hash = `` sha256:011e24c64b7f47f6ebd835bb12a743f2fbe9a26d4cecaa7f53bc4f35ee9da8b3 '' } , sphinxcontrib-jsmath = `` * '' password=getenv ( `` POSTGRES_PASSWORD '' , `` postgres '' ) ) description = `` sphinxcontrib-devhelp is a sphinx extension which outputs Devhelp document . '' python-versions = `` > =3.5 '' version = `` 2.13.0 '' socks = [ `` PySocks ( > =1.5.6 , ! =1.5.7 , < 2.0 ) '' ] pluggy = `` > =0.12 , < 2.0 '' version = `` 0.1.2 '' { file = `` iniconfig-1.1.1.tar.gz '' , hash = `` sha256 : bc3af051d7d14b2ee5ef9969666def0cd1a000e121eaea580d4a313df4b37f32 '' } , name = `` toml '' { file = `` psycopg_binary-3.1.3-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl '' , hash = `` sha256 : a70d12928b379603605e71fe0a319cec829d244ea9dad82cb9387946b81be095 '' } , ports : packaging = `` > =21.0 '' # TODO : generate appropriately scoped access token so a bot can comment lint results markupsafe = [ { file = `` pytz-2022.4.tar.gz '' , hash = `` sha256:48ce799d83b6f8aab2020e369b627446696619e79645419610b9facd909b3174 '' } , { file = `` psycopg-3.1.3.tar.gz '' , hash = `` sha256 : d2c7c012e62083f800f9eb5eef849d5ed89940c3b31081d420279598f34c647e '' } , sphinx-autodoc-typehints = [ { file = `` MarkupSafe-2.1.1-cp38-cp38-musllinux_1_1_x86_64.whl '' , hash = `` sha256:6a074d34ee7a5ce3effbc526b7083ec9731bb3cbf921bbe1d3005d4d2bdb3a63 '' } , version = `` 7.1.3 '' PGUSER : postgres description = `` Safely add untrusted strings to HTML/XML markup . '' { file = `` MarkupSafe-2.1.1-cp39-cp39-win32.whl '' , hash = `` sha256 : d4306c36ca495956b6d568d276ac11fdd9c30a36f1b6eb928070dc5360b22e1c '' } , description = `` Pexpect allows easy control of interactive console applications . '' test = [ `` enum34 '' , `` ipaddress '' , `` mock '' , `` pywin32 '' , `` wmi '' ] { file = `` MarkupSafe-2.1.1.tar.gz '' , hash = `` sha256:7f91197cc9e48f989d12e4e6fbc46495c446636dfc81b9ccf50bb0ec74b91d4b '' } , { file = `` PyYAML-6.0-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl '' , hash = `` sha256 : a80a78046a72361de73f8f395f1f1e49f956c6be882eed58505a15f3e430962b '' } , # postgresql-for-novices version = `` 1.0.1 '' { file = `` MarkupSafe-2.1.1-cp37-cp37m-win32.whl '' , hash = `` sha256:8dc1c72a69aa7e082593c4a203dcf94ddb74bb5c8a731e4e1eb68d031e8498ff '' } , autopep8 = [ tests = [ `` pytest-cov '' , `` pytest-xdist '' ] { file = `` MarkupSafe-2.1.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl '' , hash = `` sha256:99a2a507ed3ac881b975a2976d59f38c19386d128e7a9a18b7df6fff1fd4c1d6 '' } , urllib3 = `` > =1.21.1 , < 1.27 '' virtualenvs-in-project : true { file = `` psycopg_binary-3.1.3-cp39-cp39-manylinux_2_17_i686.manylinux2014_i686.whl '' , hash = `` sha256:9a07815dec9b06a686e61320a4f3733c4750cd44f5338d742d2fa86b72ff4ee4 '' } , { file = `` sphinxcontrib_htmlhelp-2.0.0-py2.py3-none-any.whl '' , hash = `` sha256 : d412243dfb797ae3ec2b59eca0e52dac12e75a241bf0e4eb861e450d06c6ed07 '' } , psycopg = [ dev = [ `` cloudpickle '' , `` coverage [ toml ] ( > =5.0.2 ) '' , `` furo '' , `` hypothesis '' , `` mypy ( > =0.900 , ! =0.940 ) '' , `` pre-commit '' , `` pympler '' , `` pytest ( > =4.3.0 ) '' , `` pytest-mypy-plugins '' , `` sphinx '' , `` sphinx-notfound-page '' , `` zope.interface '' ] import os name = `` sphinx-autodoc-typehints '' # TODO : generate appropriately scoped access token so a bot can comment lint results babel = `` > =2.9 '' name = `` idna '' virtualenvs-create : true pytest-postgresql = `` ^4.1.1 '' mirakuru = [ mirakuru = `` > =2.3.0 '' { file = `` attrs-22.1.0-py2.py3-none-any.whl '' , hash = `` sha256:86efa402f67bf2df34f51a335487cf46b1ec130d02b8d39fd248abfd30da551c '' } , description = `` PostgreSQL database adapter for Python '' { file = `` idna-3.4-py3-none-any.whl '' , hash = `` sha256:90b77e79eaa3eba6de819a0c442c0b4ceefc341a7a2ab77d7562bf49f425c5c2 '' } , { file = `` psutil-5.9.2-cp310-cp310-macosx_10_9_x86_64.whl '' , hash = `` sha256:614337922702e9be37a39954d67fdb9e855981624d8011a9927b8f2d3c9625d9 '' } , testing = [ `` argcomplete '' , `` hypothesis ( > =3.56 ) '' , `` mock '' , `` nose '' , `` pygments ( > =2.7.2 ) '' , `` requests '' , `` xmlschema '' ] { file = `` psutil-5.9.2-cp39-cp39-win32.whl '' , hash = `` sha256 : ed29ea0b9a372c5188cdb2ad39f937900a10fb5478dc077283bf86eeac678ef1 '' } , { file = `` PyYAML-6.0-cp39-cp39-macosx_10_9_x86_64.whl '' , hash = `` sha256:055d937d65826939cb044fc8c9b08889e8c743fdc6a32b33e2390f66013e449b '' } , name = `` pyyaml '' { file = `` psutil-5.9.2-cp310-cp310-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl '' , hash = `` sha256 : e3ac2c0375ef498e74b9b4ec56df3c88be43fe56cac465627572dbfb21c4be34 '' } , description = `` sphinxcontrib-qthelp is a sphinx extension which outputs QtHelp document . '' { file = `` psycopg_binary-3.1.3-cp39-cp39-macosx_11_0_arm64.whl '' , hash = `` sha256 : e52062352bc133733d8dd284b1613a5d095fcae7ed0c608b89a6e4c674590bf9 '' } , from psycopg import Connection git-config-email : < > { file = `` psycopg_binary-3.1.3-cp37-cp37m-win_amd64.whl '' , hash = `` sha256 : bac38acebd15d60b2a051491273c61905c17b1aa015b81d323e07449f39f6855 '' } , { file = `` typing_extensions-4.4.0-py3-none-any.whl '' , hash = `` sha256:16fa4864408f655d35ec496218b85f79b3437c829e93320c7c9215ccfd92489e '' } , psycopg = { extras = [ `` binary '' ] , version = `` ^3.1.3 '' } name = `` sphinxcontrib-qthelp '' description = `` Python documentation generator '' pycodestyle = [ pexpect = [ description = `` World timezone definitions , modern and historical '' idna = [ { file = `` MarkupSafe-2.1.1-cp39-cp39-musllinux_1_1_i686.whl '' , hash = `` sha256:43093fb83d8343aac0b1baa75516da6092f58f41200907ef92448ecab8825135 '' } , name = `` psycopg '' testing-integration = [ `` build [ virtualenv ] '' , `` filelock ( > =3.4.0 ) '' , `` jaraco.envs ( > =2.2 ) '' , `` jaraco.path ( > =3.2.0 ) '' , `` pytest '' , `` pytest-enabler '' , `` pytest-xdist '' , `` tomli '' , `` virtualenv ( > =13.0.0 ) '' , `` wheel '' ] diagrams = [ `` jinja2 '' , `` railroad-diagrams '' ] from .. import qepparser { file = `` MarkupSafe-2.1.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl '' , hash = `` sha256 : a49907dd8420c5685cfa064a1335b6754b74541bbb3706c259c02ed65b644b3e '' } , { file = `` mdit_py_plugins-0.3.1-py3-none-any.whl '' , hash = `` sha256:606a7f29cf56dbdfaf914acb21709b8f8ee29d857e8f29dcc33d8cb84c57bfa1 '' } , { file = `` pluggy-1.0.0.tar.gz '' , hash = `` sha256:4224373bacce55f955a878bf9cfa763c1e360858e330072059e10bad68531159 '' } , plugins = [ `` importlib-metadata '' ] description = `` Python port of markdown-it . Markdown parsing , done right ! '' readme = `` README.md '' description = `` Read the Docs theme for Sphinx '' { file = `` psycopg_binary-3.1.3-cp38-cp38-musllinux_1_1_aarch64.whl '' , hash = `` sha256:4658c6945060363c7e96b7742f9b8082703b05310975070b3247f5c751f6307b '' } , jinja2 = [ { file = `` mirakuru-2.4.2.tar.gz '' , hash = `` sha256 : ec84d4d81b4bca96cb0e598c6b3d198a92f036a0c1223c881482c02a98508226 '' } , psqlparser.PsqlParser ( ) ) ci-flow : version = `` 0.10.2 '' description = `` Getting image size from png/jpeg/jpeg2000/gif file '' { file = `` psycopg_binary-3.1.3-cp310-cp310-musllinux_1_1_i686.whl '' , hash = `` sha256 : c568aeaa0ec5f3130c49b713830bfe1ae85d89fb9300d14409b8dc4cfa86391d '' } , lint = [ `` docutils-stubs '' , `` flake8 '' , `` mypy '' ] ] version = `` 1.0.2 '' { file = `` PyYAML-6.0-cp37-cp37m-win_amd64.whl '' , hash = `` sha256 : d15a181d1ecd0d4270dc32edb46f7cb7733c7c508857278d3d378d14d606db2d '' } , { file = `` colorama-0.4.5.tar.gz '' , hash = `` sha256 : e6c6b4334fc50988a639d9b98aa429a0b57da6e17b9a44f0451f930b6967b7a4 '' } , version = `` 1.7.0 '' sphinxcontrib-qthelp = [ health-cmd pg_isready # [ tool.poetry.group.ci.dependencies ] { file = `` PyYAML-6.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl '' , hash = `` sha256:432557aa2c09802be39460360ddffd48156e30721f5e8d917f01d31694216782 '' } , Returns an empty list if none found . env : Pygments = `` > =2.12 '' name = `` py '' name = `` charset-normalizer '' { file = `` setuptools-65.4.1.tar.gz '' , hash = `` sha256:3050e338e5871e70c72983072fe34f6032ae1cdeeeb67338199c2f74e083a80e '' } , python-versions = `` * '' name = `` iniconfig '' description = `` Python package for providing Mozilla 's CA Bundle . '' { file = `` packaging-21.3.tar.gz '' , hash = `` sha256 : dd47c42927d89ab911e606518907cc2d3a1f38bbd026385970643f9c5b8ecfeb '' } , Having PostgreSQL running on port 5432 , do ` poetry run pytest ` ( or , if on port x , just do ` PGPORT=x poetry run pytest ` ) . todo_include_todos = True isort `` src '' / * * / * .py -m 3 -- trailing-comma -c & & { file = `` psycopg_binary-3.1.3-cp310-cp310-musllinux_1_1_ppc64le.whl '' , hash = `` sha256 : fb7e9e17a8ec29d0199ee3f6f63fc10f7673887f0e13784764281a10bc6630da '' } , certifi = `` > =2017.4.17 '' typing-extensions = { version = `` > =4.1 '' , markers = `` python_version < \ '' 3.11\ '' '' } dev = [ `` bump2version '' , `` sphinxcontrib-httpdomain '' , `` transifex-client '' ] version = `` 1.1.5 '' import psycopg2 setuptools = `` * '' ` psql ` is the psql REPL log to be inspected . name = `` mdurl '' tzdata = { version = `` * '' , markers = `` sys_platform == \ '' win32\ '' '' } { file = `` sphinxcontrib_applehelp-1.0.2-py2.py3-none-any.whl '' , hash = `` sha256:806111e5e962be97c29ec4c1e7fe277bfd19e9652fb1a4392105b43e01af885a '' } , { file = `` PyYAML-6.0-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl '' , hash = `` sha256:9fa600030013c4de8165339db93d182b9431076eb98eb40ee068700c9c813e34 '' } , { file = `` alabaster-0.7.12.tar.gz '' , hash = `` sha256 : a661d72d58e6ea8a57f7a86e37d86716863ee5e92788398526d58b26a4e4dc02 '' } , port-for = [ { file = `` MarkupSafe-2.1.1-cp38-cp38-win32.whl '' , hash = `` sha256:421be9fbf0ffe9ffd7a378aafebbf6f4602d564d34be190fc19a193232fd12b1 '' } , pytz = [ postgres : certifi = [ name = `` pg4n '' { file = `` MarkupSafe-2.1.1-cp37-cp37m-musllinux_1_1_aarch64.whl '' , hash = `` sha256 : d5ee4f386140395a2c818d149221149c54849dfcfcb9f1debfe07a8b8bd63f9a '' } , { file = `` pyparsing-3.0.9-py3-none-any.whl '' , hash = `` sha256:5026bae9a10eeaefb61dab2f09052b9f4307d44aee4eda64b309723d8d206bbc '' } , import sqlparser { file = `` MarkupSafe-2.1.1-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl '' , hash = `` sha256:96e37a3dc86e80bf81758c152fe66dbf60ed5eca3d26305edf01892257049925 '' } , { file = `` psutil-5.9.2-cp310-cp310-win32.whl '' , hash = `` sha256 : e4c4a7636ffc47b7141864f1c5e7d649f42c54e49da2dd3cceb1c5f5d29bfc85 '' } , description = `` Core utilities for Python packages '' token : $ { { secrets.BOT_SECRET } } extensions = [ plugins = [ `` mdit-py-plugins '' ] PostgreSQL for novices name = `` ptyprocess '' [ metadata ] description = `` Collection of plugins for markdown-it-py '' version = `` 4.1.1 '' sphinx = [ import qepparser PGHOST : localhost import psqlparser { file = `` psutil-5.9.2-cp27-cp27m-win_amd64.whl '' , hash = `` sha256:404f4816c16a2fcc4eaa36d7eb49a66df2d083e829d3e39ee8759a411dbc9ecf '' } , { file = `` PyYAML-6.0-cp39-cp39-win_amd64.whl '' , hash = `` sha256 : b3d267842bf12586ba6c734f89d1f5b871df0273157918b0ccefa29deb05c21c '' } , version = `` 0.3.1 '' : maxdepth : 2 pool = [ `` psycopg-pool '' ]","['.github/workflows/ci-flow.yml', '.gitignore', 'README.md', 'docs/architecture.md', 'docs/conf.py', 'docs/index.rst', 'docs/interfaces.md', 'docs/program-architecture.md', 'main.py', 'orderby.py', 'poetry.lock', 'psqlparser.py', 'psqlwrapper.py', 'pyproject.toml', 'qepparser.py', 'sqlparser.py', 'src/pg4n/__init__.py', 'src/pg4n/main.py', 'src/pg4n/orderby.py', 'src/pg4n/psqlparser.py', 'src/pg4n/psqlwrapper.py', 'src/pg4n/qepparser.py', 'src/pg4n/sqlparser.py', 'src/pg4n/test/__init__.py', 'src/pg4n/test/test_qepparser.py', 'src/pg4n/util.py', 'test_qepparser.py']",2022-09-25 13:26:43+00:00,2022-10-13 09:22:39+00:00,2022-10-13 12:22:38+03:00
18,149f24e74104b324b62326453e7cbe12b53a5f5a,1.0208223102381451e-05,1,Design required classes and interfaces according to SOLID principles and potentially GoF design patterns . Document them in GitHub wiki .,Document architecture and interfaces for semantic analysis,Merge pull request # 101 from Project-C-SQL/feat/maintenance-plan,"# # # ` Wrapper ( db_name : str , hook_f : Callable [ str , str ] , parser : PsqlParser ) ` Returns a warning message if something was found , otherwise None . ` PsqlWrapper ` is responsible for spawning and intercepting the user-interfacing ` psql ` process . ` pexpect ` library allows both spawning and intercepting the terminal control stream . ` pyte ` library keeps track of current terminal display . Returns an empty list if no SQL statement is found . If found , returns a list of strings containing complete statement ( `` SELECT ... ; '' ) if flattened . Comparison between different domains ( Error 31 per Brass and Goldberg , 2005 ) ( ` CmpDomainChecker ` ) # Interfaces itself detects the inconsistent expression in its query optimizer and Returns warning message if there no column SELECTed in a subquery is # # Installing pg4n ` hook_f ` is the function that the wrapper sends prettified user input & program output to , and from where it gets its helpful messages to inject before next prompt . Returns warning message if there exists HAVING without a GROUP BY , otherwise None . # Maintaining pg4n # # Updating pg4n # # # Fixing parsing/interception bugs interfaces If improper parsing is suspected , turn ` PsqlParser.debug ` to ` True ` , that way all ` ParserException.explain ` s are saved into ` psqlparser.log ` . These exceptions are verbose , and will require fair amount of sifting . If improper interception by ` PsqlWrapper ` is suspected , turn ` PsqlWrapper.debug ` to ` True ` , to have current ` pyte ` display contents copied to ` pyte.screen ` on every update , and ` pexpect ` terminal control stream appended into ` psqlwrapper.log ` . Any wrapper issues are expected to be quite obtuse to fix , as they likely are ` pexpect ` or ` pyte ` library issues . otherwise None . ` PsqlWrapper ` also checks ` psql ` version info and checks it against ` PsqlWrapper.supported_psql_versions ` . ` parser ` is an implementation of PsqlParser interface . # # # # ConfigReader Returns an empty list if none found . maintenance-plan ` pyparsing ` documentation is available on [ Welcome to PyParsing ’ s documentation ! ] ( https : //pyparsing-docs.readthedocs.io/en/latest/ ) Overall working logic is handled by ` _check_and_act_on_repl_output ` , where it can be seen that queries are checked for every time user presses Return . If ` PsqlParser ` finds an SQL SELECT query , it 's passed to ` SemanticRouter ` for further analysis , and any insightful message returned is saved for later . Once all query results have been printed , and a new prompt ( e.g ` .. = > ` ) is going to be printed next per ` latest_output ` parameter , the wrapper injects the returned message . If results included ` ERROR : ` .. ` ^ ` , it is sent to syntax error analysis , and any returned message will be injected immediately . parsing last SQL SELECT query in a string ( ` parse_last_stmt ` ) Most of the semantic analysis modules have been implemented by parsing the SQL with ` sqlglot ` . Only few of the Checker classes use the query evaluation plan ( QEP ) . parsing ` psql -- version ` output for version number ( ` parse_psql_version ` ) For example : x = 10 AND x = 20 Reads all configuration files and combines their option output into a ` ConfigValues ` class . Options in the configuration file are written like : `` option\_name value '' where value may be : true , 1 , yes , false , 0 , no Strange HAVING ( Error 32 per Brass and Goldberg , 2005 ) ( ` StrangeHavingChecker ` ) program-architecture Unified error formatting . The configuration files are read in order from : /etc/pg4n.conf then from $ XDG\_CONFIG\_HOME/pg4n.conf , or if $ XDG\_CONFIG\_HOME is not set , from Also provides some utilities like finding all tables in a sql statement . Contains option values specied in the configuration files . Implied expression ( Table already enforces the given expression ) ( ` ImpliedExpressionChecker ` ) Runs SQLParser , QEPParser and semantic error analysis modules ( as configured ) against given SQL query string . See API docs . introduced in latter files overriding the previous value . # General information pg4n # # PsqlParser parsing a new prompt and everything that precedes it in a string , to allow easy message injection ( ` parse_new_prompt_and_rest ` ) Wildcards without LIKE ( Error 34 per Brass and Goldberg , 2005 ) ( ` EqWildcardChecker ` ) Parse for an empty prompt , usually to detect when a query evaluation has ended . ` pip install -- upgrade pg4n ` Does analysis for suspicous comparisons between different domains . parsing syntax errors ( ` ERROR : ` .. ` ^ ` ) ( ` parse_syntax_error ` ) This checker only finds a small subset of such expression , where postgresql ` PsqlConnInfo ` fetches PostgresSQL connection info by running a ` psql ` command with given arguments ( usually same arguments as with what the main ` psql ` process was called with ) . Frontend handles user 's psql session completely transparently via ` PsqlWrapper ` , although also injecting insightful messages regarding user 's semantic errors into the terminal output stream . It parses user 's SQL queries via ` PsqlParser ` for consumption in the backend . exposes that information via its query execution plan . The psql wrapper module has following requirements : # # # Thoughts on syntax error analysis # # # Extending parsers * [ Psql wrapper interface ] ( ./interfaces.md # psqlwrapper ) Transforms sql string into a syntax tree . ` CmpDomains false ` ORDER BY in a subquery ( ` SubqueryOrderByChecker ` ) ` PsqlWrapper ` has a ` hook_syntax_f ` function parameter ( of type ` str - > str ` ) , which is called with ` PsqlParser.parse_syntax_error ` -produced string , ideally `` ERROR : ... ^ '' , which , to our understanding , will always include the whole result , and also the SQL query itself ( as caret will point to it ) , so it does not have to be parsed separately . A syntax error analysis component should then return a message string , and it will be displayed in exactly the same way as semantic error strings . Parse for the content between two prompts . Returns an empty list if there is no statement or there was an error . ` db_name ` is name of the database psql needs to access # # # ` parse_for_a_new_prompt ( psql : str ) - > List [ str ] ` # # # # ImpliedExpressionChecker # # # ` parse_first_found_stmt ( psql : str ) - > List [ str ] ` # # Using pg4n # # Backend # Program architecture Binary files a/docs/architecture.jpg and /dev/null differ # # # SQLParser Expected to be deprecated when detecting multiple statements is implemented . # # # # SubquerySelectChecker # # # Analysis modules # # # SemanticRouter Condition in the subquery can be moved up ( Error 30 per Brass and Goldberg , 2005 ) ( ` SubquerySelectChecker ` ) DISTINCT in SUM and AVG ( Error 33 per Brass and Goldberg , 2005 ) ( ` SumDistinctChecker ` ) Parses a configuration file . # # Semantic errors detected Parsing rules common to more than 1 of these functions are listed in ` PsqlParser ` body , but otherwise rules are inside respective functions . Inconsistent expression is some expression that is never true . wild card character ( the ' % ' character ) , otherwise None . # # Frontend # # # # ConfigValues # # # # StrangeHavingChecker SELECT in subquery uses no tuple variable of subquery ( Error 29 per Brass and Goldberg , 2005 ) ( ` SubquerySelectChecker ` ) To our knowledge , there are no interdependencies with the parser functions , so they should be able to be extended as needed , and new ones added . checking if given string has a new prompt ( e.g ` = > ` ) ( ` output_has_new_prompt ` ) By default all warnings are enabled . Warnings can be disabled by warning type ( which can be found from every warning message 's end ) e.g . ` PsqlParser ` uses ` pyparsing ` parser combinator library to provide parsing functions for # # # # SubqueryOrderByChecker # # # PsqlConnInfo # # # # EqWildcardChecker Returns an empty list if no prompt is found . Returns prompt text ( `` dbname= > '' or `` dbname= # '' ) if found . # # # # ConfigParser Handle a user 's psql session transparently with select injections to psql output . checking for non-obvious Return presses ( ` output_has_magical_return ` ) ` pexpect ` does not seem to handle all terminal traffic . ` pyte ` and user terminal occasionally disagree on contents when user uses ctrl-R to fetch past queries , which prevents screenscraping SQL query properly . ` pyte ` also disagrees on display contents when exiting a separate query results screen , but this has no impact on ` pg4n ` performance . # # # # InconsistentExpressionChecker Returns warning message if the sql has SUM/AVG ( DISTINCT ... ) , otherwise None Each Checker class must use this to format their warning messages . Returns warning message if implied expression is detected , otherwise None . # # # PsqlWrapper # # # # SumDistinctChecker Returns warning message if the sql has equals operation to a string with # # # ErrorFormatter # # PsqlWrapper This psql output analysis program is built around three essential modules : Semantic error modules are expected to produce false negatives . e.g. , comparing columns off type VARCHAR ( 20 ) and VARCHAR ( 50 ) $ HOME/.config/pg4n.conf , and lastly from $ PWD/pg4n.conf , with each new value Pg4n only injects messages for the user , and is otherwise completely transparent . For this reason , usage is identical to ` psql ` usage . [ PostgreSQL : Documentation : 14 : psql ] ( https : //www.postgresql.org/docs/14/app-psql.html ) Constructor is the only currently required interface . # # # PsqlParser should never give false positives , only false negatives . Get query statements and their results , and sanitize them for syntactic analysis not used in that subquery of its own columns , otherwise returns None . # # # # CmpDomainChecker ` psql ` is the psql REPL log to be inspected . Returns warning message if there exists ORDER BY in a subquery , This check gives misses some situations with redundant ORDER BY but ` pip install pg4n ` Inconsistent expression ( Error 1 per Brass and Goldberg , 2005 ) ( ` InconsistentExpressionChecker ` ) # # Known limitations # # # QEPParser ! [ Program architecture sketch ] ( ./architecture.jpg ) # # # Implementing semantic analysis modules # # # Program configuration","['docs/architecture.jpg', 'docs/architecture.md', 'docs/index.rst', 'docs/interfaces.md', 'docs/maintenance-plan.md', 'docs/pg4n.md', 'docs/program-architecture.md']",2022-09-29 09:55:51+00:00,2022-11-10 10:38:14+00:00,2022-12-16 18:54:08+02:00
27,34b89977c8da671ed279950b4e5c98e364b2ee0a,1.0359479347243903e-05,1,Related to # 5,"Create FSM for interpreting control codes induced by e.g . up-/down-arrows , ctrl-R and backspace",Merge pull request # 48 from Project-C-SQL/feat/vt100decode,"{ file = `` pyte-0.8.1-py3-none-any.whl '' , hash = `` sha256 : d760ea9a7d455d179d9d7a4288fac3d231190b5226715f1fe8c62547bed9b9aa '' } , # possibly provide a message to be included in next new prompt . # complicated case : user has ctrl-R 'd , copy-pasted command or something , match_rev_prompt_end : ParserElement = \ prompt_res = match_rev_prompt_end.parse_string ( psql_rev ) # fresh prompt : # input does not trigger parsing ( Return is always at least 2 length ) # psql.ofilter ( b'\x08\x08\x08\x08 ' ) res_list [ 1 ] [ : :-1 ] wcwidth = [ g.write ( str ( new_output ) + '\n ' ) if self.debug : `` `` '' Test PsqlParser . '' '' '' from shutil import get_terminal_size # ? 1049 these wcwidth = `` * '' # `` \r\n\x1b [ ? 2004l\r '' , `` \r\n\r\r\n '' and `` \x08\r\n '' . # case_query_3_prompt = b ' order_id | order_total_eur | customer_id \r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\r\n ( 0 rows ) \r\n\r\n\x1b [ ? 2004hpgdb= # ' ParseException , ParseResults , ParserElement , StringEnd , Word , ZeroOrMore , \ res_list = prompt_res.as_list ( ) def replace_prompt ( self , new_prompt_msg : str , implemented . version = `` 0.8.1 '' [ `` \rl4002 ? [ \x1b\n\r '' ] self.pyte_screen_output_sink : Stream = Stream ( self.pyte_screen ) from functools import reduce { file = `` wcwidth-0.2.5-py2.py3-none-any.whl '' , hash = `` sha256 : beb4802a9cebb9144e99086eff703a642a13d6a0052920003a230f3294bbe784 '' } , return latest_output from typing import List , TextIO # optimization : do not spend time parsing if there is no message : latest_output ) and if it was run successfully . If so , add a fitting message in \ psqlparser.PsqlParser ( ) ) ( Literal ( `` > = '' ) | Literal ( `` # = '' ) ) + \ # psql.ofilter ( b'\x08\x08\x08\x08\x08\x08 ' ) and self.parser.parse_new_prompt ( `` \x1b [ ? 2004l\r order_id | order_total_eur | customer_id \r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\r\n ( 0 rows ) \r\n\r\n\x1b [ ? 2004hpgdb= # `` # but works fine without the whitespace .. to pick up relevant SQL statements for the hook function . '' '' '' psql.ofilter ( case_query_1 ) `` psql ( 14.5 ) \nType \ '' help\ '' for help.\n\npgdb= # SELECT * FROM orders ; '' sql_stmt : str = reduce ( lambda x , y : x + y , parsed_psql_stmt ) case_query_2_prompt = \ assert p.parse_new_prompt ( case_trivial ) == \ line and then the prompt , to allow easy message injection . bytes.decode ( prompt , `` utf-8 '' ) ) # Arrow-up to previous query , alt-B until 'orders WHERE ' and remove the `` `` '' Check if user hit return . wrap = psqlwrapper.PsqlWrapper ( sys.argv [ 1 ] .encode ( `` utf-8 '' ) , psql_log is only needed for analysis . self.pg4n_message = self.analyze ( parsed_sql_query ) if self.debug : psql = psqlwrapper.PsqlWrapper ( sys.argv [ 1 ] .encode ( `` utf-8 '' ) , # rev means reversed , these are for performance reasons . reduce ( lambda x , y : x + y [ : :-1 ] , results , `` '' ) if self.debug : return b '' ( self.cols , self.rows ) = get_terminal_size ( ) return new_output self.match_rev_magical_returns.parse_string ( psql_rev ) bytes.decode ( psql_log + latest_output ) ) `` `` '' Forward output to ` check_and_act_on_repl_output ( ) ` and feed \ a new statement ( `` = > `` prompt ) . split_prompt [ 1 ] , case_psql_start = \ b'\r\n ' return_press_3 = \ # then reverse the matched string . # User hit Return : parse for potential SQL query , analyze , and ( CaselessLiteral ( `` > - '' ) | CaselessLiteral ( `` # - '' ) ) + \ psql : psqlwrapper.PsqlWrapper = new_psqlwrapper ( ) # Turn on memoization optimization `` utf-8 '' ) self.fout.write ( str ( output ) + '\n ' ) return output self.analyze : Callable [ [ str ] , str ] = hook_f psql = psqlwrapper.PsqlWrapper ( `` '' , `` `` '' User input filter function for pexpect.interact : not used . assert psql.ofilter ( case_query_2_prompt ) == \ prompt_line_begins_at : int = prompt.rfind ( b'\x1b ' ) if self.pg4n_message ! = `` '' \ bytes.decode ( latest_output ) ) ! = [ ] : # there is new prompt [ `` > = '' ] [ `` '' , `` \x1b [ ? 2004hpgdb= > `` ] return self.replace_prompt ( helpful_message , : returns : unchanged input . `` `` '' Inject saved semantic error message into given prompt . `` `` '' Start psql process and then start feeding hook function with \ b ' order_id | order_total_eur | customer_id \r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\r\n ( 0 rows ) \r\n\r\n ' + b'\r\n ' + b'Test ' + b'\r\n\r\n ' + b'\x1b [ ? 2004hpgdb= # ' tok_stmt_end + ... + match_rev_sql_stmt_start # a ) start from previous prompt stmt_res : ParseResults = None `` `` '' Parse for the content between two prompts . Returns an empty \ helpful_message : str = \ assert p.parse_last_found_stmt ( case_select_then_select ) == \ res_list [ 2 ] [ : :-1 ] if error_res : psql.ofilter ( b'\r ( reverse-i-search ) ` \ ' : ' ) match_query_error : ParserElement = \ pyte = `` ^0.8.1 '' psql_rev : str = psql [ : :-1 ] `` `` '' if parsed_sql_query ! = `` '' : # TODO : test case for multiline - > queries # line is when user has pressed enter magical_return_res : ParseResults = None : returns : if user has indeed hit return . self.output_log = self.output_log + output def __init__ ( self , db_name_parameter : bytes , Test PsqlWrapper , and secondarily PsqlParser . return reversed_flattened_res ] stmt_res_list [ length - 3 ] ] # reverse order Expected to be deprecated when detecting multiple statements is # ? 2004 are try : psql.start ( ) hook_f : Callable [ str , str ] , parser : PsqlParser ) : # reverse given string , match reversed tokens , pick first match , self.parser : PsqlParser = parser Word ( prompt_chars ) + ( CaselessLiteral ( `` = > '' ) | CaselessLiteral ( `` = # '' ) ) f = open ( `` pyte.screen '' , `` w '' ) : param prompt : is where the message is injected . A fresh prompt is \ : returns : a two-part list with everything before the prompt \ case_long_return = \ if newline_pos < 0 : self.pg4n_message + `` \r\n\r\n '' psql_log : bytes ) - > bytes : f.write ( '\n'.join ( # BUG : control codes are not handled . # 27 name = `` wcwidth '' # pyte.Screen , pyte.Stream self.parser.parse_first_found_stmt ( def start ( self ) : b'\r\n\x1b [ ? 2004l\r ' printable.translate ( str.maketrans ( `` '' , `` '' , stmt_end ) ) Word ( prompt_chars ) + Char ( '\n ' ) return results def parse_last_found_stmt ( self , psql : str ) - > str : stmt_res = match_last_stmt.parse_string ( psql_rev ) to pick up relevant SQL statements for the hook function . if prompt_res : content-hash = `` be246bc88534ece065517f51ef31ec3cb98c4e31132da335493f7355474152d8 '' psql.ofilter ( case_psql_start ) bytes.decode ( latest_output ) ) ) > 0 psql.ofilter ( case_query_2 ) : param input : user input characters . self.fout = open ( 'wrapper.log ' , ' w ' ) # BUG ( ? ) : Assumes only single statement query parsed_psql_stmt : List [ str ] = \ ( CaselessLiteral ( `` - > '' ) | CaselessLiteral ( `` - # '' ) ) match_last_stmt : ParserElement = \ # saved stream of characters . : returns : an empty list if no prompt found . Otherwise has [ ' > = ' ] or \ just on the previous line before new prompt . '' '' '' # ? 1h cursor ? self.db_name : bytes = db_name_parameter # psql.ofilter ( b'\x08\x08 ' ) `` `` '' # TODO : For some reason Literal ( `` > = '' ) does not provide a match , ParserElement.setDefaultWhitespaceChars ( `` ) output log if substitute output is returned and replace output \ match_rev_magical_returns : ParserElement = \ # b ' order_id | order_total_eur | customer_id \r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\r\n ( 0 rows ) \r\n\r\n\r\nTest\r\n\r\n\x1b [ ? 2004hpgdb= # ' def test_ofilter ( ) : if parsed_psql_stmt : # BUG : Will match until previous SELECT query , if newest is e.g INSERT def parse_new_prompt ( self , psql : str ) - > List [ str ] : Returns an empty list if none found . new_output : bytes = self.check_and_act_on_repl_output ( output ) split_prompt : List [ str ] = \ b'\x1b [ ? 2004hpgdb= # ' `` `` '' Fit the new message in the right place , \ ZeroOrMore ( Char ( `` \n '' ) | Char ( `` \r '' ) ) + self.match_whole_rev_sql_stmt # shutil.get_terminal_size ( ) # assert psql.ofilter ( case_query_3_prompt ) == \ # prompt : lambda x : `` Test '' , Char ( '\n ' ) + Word ( prompt_chars ) + \ results = [ stmt_res_list [ length - 1 ] , # current unfixed bug case , needs to be fixed after mid-presentations : # assert p.parse_last_found_stmt ( case_select_then_insert ) == \ psql_rev = psql [ : :-1 ] # slicing is fastest operation for reversing : param psql : Raw console output that includes terminal control codes . # print ( psql.pyte_screen.display ) `` `` '' Interface with psql and capture all input and output . psql = new_psqlwrapper ( ) # magic strings related to solely to ctrl-R use are [ `` # = '' ] results = [ ] `` `` '' Parse for an empty prompt , to detect when a query \ db_name : bytes = b '' def check_and_act_on_repl_output ( self , latest_output : bytes ) - > bytes : # psql.ofilter ( case_query_3 ) [ package.dependencies ] def test_parse_new_prompt ( ) : `` SELECT * FROM orders ; '' return results `` `` '' Parse for an empty prompt and everything preceding it \ from pyparsing import CaselessLiteral , Char , Literal , MatchFirst , OneOrMore , \ new_output : bytes = self._replace_prompt ( latest_output ) ( CaselessLiteral ( `` = > '' ) | CaselessLiteral ( `` = # '' ) ) hook_f : Callable [ [ str ] , str ] , parser : PsqlParser ) : # and resulting message is saved until when new prompt comes in f = open ( `` psqlparser.log '' , `` a '' ) description = `` Measures the displayed width of unicode strings in a terminal '' p = psqlparser.PsqlParser ( ) stmt_res : ParseResults = None # in live scenarios most of the time , but I can not reproduce it with this match_rev_prompt_and_then_rest : ParserElement = \ if self._user_hit_return ( latest_output ) : match_whole_rev_sql_stmt : ParserElement = \ bytes.decode ( output , `` utf-8 '' ) ) ! = [ ] : to and from which semantic error messages are received in return . : returns : output with injected semantic error messages . case_mixed_results = \ psql.ofilter ( b '' \x08\x08\x08t ' : SELECT * FROM orders WHERE order_total_eur = 0 AND order_to\x1b [ 7mt\x1b [ 27mal_eur = 100 ; \x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08 '' ) self.fout = open ( 'psqlparser.log ' , ' w ' ) `` `` '' Parse for an empty prompt , usually to detect when a query \ ... + StringEnd ( ) : returns : parsed SQL query as plain string . b ' order_id | order_total_eur | customer_id \r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\r\n ( 0 rows ) \r\n\r\n\x1b [ ? 2004hpgdb= # ' return_press_1 = \ expected . if len ( latest_output ) < = 1 : # fresh prompt in this case : return_press_2 = \ # ctrl-R to previous query . Query includes a return press near end . self.parser.parse_last_found_stmt ( screen ) self.pg4n_message = `` '' self.output_log = b '' { file = `` wcwidth-0.2.5.tar.gz '' , hash = `` sha256 : c4d647b99872929fdb7bdcaa4fbe7f01413ed3d98077df798530e5b04f116c83 '' } , fresh_prompt_1 = \ | Literal ( `` \r\n\r\r\n '' [ : :-1 ] ) \ if there_is_new_prompt : analyze : Callable [ str , str ] `` `` '' Parse for last SQL query statement in a string . # case_select_then_insert = `` psql ( 14.5 ) \nType \ '' help\ '' for help.\n\npgdb= # SELECT * FROM orders ; \npgdb= # INSERT INTO orders VALUES ( 6 , 6 , 6 ) ; '' # K clear part of the line b'\x08\r\n ' [ `` \x1b [ ? 2004l\r order_id | order_total_eur | customer_id \r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\r\n ( 0 rows ) \r\n\r\n '' , `` \x1b [ ? 2004hpgdb= # `` ] : returns : a prompt with injected message . return True input_log : bytes = b '' def parse_new_prompt_and_rest ( self , psql : str ) - > List [ str ] : from typing import Callable , List , TextIO parsed_sql_query : str = \ before the new prompt . b'SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur = 100 ; ' SkipTo ( self.match_error ) def _user_hit_return ( self , output : bytes ) - > bool : # prompt is more complicated and has newlines in it : # ANSI escape codes ( \x1b [ ) used by psql : return new_prompt_msg.encode ( `` utf-8 '' ) + b'\r\n ' + prompt `` `` '' Parse for weird Return presses . ParserElement.enablePackrat ( None ) # memoization optimization print ( e.explain ( ) ) ( CaselessLiteral ( `` > = '' ) | CaselessLiteral ( `` # = '' ) ) + \ : param output : output seen on terminal screen . prompt : bytes ) : new_prompt_msg.encode ( `` utf-8 '' ) + b'\r\n ' + \ Uses pexpect in combination with pyte for interfacing and screen-scraping from typing import List # class debug g = open ( `` psqlwrapper.log '' , `` a '' ) new_output : bytes = self.check_and_act_on_repl_output ( output , self.analyze ( sql_stmt ) stmt_res = match_stmt.parse_string ( psql ) from typing import Callable , List # ? 1l escapes ( h = high , l = low ) b'psql ( 14.5 ) \r\nType `` help '' for help.\r\n\r\n\x1b [ ? 2004hpgdb= # ' def _replace_prompt ( self , prompt : bytes ) : res_list [ 0 ] [ : :-1 ] assert p.parse_new_prompt_and_rest ( case_mixed_results ) == \ def parse_for_new_prompt ( self , psql : str ) - > List [ str ] : match_rev_sql_stmt_start : ParserElement = \ from .. import psqlwrapper results = magical_return_res.as_list ( ) : returns : an empty list if no presses are found . \ fout : TextIO # extra whitespace : f.close ( ) def parse_first_found_stmt ( self , psql : str ) - > List [ str ] : from pyte import Stream , Screen if self.debug : self.match_sql_stmt_end assert p.parse_new_prompt_and_rest ( case_trivial ) == \ Entering a statement will always lead to a new prompt , so now \ `` `` '' Start wrapper on selected database . '' '' '' line.rstrip ( ) for line in self.pyte_screen.display ) `` `` '' Build wrapper for selected database . # we assume only situation with \r\n at start of # feed query to hook function and save resulting message if output [ 0:2 ] == b'\r\n ' : with it accordingly . '' '' '' reversed_flattened_res : str = \ : param psql : screenscraped psql string length : int = len ( stmt_res_list ) to 2 cells . `` `` '' Detect if psql has run a statement and is asking for \ def parse_magical_return ( self , psql : str ) - > List [ str ] : name = `` pyte '' self.fout.write ( str ( new_output ) + '\n ' ) def test_parse_new_prompt_and_rest ( ) : CaselessLiteral ( `` TCELES '' ) `` \r\x1b [ 16Ppgdb= # SELECT * FROM orders WHERE order_total_eur = 0 AND order_tot\x08\r\n\x1b [ ? 2004l\r '' : param hook_f : is a callback to which scraped SQL queries are passed \ # psql.ofilter ( return_press_1 ) : param output : is raw console output to be checked for return press . from pyparsing import CaselessLiteral , Char , Literal , MatchFirst , \ ParseException , ParseResults , ParserElement , SkipTo , Word , \ output to pyte screen for future screen-scraping . prompt_res = match_rev_prompt_and_then_rest.parse_string ( psql_rev ) assert p.parse_last_found_stmt ( case_trivial ) == \ self.input_log = self.input_log + input # Something weird going this test case . Pyte understands this case right dimensions= ( self.rows , self.cols ) ) case_select_then_select = \ # AND-clause will stop executing after first False . `` `` '' User input filter function for pexpect.interact : not used . '' '' '' analysis . It is also what the helpful message will be injected to . self.pyte_screen : Screen = Screen ( self.cols , self.rows ) Word ( self.prompt_chars ) + Literal ( `` ? [ \x1b '' ) + \ return bytes ( split_prompt [ 0 ] + `` \r\n '' # TODO : strip `` - > '' / '' - # '' from string to allow multiline queries pass results = [ stmt_res_list [ 1 ] , stmt_res_list [ 2 ] , stmt_res_list [ 3 ] ] Literal ( `` \r\n\x1b [ ? 2004l\r '' [ : :-1 ] ) \ : param parser : A parser that implements the required parsing functions . printable.translate ( str.maketrans ( `` '' , `` '' , stmt_end ) ) + control_codes assert p.parse_new_prompt ( case_mixed_results ) == \ there_is_new_prompt : bool = len ( self.parser.parse_for_new_prompt ( line.rstrip ( ) for line in self.pyte_screen.display ) ) # > if self.parser.parse_magical_return ( prompt_res : ParseResults = None tok_rev_prompt_linebreak : ParserElement = \ parser : PsqlParser results = [ res_list [ 3 ] [ : :-1 ] , from functools import reduce self.analyze = hook_f self.fout.write ( sql_stmt + '\n ' ) case_trivial = \ the output_log will be examined if an interesting statement was run , \ # If we have a semantic error message waiting and there is a fresh newline_pos : int = prompt.rfind ( b'\n ' ) return new_output control_codes : str = '\x1b ' + '\x08 ' [ ' # = ' ] . match_stmt : ParserElement = \ error_res : ParseResults = None # b ) amidst a return statement message . list if there is no statement or there was an error . description = `` Simple VTXXX-compatible terminal emulator . '' ParserElement.enablePackrat ( None ) self.output_log ) latest_output is what 's being changed and returned in new form . screen : str = '\n'.join ( Literal ( `` > = '' ) | Literal ( `` # = '' ) magical_return_res = \ or if a fresh prompt has come in and we can show them a helpful \ self.pyte_screen_output_sink.feed ( bytes.decode ( new_output ) ) | Literal ( `` \x08\r\n '' [ : :-1 ] ) # for optimization reasons , check output only if len ( ) > 1 , so keyboard `` `` '' Forward output to check_and_act_on_repl_output ( ) and flush \ return prompt [ : prompt_line_begins_at - 1 ] + \ b'\r\x1b [ 16Ppgdb= # SELECT * FROM orders WHERE order_total_eur = 0 AND order_tot\x08\r\n\x1b [ ? 2004l\r ' return psql self.db_name = db_name_parameter # simple query with single arrow-up to query content-hash = `` d36a59fb4927b0ae9d456fc7784468fd6eb6654450352279e7cdf1cfbe1e4441 '' : param latest_output : is used for Return press and fresh prompt \ # case_query_3 = \ # default whitespace rules complicate things needlessly , remove them : CaselessLiteral ( `` - > '' ) | CaselessLiteral ( `` - # '' ) # b'SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur = 100 ; ' if magical_return_res : pyte = [ error_res = match_query_error.parse_string ( psql ) ] version = `` 0.2.5 '' `` \x1b [ ? 2004hpgdb= > `` def test_parse_magical_return ( ) : output_log : bytes = b '' # trivial case : # trivial case . # b'\x1b [ ? 2004hpgdb= > ' [ [ package ] ] `` psql ( 14.5 ) \nType \ '' help\ '' for help.\n\npgdb= # SELECT * FROM orders ; \npgdb= # SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur = 100 ; '' # psql.ofilter ( b'\x08\x1b [ 1P ' ) f.close ( ) python-versions = `` * '' self.parser.parse_new_prompt_and_rest ( def check_and_act_on_repl_output ( self , latest_output : bytes , # psql REPL has outputted a multiline chunk that may stmt_res_list [ length - 2 ] , from .. import psqlparser case_query_2 = \ Otherwise has newline text . assert psql.ofilter ( fresh_prompt_1 ) == \ case_query_1 = \ self.pg4n_message : str = `` '' intercepted output . '' '' '' ... + self.match_sql_stmt_start + self.match_sql_stmt + \ # = Only one ( static ) class instance is intended for use in program . b'\r\n ' + b'Test ' + b'\r\n\r\n ' + b'\x1b [ ? 2004hpgdb= # ' return new_output f.write ( str ( e.explain ( ) ) + `` \n '' ) category = `` main '' # Analysis is always done when user presses Return `` SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur = 100 ; '' # m SGR ( set graphics mode ) except ParseException as e : { file = `` pyte-0.8.1.tar.gz '' , hash = `` sha256 : b9bfd1b781759e7572a6e553c010cc93eef58a19d8d1590446d84c19b1b097b0 '' } , def new_psqlwrapper ( ) : psql.ofilter ( return_press_1 ) `` `` '' Interface with psql and capture all input and output . '' '' '' prompt [ prompt_line_begins_at : ] return latest_output g.close ( ) dimensions= ( 48 , 160 ) ) `` `` '' Check if user has hit Return so we can start analyzing , \ assert p.parse_magical_return ( case_long_return ) == \ results : List [ str ] = [ ] else : if self.debug : optional = false def test_parse_last_found_stmt ( ) : return False def __init__ ( self , db_name_parameter : bytes , # `` '' if new_output ! = b '' : tok_rev_prompt : ParserElement = \ # cheaper and easier to reverse & start from the end `` `` '' : param db_name_parameter : is name of database we are connecting to . # Fix it by matching rev_stmt_start also against rev_prompt # and the \r\n is somewhere in midst of output .. self.parser = parser prompt_res = self.match_prompt.parse_string ( psql )","['poetry.lock', 'pyproject.toml', 'src/pg4n/main.py', 'src/pg4n/psqlparser.py', 'src/pg4n/psqlwrapper.py', 'src/pg4n/test/test_psqlparser.py', 'src/pg4n/test/test_psqlwrapper.py']",2022-10-07 08:29:54+00:00,2022-11-06 14:07:53+00:00,2022-11-06 16:07:52+02:00
33,672575a8e3f414ce9ffa1f47b1e18b13d13fb9eb,2.3715618226560764e-05,1,Allow a visitor ( ? ) pattern for passing custom functions to examine tree structure for semantic analysis,Extend QEPAnalysis interface for easier analysis,Merge pull request # 44 from Project-C-SQL/feat/improve-qeps,"`` `` '' Finds nodes matching the predicate , recursively . stmt = f '' explain ( format json , analyze , verbose ) { stmt.strip ( ) .rstrip ( ' ; ' ) } ; '' stmt.strip ( ) .rstrip ( ' ; ' ) + `` ; '' assert len ( qep.root.rfindval ( `` Node Type '' , `` Bitmap Index Scan '' ) ) == 4 : param node_ : the node to wrap '' '' '' return map ( QEPNode , self._node.get ( `` Plans '' , [ ] ) ) To install all dependencies and the application , type ` poetry install ` . After installation , if the Python scripts folder is in your PATH , you should be able to invoke ` main.main ( ) ` with ` pg4n ` . assert qep.root.findval ( `` Relation Name '' , `` comments '' ) == [ qep.plan ] assert qep.root.findval ( `` Relation Name '' , `` users '' ) == [ qep.plan ] password=getenv ( `` PGPASSWORD '' , `` postgres '' ) ) cur.execute ( `` set constraint_exclusion = on ; '' ) qep = parser ( `` select * from stories '' ) `` `` '' Test that the QEP rfind ( recursive find ) method works as expected . '' '' '' assert qep.root.findval ( `` Actual Rows '' , 1 ) == [ qep.plan ] assert qep.root.findval ( `` Node Type '' , `` Seq Scan '' ) == [ qep.plan ] qep = parser ( `` select * from users where id = 1 '' ) return list ( filter ( pred , self._node [ `` Plans '' ] ) ) | ` PGDBNAME ` | ` test_database ` | Database name . | : param recursive : if True , search recursively , otherwise only search password=getenv ( `` PGPASSWORD '' ) , `` `` '' Finds nodes with the given key and value , recursively . self._ref = not not conn `` `` '' Finds nodes matching the predicate . qep = parser ( `` select * from users '' ) Having PostgreSQL running on port 5432 , do ` poetry run pytest ` . qep = parser ( `` select * from stories where id = 1 '' ) self._ref = bool ( conn ) assert qep.root.findval ( `` Alias '' , `` users '' ) == [ qep.plan ] | ` PGUSER ` | ` postgres ` | The user that will be used to manage the test database . | assert qep.root.findval ( `` Actual Rows '' , 4 ) == [ qep.plan ] from itertools import chain def find ( self , pred : Callable [ [ node ] , bool ] ) - > list [ node ] : qep = parser ( `` select * from comments '' ) To get a similar PostgreSQL instance as with GitHub Actions workflow : < br > | -- -- -- -- -- -- | -- -- -- -- -- -- -- - | -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | : param pred : a function that takes a node and returns True if it matches list ( chain.from_iterable ( x.find ( pr , True ) for x in iter ( self ) ) ) return self._node.get ( `` Plans '' , [ ] ) `` `` '' Get the child node at the given index . : param pr : a function that takes a node and returns True if it matches | ` PGPORT ` | ` 5432 ` | Port to an active PostgreSQL instance . | return self.find ( lambda x : x.get ( key ) == val , recursive ) def test_qep_find ( parser : qepparser.QEPParser ) : assert qep.root.findval ( `` Relation Name '' , `` stories '' ) == [ qep.plan ] | ` PGHOST ` | ` 127.0.0.1 ` | Hostname of the PostgreSQL server . | def findval ( self , key : str , val : object , recursive=False ) - > list [ node ] : | ` PGPASSWORD ` | | Password , in case password authentication is used . | : param key : the key to search for def rfind ( self , pred : Callable [ [ node ] , bool ] ) - > list [ node ] : To install all dependencies and the application , type ` poetry install ` . After installation , if the Python scripts folder is in your PATH , you should be able to invoke ` main.main ( ) ` with ` pg4n ` . `` `` '' Test that the QEP find method works as expected . '' '' '' this+children `` `` '' Finds nodes with the given key and value . assert qep.root.findval ( `` Actual Rows '' , 2 ) == [ qep.plan ] qep = parser ( `` select * from users where id = 1 or id = 2 '' ) assert qep.root.findval ( `` Node Type '' , `` Index Scan '' ) == [ qep.plan ] | Variable | Default value | Description | `` `` '' Get the child node at the given index . '' '' '' with self._conn.cursor ( ) as cur : assert qep.root.findval ( `` Alias '' , `` stories '' ) == [ qep.plan ] return self.find ( pr ) + \ For example , if PostgreSQL is on port 5433 , just do ` PGPORT=5433 poetry run pytest ` ( Bash syntax ) . Having PostgreSQL running on port 5432 , do ` poetry run pytest ` ( or , if on port x , just do ` PGPORT=x poetry run pytest ` ) . qep = parser ( `` select * from comments where id = 1 or id = 2 '' ) return self.findval ( key , val , recursive=True ) stmt = `` explain ( format json , analyze , verbose ) '' + \ return list ( filter ( pr , chain ( ( self._node , ) , self.plans ) ) ) return self._node [ `` Plans '' ] assert len ( qep.root.rfindval ( `` Node Type '' , `` Bitmap Heap Scan '' ) ) == 1 qep = parser ( `` select * from stories where id = 1 or id = 2 '' ) self._conn.commit ( ) def test_gep_rfind ( parser : qepparser.QEPParser ) : You may need to provide environment variables that match your config : `` `` '' Find nodes matching the predicate . '' '' '' `` `` '' Create a new QEPNode . return map ( QEPNode , self._node [ `` Plans '' ] ) To get a similar instance as with GitHub Actions workflow : < br > return self.find ( pred , recursive=True ) : returns : the child node at the given index assert qep.root.findval ( `` Alias '' , `` comments '' ) == [ qep.plan ] if recursive : : returns : a list of matching nodes assert len ( qep.root.rfindval ( `` Node Type '' , `` BitmapOr '' ) ) == 2 dbname=getenv ( `` PGDBNAME '' , `` test_database '' ) ) qep = parser ( `` select * from comments where id = 1 '' ) recursive=False ) - > list [ node ] : def rfindval ( self , key : str , val : object ) - > list [ node ] : `` `` '' : param val : the value to search for : param key : the index of the child node to get # use constraint_exclusion to avoid unnecessary index scans def find ( self , pr : Callable [ [ node ] , bool ] ,","['README.md', 'src/pg4n/qepparser.py', 'src/pg4n/test/test_qepparser.py']",2022-10-13 10:05:14+00:00,2022-11-10 10:55:29+00:00,2022-11-05 13:28:47+02:00
42,67a44d6dcf82358abcf699c347b79c06a6c74dbe,1.01355572041939e-05,1,Pull request incoming,Improve CI/CD pipeline,Merge pull request # 51 from Project-C-SQL/feat/add-linter,"[ Notes for developers ] ( # notes-for-developers ) name = `` lazy-object-proxy '' { file = `` wrapt-1.14.1-cp36-cp36m-win32.whl '' , hash = `` sha256:81b19725065dcb43df02b37e03278c011a09e49757287dca60c5aecdd5a0b8ed '' } , image : postgres:14.5-alpine graph = [ `` objgraph ( > =1.7.2 ) '' ] { file = `` mypy-0.982.tar.gz '' , hash = `` sha256:85f7a343542dc8b1ed0a888cdd34dca56462654ef23aa673907305b260b3d746 '' } , ci-flow : typing-extensions = `` > =3.10 '' { file = `` wrapt-1.14.1-cp310-cp310-win32.whl '' , hash = `` sha256 : a9a52172be0b5aae932bef82a79ec0a0ce87288c7d132946d645eba03f0ad8a8 '' } , virtualenvs-create : true pathspec = [ path : .venv { file = `` mypy-0.982-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl '' , hash = `` sha256 : eaa97b9ddd1dd9901a22a879491dbb951b5dec75c3b90032e2baa7336777363b '' } , content-hash = `` 414b5507791102a29568bebccebc8956b0259d914d547b98cbefa492fde7874f '' on : push # pylint = `` ^2.15.4 '' # ` virtualenvs-in-project : true ` creates a ` .venv ` in test dir for easy caching colorama = { version = `` * '' , markers = `` platform_system == \ '' Windows\ '' '' } * [ Psql wrapper interface ] ( ./interfaces.md # psqlwrapper ) version = `` 22.10.0 '' touch docs/build/.nojekyll { file = `` black-22.10.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl '' , hash = `` sha256:14ff67aec0a47c424bc99b71005202045dc09270da44a27848d534600ac64fc7 '' } , { file = `` wrapt-1.14.1-cp36-cp36m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl '' , hash = `` sha256:9736af4641846491aedb3c3f56b9bc5568d92b0692303b5a305301a95dfd38b1 '' } , cat < ( runblack ) < ( runpylint ) < ( runmypy ) < ( runisort ) dmypy = [ `` psutil ( > =4.0 ) '' ] { file = `` tomlkit-0.11.6-py3-none-any.whl '' , hash = `` sha256:07de26b0d8cfc18f871aec595fda24d95b08fef89d147caa861939f37230bf4b '' } , # TODO : generate appropriately scoped access token so a bot can comment lint results { file = `` lazy_object_proxy-1.8.0-cp310-cp310-win32.whl '' , hash = `` sha256 : b70d6e7a332eb0217e7872a73926ad4fdc14f846e85ad6749ad111084e76df25 '' } , `` ` # mypy = `` ^0.982 '' category = `` dev '' { file = `` mypy-0.982-py3-none-any.whl '' , hash = `` sha256:1021c241e8b6e1ca5a47e4d52601274ac078a89845cfde66c6d5f769819ffa1d '' } , n= $ ( echo `` $ lintres '' | grep -cP '^\S+\s+ ' $ x ) echo `` < details > < summary > isort : \ > # poetry run pylint src -- exit-zero uses : actions/cache @ v2 colorama = [ `` colorama ( > =0.4.3 ) '' ] health-cmd pg_isready poetry run scripts/ci-grade.sh > grade.txt pylinturl= '' [ pylint ] ( https : //pylint.pycqa.org/en/latest/user_guide/usage/output.html # source-code-analysis-section ) '' { file = `` platformdirs-2.5.2-py3-none-any.whl '' , hash = `` sha256:027d8e83a2d7de06bbac4e5ef7e023c02b863d7ea5d079477e722bb41ab25788 '' } , < /a > # # # # Using docker { file = `` mypy-0.982-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl '' , hash = `` sha256:7b35ce03a289480d6544aac85fa3674f493f323d80ea7226410ed065cd46f206 '' } , name = `` isort '' description = `` The uncompromising code formatter . '' path : grade.txt lazy-object-proxy = `` > =1.4.0 '' < svg height= '' 20 '' xmlns= '' http : //www.w3.org/2000/svg '' viewBox= '' 0 0 16 16 '' width= '' 20 '' > < path fill= '' rgb ( 149 , 157 , 165 ) '' d= '' M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z '' / > < /svg > jobs : e '/^ ( [ - ! * ] ) / ! s/^/ # / ' < < < `` $ lintres '' ) [ package.extras ] [ Using docker ] ( # using-docker ) { file = `` lazy_object_proxy-1.8.0-pp37-pypy37_pp73-any.whl '' , hash = `` sha256 : ae032743794fba4d171b5b67310d69176287b5bf82a21f588282406a79498891 '' } , postgres : { file = `` wrapt-1.14.1-cp310-cp310-macosx_10_9_x86_64.whl '' , hash = `` sha256:80bb5c256f1415f747011dc3604b59bc1f91c6e7150bd7db03b19170ee06b320 '' } , description = `` Module for decorators , wrappers and monkey patching . '' { file = `` wrapt-1.14.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl '' , hash = `` sha256:02b41b633c6261feff8ddd8d11c711df6842aba629fdd3da10249a53211a72c4 '' } , description = `` A fast and thorough lazy object proxy . '' { file = `` dill-0.3.6-py3-none-any.whl '' , hash = `` sha256 : a07ffd2351b8c678dfc4a856a3005f8067aea51d6ba6c700796a4d9e280f39f0 '' } , repository-name : Project-C-SQL/Project-C-SQL.github.io name = `` astroid '' { file = `` mypy_extensions-0.4.3.tar.gz '' , hash = `` sha256:2d82818f5bb3e369420cb3c4060a7970edba416647068eb4c5343488a6c604a8 '' } , health-timeout 5s click = [ steps : services : PGUSER : postgres runpylint ( ) { Running all linters : poetry run ' name = `` tomlkit '' < ! -- TODO : generate appropriately scoped access token so a bot can comment lint results branches : if : steps.cache-deps.outputs.cache-hit ! = 'true ' isortres= $ ( isort src -- diff -- profile black ) { file = `` mypy-0.982-cp38-cp38-macosx_10_9_universal2.whl '' , hash = `` sha256:14d53cdd4cf93765aa747a7399f0961a365bcddf7855d9cef6306fa41de01c24 '' } , { file = `` lazy_object_proxy-1.8.0-cp38-cp38-macosx_10_9_x86_64.whl '' , hash = `` sha256:0c1c7c0433154bb7c54185714c6929acc0ba04ee1b167314a779b9025517eada '' } , mypyurl= '' [ mypy ] ( https : //mypy.readthedocs.io/en/stable/error_codes.html # error-codes ) '' docs = [ `` furo ( > =2021.7.5b38 ) '' , `` proselint ( > =0.10.2 ) '' , `` sphinx ( > =4 ) '' , `` sphinx-autodoc-typehints ( > =1.12 ) '' ] { file = `` wrapt-1.14.1-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl '' , hash = `` sha256 : d77c85fedff92cf788face9bfa3ebaa364448ebb1d765302e9af11bf449ca36d '' } , { file = `` black-22.10.0-cp38-cp38-win_amd64.whl '' , hash = `` sha256:444ebfb4e441254e87bad00c661fe32df9969b2bf224373a448d8aca2132b395 '' } , { file = `` wrapt-1.14.1-cp38-cp38-musllinux_1_1_i686.whl '' , hash = `` sha256:5a0f54ce2c092aaf439813735584b9537cad479575a09892b8352fea5e988dc0 '' } , { file = `` black-22.10.0-cp311-cp311-win_amd64.whl '' , hash = `` sha256:21199526696b8f09c3997e2b4db8d0b108d801a348414264d2eb8eb2532e540d '' } , { file = `` wrapt-1.14.1-cp39-cp39-win32.whl '' , hash = `` sha256 : dee0ce50c6a2dd9056c20db781e9c1cfd33e77d2d569f5d1d9321c641bb903d5 '' } , { file = `` black-22.10.0-py3-none-any.whl '' , hash = `` sha256 : c957b2b4ea88587b46cf49d1dc17681c1e672864fd7af32fc1e9664d572b3458 '' } , { file = `` mccabe-0.7.0.tar.gz '' , hash = `` sha256:348e0240c33b60bbdf4e523192ef919f28cb2c3d7d5c7794f74009290f236325 '' } , plugins = [ `` setuptools '' ] echo `` < details > < summary > mypy : $ ( sed -nr 's/^Found ( .+ ) /\1/p ' < < < `` $ mypyres '' ) \ 'collapse_navigation ' : False , run : poetry run pytest version : 1.2.2 PGPASSWORD : postgres { file = `` wrapt-1.14.1-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl '' , hash = `` sha256:8d649d616e5c6a678b26d15ece345354f7c2286acd6db868e65fcc5ff7c24a77 '' } , runs-on : ubuntu-latest # black = `` ^22.10.0 '' { file = `` black-22.10.0-1fixedarch-cp37-cp37m-macosx_10_16_x86_64.whl '' , hash = `` sha256:197df8509263b0b8614e1df1756b1dd41be6738eed2ba9e9769f3880c2b9d7b6 '' } , steps : { file = `` wrapt-1.14.1-cp27-cp27m-manylinux2010_x86_64.whl '' , hash = `` sha256:36f582d0c6bc99d5f39cd3ac2a9062e57f3cf606ade29a0a0d6b323462f4dd87 '' } , { file = `` mypy-0.982-cp38-cp38-win_amd64.whl '' , hash = `` sha256 : cebca7fd333f90b61b3ef7f217ff75ce2e287482206ef4a8b18f32b49927b1a2 '' } , click = `` > =8.0.0 '' { file = `` lazy_object_proxy-1.8.0-cp37-cp37m-macosx_10_9_x86_64.whl '' , hash = `` sha256:6850e4aeca6d0df35bb06e05c8b934ff7c533734eb51d0ceb2d63696f1e6030c '' } , PGHOST : localhost blackurl= '' [ black ] ( https : //black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html # diffs ) '' { file = `` wrapt-1.14.1-cp310-cp310-win_amd64.whl '' , hash = `` sha256:6d323e1554b3d22cfc03cd3243b5bb815a51f5249fdcbb86fda4bf62bab9e164 '' } , { version = `` > =1.14 , < 2 '' , markers = `` python_version > = \ '' 3.11\ '' '' } , { file = `` wrapt-1.14.1-cp37-cp37m-musllinux_1_1_i686.whl '' , hash = `` sha256 : ee6acae74a2b91865910eef5e7de37dc6895ad96fa23603d1d27ea69df545015 '' } , health-retries 5 { file = `` wrapt-1.14.1-cp35-cp35m-manylinux1_x86_64.whl '' , hash = `` sha256:6b1a564e6cb69922c7fe3a678b9f9a3c54e72b469875aa8018f18b4d1dd1adf3 '' } , { file = `` lazy_object_proxy-1.8.0-cp39-cp39-win_amd64.whl '' , hash = `` sha256 : eac3a9a5ef13b332c059772fd40b4b1c3d45a3a2b05e33a361dee48e54a4dad0 '' } , { file = `` pathspec-0.10.1-py3-none-any.whl '' , hash = `` sha256:46846318467efc4556ccfd27816e004270a9eeeeb4d062ce5e6fc7a87c573f93 '' } , poetry run sphinx-apidoc -q -f -o docs/api src/pg4n ' * /test_ * ' & & \ PGPASSWORD : postgres { file = `` wrapt-1.14.1-cp36-cp36m-musllinux_1_1_i686.whl '' , hash = `` sha256:6e743de5e9c3d1b7185870f480587b75b1cb604832e380d64f9504a0535912d1 '' } , tomli = { version = `` > =1.1.0 '' , markers = `` python_full_version < \ '' 3.11.0a7\ '' '' } { file = `` wrapt-1.14.1-cp36-cp36m-musllinux_1_1_aarch64.whl '' , hash = `` sha256:9f3e6f9e05148ff90002b884fbc2a86bd303ae847e472f44ecc06c2cd2fcdb2d '' } , pipfile-deprecated-finder = [ `` pipreqs '' , `` requirementslib '' ] { file = `` lazy_object_proxy-1.8.0-pp38-pypy38_pp73-any.whl '' , hash = `` sha256:7e1561626c49cb394268edd00501b289053a652ed762c58e1081224c8d881cec '' } , run : poetry install -- no-interaction -- with ci -- no-root python-version : 3.10.7 POSTGRES_PASSWORD : postgres tomlkit = `` > =0.10.1 '' description = `` Optional static typing for Python '' lintres= $ ( pylint src -- exit-zero -sn ) python-versions = `` > =3.7.2 '' { file = `` mypy-0.982-cp39-cp39-musllinux_1_1_x86_64.whl '' , hash = `` sha256 : a692a8e7d07abe5f4b2dd32d731812a0175626a90a223d4b58f10f458747dd8a '' } , # pylint { file = `` mypy-0.982-cp37-cp37m-win_amd64.whl '' , hash = `` sha256:724d36be56444f569c20a629d1d4ee0cb0ad666078d59bb84f8f887952511ca1 '' } , python-versions = `` > =3.6 '' { file = `` wrapt-1.14.1-cp35-cp35m-manylinux2010_i686.whl '' , hash = `` sha256:00b6d4ea20a906c0ca56d84f93065b398ab74b927a7a3dbd470f6fc503f95dc3 '' } , isorturl= '' [ isort ] ( https : //pycqa.github.io/isort/ ) '' { file = `` wrapt-1.14.1-cp38-cp38-musllinux_1_1_x86_64.whl '' , hash = `` sha256:2cf71233a0ed05ccdabe209c606fe0bac7379fdcf687f39b944420d2a09fdb57 '' } , uses : ./.github/actions/install git-config-name : github-actions [ PostgreSQL for novices ] ( # postgresql-for-novices ) # run them in parallel version = `` 0.4.3 '' health-retries 5 copyright = '2022 , Heikkilä et al . ' { % endblock % } { file = `` black-22.10.0.tar.gz '' , hash = `` sha256 : f513588da599943e0cde4e32cc9879e825d58720d6557062d1098c5ad80080e1 '' } , pr_flow : { file = `` wrapt-1.14.1-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl '' , hash = `` sha256 : ef3f72c9666bba2bab70d2a8b79f2c6d2c1a42a7f7e2b0ec83bb2f9e383950af '' } , echo `` < details > < summary > pylint : `` $ lintscore '' < /summary > { file = `` wrapt-1.14.1-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl '' , hash = `` sha256:2fe803deacd09a233e4762a1adcea5db5d31e6be577a43352936179d14d90069 '' } , 'style_external_links ' : True , { file = `` black-22.10.0-1fixedarch-cp311-cp311-macosx_11_0_x86_64.whl '' , hash = `` sha256:5d8f74030e67087b219b032aa33a919fae8806d49c867846bfacde57f43972ef '' } , version : 1.2.2 { file = `` wrapt-1.14.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl '' , hash = `` sha256:9cca3c2cdadb362116235fdbd411735de4328c61425b0aa9f872fd76d02c4e86 '' } , < div class= '' footer '' style= '' float : right '' > run : poetry install -- no-interaction -- with ci ` pylint ` for linting wrapt = [ [ 📄 Documentation ] ( https : //project-c-sql.github.io/ ) html_static_path = [ '_static ' ] using : `` composite '' # isort = `` ^5.10.1 '' { file = `` wrapt-1.14.1-cp37-cp37m-macosx_10_9_x86_64.whl '' , hash = `` sha256:88bd7b6bd70a5b6803c1abf6bca012f7ed963e58c68d76ee20b9d751c74a3248 '' } , description = `` A small Python module for determining appropriate platform-specific dirs , e.g . a \ '' user data dir\ '' . '' { file = `` black-22.10.0-1fixedarch-cp38-cp38-macosx_10_16_x86_64.whl '' , hash = `` sha256:2644b5d63633702bc2c5f3754b1b475378fbbfb481f62319388235d0cd104c2d '' } , git-config-email : < > on : push { file = `` lazy_object_proxy-1.8.0-cp37-cp37m-win_amd64.whl '' , hash = `` sha256:6f593f26c470a379cf7f5bc6db6b5f1722353e7bf937b8d0d0b3fba911998858 '' } , { file = `` wrapt-1.14.1-cp310-cp310-musllinux_1_1_i686.whl '' , hash = `` sha256:11871514607b15cfeb87c547a49bca19fde402f32e2b1c24a632506c0a756656 '' } , { file = `` wrapt-1.14.1-cp27-cp27mu-manylinux1_x86_64.whl '' , hash = `` sha256 : e2f83e18fe2f4c9e7db597e988f72712c0c3676d337d8b101f6758107c42425b '' } , description = `` python code static checker '' { file = `` wrapt-1.14.1-cp35-cp35m-win32.whl '' , hash = `` sha256 : dbcda74c67263139358f4d188ae5faae95c30929281bc6866d00573783c422b7 '' } , For linting , you need the CI tools : ` poetry install -- with=ci ` . The tools used are : key : pydeps- $ { { hashFiles ( ' * * /poetry.lock ' ) } } $ ( sed -r -e '/^src\// ! d ' -e 's/^ [ ^ ] + error/- & / ' -e 's/^ [ ^- ] / # & / ' < < < `` $ mypyres '' ) { file = `` tomlkit-0.11.6.tar.gz '' , hash = `` sha256:71b952e5721688937fb02cf9d354dbcf0785066149d2855e44531ebdd2b65d73 '' } , name = `` mypy '' $ ( grep -cP '^\+ ( ? ! \+ ) ' < < < `` $ isortres '' ) < /summary > python-versions = `` > =3.6.1 , < 4.0 '' python-versions = `` > =3.7 '' # mypy [ tool.poetry.group.ci.dependencies ] } $ ( grep -cP '^\+ ( ? ! \+ ) ' < < < `` $ blackres '' ) < /summary > { file = `` wrapt-1.14.1-cp36-cp36m-win_amd64.whl '' , hash = `` sha256 : b014c23646a467558be7da3d6b9fa409b2c567d2110599b7cf9a0c5992b3b471 '' } , version = `` 1.8.0 '' touch docs/build/.nojekyll { file = `` lazy_object_proxy-1.8.0-cp310-cp310-win_amd64.whl '' , hash = `` sha256 : eb329f8d8145379bf5dbe722182410fe8863d186e51bf034d2075eb8d85ee25b '' } , run : | ports : { file = `` dill-0.3.6.tar.gz '' , hash = `` sha256 : e5db55f3687856d8fbdab002ed78544e1c4559a130302693d839dfe8f93f2373 '' } , { file = `` black-22.10.0-1fixedarch-cp310-cp310-macosx_11_0_x86_64.whl '' , hash = `` sha256:5cc42ca67989e9c3cf859e84c2bf014f6633db63d1cbdf8fdb666dcd9e77e3fa '' } , { file = `` lazy_object_proxy-1.8.0-cp39-cp39-macosx_10_9_x86_64.whl '' , hash = `` sha256:71d9ae8a82203511a6f60ca5a1b9f8ad201cac0fc75038b2dc5fa519589c9288 '' } , path : ~/.local if : github.ref == 'refs/heads/main ' version = `` 1.14.1 '' test = [ `` appdirs ( ==1.4.4 ) '' , `` pytest ( > =6 ) '' , `` pytest-cov ( > =2.7 ) '' , `` pytest-mock ( > =3.6 ) '' ] shell : bash { file = `` black-22.10.0-1fixedarch-cp39-cp39-macosx_11_0_x86_64.whl '' , hash = `` sha256 : e41a86c6c650bcecc6633ee3180d80a025db041a8e2398dcc059b3afa8382cd4 '' } , mypy-extensions = [ { file = `` lazy_object_proxy-1.8.0-cp310-cp310-macosx_10_9_x86_64.whl '' , hash = `` sha256:4fd031589121ad46e293629b39604031d354043bb5cdf83da4e93c2d7f3389fe '' } , { file = `` wrapt-1.14.1-cp310-cp310-musllinux_1_1_aarch64.whl '' , hash = `` sha256:4fcc4649dc762cddacd193e6b55bc02edca674067f5f98166d7713b193932b7f '' } , [ Documentation ] ( https : //project-c-sql.github.io/ ) platformdirs = `` > =2 '' uvloop = [ `` uvloop ( > =0.15.2 ) '' ] description = `` Composable command line interface toolkit '' token : $ { { secrets.BOT_SECRET } } key : pydeps- $ { { hashFiles ( ' * * /poetry.lock ' ) } } name = `` pylint '' mccabe = [ run : poetry install -- no-interaction -- with ci { file = `` wrapt-1.14.1-cp27-cp27m-manylinux2010_i686.whl '' , hash = `` sha256 : ddaea91abf8b0d13443f6dac52e89051a5063c7d014710dcb4d4abb2ff811a59 '' } , key : poetry-1.2.2-0 { file = `` lazy_object_proxy-1.8.0-cp37-cp37m-win32.whl '' , hash = `` sha256:5b51d6f3bfeb289dfd4e95de2ecd464cd51982fe6f00e2be1d0bf94864d58acd '' } , { file = `` wrapt-1.14.1-cp39-cp39-macosx_10_9_x86_64.whl '' , hash = `` sha256:3232822c7d98d23895ccc443bbdf57c7412c5a65996c30442ebe6ed3df335383 '' } , black = `` ^22.10.0 '' always_document_param_types = False { file = `` mypy-0.982-cp37-cp37m-macosx_10_9_x86_64.whl '' , hash = `` sha256:58f27ebafe726a8e5ccb58d896451dd9a662a511a3188ff6a8a6a919142ecc20 '' } , This README is meant for developers of the project , and not for end users . For end users , please see the documentation linked above . jupyter = [ `` ipython ( > =7.8.0 ) '' , `` tokenize-rt ( > =3.2.0 ) '' ] { file = `` wrapt-1.14.1-cp310-cp310-macosx_11_0_arm64.whl '' , hash = `` sha256:07f7a7d0f388028b2df1d916e94bbb40624c59b48ecc6cbc232546706fac74c2 '' } , $ isortres { file = `` mypy-0.982-cp39-cp39-macosx_10_9_x86_64.whl '' , hash = `` sha256:75838c649290d83a2b83a88288c1eb60fe7a05b36d46cbea9d22efc790002146 '' } , [ `` $ lintscore '' = `` '' ] & & lintscore= '' OK '' colorama = { version = `` > =0.4.5 '' , markers = `` sys_platform == \ '' win32\ '' '' } { file = `` wrapt-1.14.1-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl '' , hash = `` sha256:642c2e7a804fcf18c222e1060df25fc210b9c58db7c91416fb055897fc27e8cc '' } , { file = `` mypy-0.982-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl '' , hash = `` sha256:86ebe67adf4d021b28c3f547da6aa2cce660b57f0432617af2cca932d4d378a6 '' } , [ package.dependencies ] You 'll need to tell pytest the password : ` PGPASSWORD=postgres poetry run pytest ` . with : version = `` 0.7.0 '' # isort { file = `` isort-5.10.1-py3-none-any.whl '' , hash = `` sha256:6f62d78e2f89b4500b080fe3a81690850cd254227f27f75c3a0c491a1f351ba7 '' } , reports = [ `` lxml '' ] image : postgres:14.5-alpine $ ( grep -cP '^- ( ? ! - ) ' < < < `` $ isortres '' ) \ { file = `` black-22.10.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl '' , hash = `` sha256 : b8b49776299fece66bffaafe357d929ca9451450f5466e997a7285ab0fe28e3b '' } , uses : actions/setup-python @ v2 spelling = [ `` pyenchant ( > =3.2 , < 4.0 ) '' ] { file = `` wrapt-1.14.1-cp36-cp36m-macosx_10_9_x86_64.whl '' , hash = `` sha256:9e0fd32e0148dd5dea6af5fee42beb949098564cc23211a88d799e434255a1f4 '' } , { file = `` wrapt-1.14.1-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl '' , hash = `` sha256 : b5901a312f4d14c59918c221323068fad0540e34324925c8475263841dbdfe68 '' } , description = `` Style preserving TOML library '' virtualenvs-in-project : true folder : docs/build mypy-extensions = `` > =0.4.3 '' python-versions = `` ! =3.0. * , ! =3.1. * , ! =3.2. * , ! =3.3. * , ! =3.4 . * , > =2.7 '' { % extends `` ! footer.html '' % } services : runmypy ( ) { { file = `` wrapt-1.14.1-cp38-cp38-macosx_10_9_x86_64.whl '' , hash = `` sha256:8c0ce1e99116d5ab21355d8ebe53d9460366704ea38ae4d9f6933188f327b456 '' } , dill = `` > =0.2 '' isort = `` ^5.10.1 '' < a href= '' https : //github.com/Project-C-SQL/postgresql-for-novices '' > # poetry run mypy src -- show-error-codes -- show-error-context -- pretty & & \ mypy src -- show-error-codes -- show-error-context -- pretty & & { file = `` wrapt-1.14.1-cp38-cp38-win32.whl '' , hash = `` sha256 : aa31fdcc33fef9eb2552cbcbfee7773d5a6792c137b359e82879c101e98584c5 '' } , { file = `` wrapt-1.14.1-cp38-cp38-macosx_11_0_arm64.whl '' , hash = `` sha256 : e3fb1677c720409d5f671e39bac6c9e0e422584e5f518bfd50aa4cbbea02433f '' } , { file = `` mypy-0.982-cp38-cp38-musllinux_1_1_x86_64.whl '' , hash = `` sha256 : c6e564f035d25c99fd2b863e13049744d96bd1947e3d3d2f16f5828864506763 '' } , pylint src ' { file = `` wrapt-1.14.1-cp37-cp37m-musllinux_1_1_aarch64.whl '' , hash = `` sha256:7d2872609603cb35ca513d7404a94d6d608fc13211563571117046c9d2bcc3d7 '' } , name : Comment PR { file = `` wrapt-1.14.1-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl '' , hash = `` sha256:7b7c050ae976e286906dd3f26009e117eb000fb2cf3533398c5ad9ccc86867b1 '' } , on : To get a grade that the CI/CD pipeline would give you , you can do ` poetry run scripts/ci-grade.sh ` to run all the checks . The output is possibly long , so pipe it to a file perusal filter such as ` less ` to scroll through it and search for things of concern , e.g. , ` summary ` to see scores . # ! /usr/bin/env bash 5432:5432 platformdirs = [ { file = `` black-22.10.0-cp39-cp39-macosx_11_0_arm64.whl '' , hash = `` sha256:974308c58d057a651d182208a484ce80a26dac0caef2895836a92dd6ebd725e0 '' } , name = `` platformdirs '' done ) echo `` ℹ Tool info : $ blackurl • $ pylinturl • $ mypyurl • $ isorturl '' { file = `` wrapt-1.14.1-cp27-cp27m-macosx_10_9_x86_64.whl '' , hash = `` sha256:1b376b3f4896e7930f1f772ac4b064ac12598d1c38d04907e696cc4d794b43d3 '' } , # postgresql-for-novices myst_heading_anchors = 2 health-interval 10s { file = `` lazy_object_proxy-1.8.0-cp38-cp38-win_amd64.whl '' , hash = `` sha256 : afcaa24e48bb23b3be31e329deb3f1858f1f1df86aea3d70cb5c8578bfe5261c '' } , d = [ `` aiohttp ( > =3.7.4 ) '' ] { file = `` black-22.10.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl '' , hash = `` sha256:1e464456d24e23d11fced2bc8c47ef66d471f845c7b7a42f3bd77bf3d1789650 '' } , 1 . If ` docs/api ` is not up-to-date or does n't exist , run : < br > ` poetry run sphinx-apidoc -f -o docs/api src/pg4n ' * /test * ' ` PGPORT : 5432 # black { file = `` black-22.10.0-cp311-cp311-macosx_11_0_arm64.whl '' , hash = `` sha256:5b9b29da4f564ba8787c119f37d174f2b69cdfdf9015b7d8c5c16121ddc054ae '' } , version = `` 2.12.12 '' astroid = `` > =2.12.12 , < =2.14.0-dev0 '' { file = `` mypy_extensions-0.4.3-py2.py3-none-any.whl '' , hash = `` sha256:090fedd75945a69ae91ce1303b5824f428daf5a028d2f6ab8a299250a846f15d '' } , [ $ n ! = 0 ] & & echo $ n $ x { file = `` wrapt-1.14.1-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl '' , hash = `` sha256:257fd78c513e0fb5cdbe058c27a0624c9884e735bbd131935fd49e9fe719d310 '' } , $ blackres tomlkit = [ { file = `` wrapt-1.14.1-cp35-cp35m-win_amd64.whl '' , hash = `` sha256 : b21bb4c09ffabfa0e85e3a6b623e19b80e7acd709b9f91452b8297ace2a8ab00 '' } , git-config-name : github-actions steps : jobs : { file = `` wrapt-1.14.1-cp38-cp38-musllinux_1_1_aarch64.whl '' , hash = `` sha256:01c205616a89d09827986bc4e859bcabd64f5a0662a7fe95e0d359424e0e071b '' } , { file = `` wrapt-1.14.1-cp36-cp36m-musllinux_1_1_x86_64.whl '' , hash = `` sha256 : d79d7d5dc8a32b7093e81e97dad755127ff77bcc899e845f41bf71747af0c569 '' } , < img src= '' { { pathto ( '_static/github-mark.svg ' , 1 ) } } '' loading= '' lazy '' decoding= '' async '' alt= '' GitHub mark '' width= '' 20 '' height= '' 20 '' > on : pull_request { file = `` wrapt-1.14.1-cp35-cp35m-manylinux2010_x86_64.whl '' , hash = `` sha256 : a85d2b46be66a71bedde836d9e41859879cc54a2a04fad1191eb50c2066f6e9d '' } , version = `` 8.1.3 '' { % block extrafooter % } name : `` Install Project '' description = `` Experimental type system extensions for programs checked with the mypy typechecker . '' mypyres= $ ( mypy -- non-interactive -- install-types -- ignore-missing-imports -- strict -- show-error-codes -- show-error-context src 2 > & 1 ) mypy = `` ^0.982 '' # TODO : generate appropriately scoped access token so a bot can comment lint results [ Building documents ] ( # building-documents ) name = `` mypy-extensions '' ports : path : .venv pylint = `` ^2.15.4 '' { file = `` lazy_object_proxy-1.8.0-cp311-cp311-macosx_10_9_x86_64.whl '' , hash = `` sha256:4e2d9f764f1befd8bdc97673261b8bb888764dfdbd7a4d8f55e4fbcabb8c3fb7 '' } , uses : actions/cache @ v2 push : version = `` 0.10.1 '' dill = [ { file = `` wrapt-1.14.1-cp27-cp27mu-manylinux2010_i686.whl '' , hash = `` sha256 : ee2b1b1769f6707a8a445162ea16dddf74285c3964f605877a20e38545c3c462 '' } , copyright = '2022 , Heikkilä et al ' { file = `` wrapt-1.14.1-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl '' , hash = `` sha256:40e7bc81c9e2b2734ea4bc1aceb8a8f0ceaac7c5299bc5d69e37c44d9081d43b '' } , # poetry run black src -- check & & \ { file = `` wrapt-1.14.1-cp37-cp37m-win_amd64.whl '' , hash = `` sha256:709fe01086a55cf79d20f741f39325018f4df051ef39fe921b1ebe780a66184c '' } , PGUSER : postgres { file = `` click-8.1.3.tar.gz '' , hash = `` sha256:7682dc8afb30297001674575ea00d1814d808d6a36af415a82bd481d37ba7b8e '' } , { file = `` lazy_object_proxy-1.8.0-cp311-cp311-win32.whl '' , hash = `` sha256 : e20bfa6db17a39c706d24f82df8352488d2943a3b7ce7d4c22579cb89ca8896e '' } , # `` -0 '' allows invalidating the cache for upgrading Poetry { file = `` black-22.10.0-cp39-cp39-win_amd64.whl '' , hash = `` sha256:432247333090c8c5366e69627ccb363bc58514ae3e63f7fc75c54b1ea80fa7de '' } , virtualenvs-in-project : true always_document_param_types = False description = `` Utility library for gitignore style pattern matching of file paths . '' version = `` 2.15.5 '' key : poetry-1.2.2-0 1 . If ` docs/api ` is not up-to-date or does n't exist , run : < br > ` poetry run sphinx-apidoc -f -o docs/api src/pg4n ' * /test_ * ' ` [ Running tests ] ( # running-tests ) platformdirs = `` > =2.2.0 '' { file = `` wrapt-1.14.1-cp27-cp27mu-manylinux2010_x86_64.whl '' , hash = `` sha256:833b58d5d0b7e5b9832869f039203389ac7cbf01765639c7309fd50ef619e0b1 '' } , # poetry run isort `` src '' / * * / * .py -m 3 -- trailing-comma -c & & \ e '/\.py : [ :0-9 ] +\s+W/s/^/ ! / ' \ run : | * [ Psql wrapper interface ] ( psql-wrapper ) { file = `` platformdirs-2.5.2.tar.gz '' , hash = `` sha256:58c8abb07dcb441e6ee4b11d8df0ac856038f944ab98b7be6b27b2a3c7feef19 '' } , $ ( sed -E -e '/\.py : [ :0-9 ] +\s+ [ CEF ] /s/^/- / ' \ # `` -0 '' allows invalidating the cache for upgrading Poetry poetry run sphinx-apidoc -q -f -o docs/api src/pg4n ' * /test * ' & & \ version = `` 0.982 '' { file = `` mypy-0.982-cp310-cp310-musllinux_1_1_x86_64.whl '' , hash = `` sha256:175f292f649a3af7082fe36620369ffc4661a71005aa9f8297ea473df5772046 '' } , # pathspec = `` > =0.9.0 '' black = [ < /div > POSTGRES_PASSWORD : postgres { file = `` wrapt-1.14.1-cp39-cp39-musllinux_1_1_aarch64.whl '' , hash = `` sha256 : b9b7a708dd92306328117d8c4b62e2194d00c365f18eff11a9b53c6f923b01e3 '' } , { file = `` mypy-0.982-cp310-cp310-macosx_10_9_universal2.whl '' , hash = `` sha256:5085e6f442003fa915aeb0a46d4da58128da69325d8213b4b35cc7054090aed5 '' } , folder : docs/build { file = `` lazy-object-proxy-1.8.0.tar.gz '' , hash = `` sha256 : c219a00245af0f6fa4e95901ed28044544f50152840c5b6a3e7b2568db34d156 '' } , GITHUB_TOKEN : $ { { secrets.BOT_SECRET } } PGPORT : 5432 main { file = `` astroid-2.12.12-py3-none-any.whl '' , hash = `` sha256:72702205200b2a638358369d90c222d74ebc376787af8fb2f7f2a86f7b5cc85f '' } , uses : snok/install-poetry @ v1 runs : version = `` 5.10.1 '' options : > { file = `` mccabe-0.7.0-py2.py3-none-any.whl '' , hash = `` sha256:6c2d30ab6be0e4a46919781807b4f0d834ebdd6c6e3dca0bda5a15f863427b6e '' } , { file = `` click-8.1.3-py3-none-any.whl '' , hash = `` sha256 : bb4d8133cb15a609f44e8213d9b391b0809795062913b383c62be0ee95b1db48 '' } , version = `` 0.11.6 '' { file = `` black-22.10.0-cp37-cp37m-win_amd64.whl '' , hash = `` sha256:9311e99228ae10023300ecac05be5a296f60d2fd10fff31cf5c1fa4ca4b1988d '' } , with : if : steps.cache-deps.outputs.cache-hit ! = 'true ' ` mypy ` for static type checking { file = `` wrapt-1.14.1-cp39-cp39-win_amd64.whl '' , hash = `` sha256 : dee60e1de1898bde3b238f18340eec6148986da0455d8ba7848d50470a7a32fb '' } , path : ~/.local { file = `` black-22.10.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl '' , hash = `` sha256:72ef3925f30e12a184889aac03d77d031056860ccae8a1e519f6cbb742736383 '' } , { file = `` wrapt-1.14.1-cp36-cp36m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl '' , hash = `` sha256:5b02d65b9ccf0ef6c34cba6cf5bf2aab1bb2f49c6090bafeecc9cd81ad4ea1c1 '' } , # [ tool.poetry.group.ci.dependencies ] mccabe = `` > =0.6 , < 0.8 '' { file = `` mypy-0.982-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl '' , hash = `` sha256 : d6af646bd46f10d53834a8e8983e130e47d8ab2d4b7a97363e35b24e1d588947 '' } , git-config-email : < > mypy = [ description = `` A Python utility / library to sort Python imports . '' python2 = [ `` typed-ast ( > =1.4.0 , < 2 ) '' ] description = `` McCabe checker , plugin for flake8 '' { version = `` > =1.11 , < 2 '' , markers = `` python_version < \ '' 3.11\ '' '' } , { file = `` mypy-0.982-cp39-cp39-win_amd64.whl '' , hash = `` sha256 : eb7a068e503be3543c4bd329c994103874fa543c1727ba5288393c21d912d795 '' } , { file = `` lazy_object_proxy-1.8.0-pp39-pypy39_pp73-any.whl '' , hash = `` sha256 : ce58b2b3734c73e68f0e30e4e725264d4d6be95818ec0a0be4bb6bf9a7e79aa8 '' } , { file = `` black-22.10.0-cp38-cp38-macosx_11_0_arm64.whl '' , hash = `` sha256 : fba8a281e570adafb79f7755ac8721b6cf1bbf691186a287e990c7929c7692ff '' } , { file = `` mypy-0.982-cp37-cp37m-musllinux_1_1_x86_64.whl '' , hash = `` sha256 : e7aeaa763c7ab86d5b66ff27f68493d672e44c8099af636d433a7f3fa5596d40 '' } , isort = [ { file = `` mypy-0.982-cp39-cp39-macosx_10_9_universal2.whl '' , hash = `` sha256 : a705a93670c8b74769496280d2fe6cd59961506c64f329bb179970ff1d24f9f8 '' } , [ Poetry ] ( # poetry ) { file = `` wrapt-1.14.1-cp38-cp38-win_amd64.whl '' , hash = `` sha256 : d1967f46ea8f2db647c786e78d8cc7e4313dbd1b0aca360592d8027b8508e24d '' } , poetry run sphinx-build -q -b html docs docs/build & & \ colors = [ `` colorama ( > =0.4.3 , < 0.5.0 ) '' ] runblack ( ) { ` isort ` for sorting imports { file = `` wrapt-1.14.1-cp37-cp37m-win32.whl '' , hash = `` sha256:60db23fa423575eeb65ea430cee741acb7c26a1365d103f7b0f6ec412b893853 '' } , version = `` 0.3.6 '' name = `` mccabe '' { file = `` pylint-2.15.5-py3-none-any.whl '' , hash = `` sha256 : c2108037eb074334d9e874dc3c783752cc03d0796c88c9a9af282d0f161a1004 '' } , lazy-object-proxy = [ env : # - run : | astroid = [ ` black ` for formatting { file = `` wrapt-1.14.1.tar.gz '' , hash = `` sha256:380a85cf89e0e69b7cfbe2ea9f765f004ff419f34194018a6827ac0e3edfed4d '' } , { file = `` wrapt-1.14.1-cp27-cp27m-manylinux1_x86_64.whl '' , hash = `` sha256:5a9a0d155deafd9448baff28c08e150d9b24ff010e899311ddd63c45c2445e28 '' } , run : poetry run pytest name = `` black '' echo `` < details > < summary > black : \ { file = `` mypy-0.982-cp38-cp38-macosx_10_9_x86_64.whl '' , hash = `` sha256:26ae64555d480ad4b32a267d10cab7aec92ff44de35a7cd95b2b7cb8e64ebe3e '' } , name = `` click '' poetry run sphinx-build -q -b html docs docs/build & & \ # PostgreSQL for novices { file = `` astroid-2.12.12.tar.gz '' , hash = `` sha256:1c00a14f5a3ed0339d38d2e2e5b74ea2591df5861c0936bb292b84ccf3a78d83 '' } , push_flow : { file = `` mypy-0.982-cp310-cp310-macosx_10_9_x86_64.whl '' , hash = `` sha256:41fd1cf9bc0e1c19b9af13a6580ccb66c381a5ee2cf63ee5ebab747a4badeba3 '' } , ] $ ( grep -cP '^- ( ? ! - ) ' < < < `` $ blackres '' ) \ health-interval 10s { file = `` mypy-0.982-cp310-cp310-win_amd64.whl '' , hash = `` sha256:8ee8c2472e96beb1045e9081de8e92f295b89ac10c4109afdf3a23ad6e644f3e '' } , shell : bash health-cmd pg_isready blackres= $ ( black src -- diff -q ) { file = `` wrapt-1.14.1-cp39-cp39-musllinux_1_1_i686.whl '' , hash = `` sha256:6a9a25751acb379b466ff6be78a315e2b439d4c94c1e99cb7266d40a537995d3 '' } , { file = `` pylint-2.15.5.tar.gz '' , hash = `` sha256:3b120505e5af1d06a5ad76b55d8660d44bf0f2fc3c59c2bdd94e39188ee3a4df '' } , env : content-hash = `` be246bc88534ece065517f51ef31ec3cb98c4e31132da335493f7355474152d8 '' virtualenvs-create : true < /summary > [ [ package ] ] id : cache-deps with : # print format infos { file = `` wrapt-1.14.1-cp35-cp35m-manylinux1_i686.whl '' , hash = `` sha256:43ca3bbbe97af00f49efb06e352eae40434ca9d915906f77def219b88e85d907 '' } , { file = `` wrapt-1.14.1-cp39-cp39-macosx_11_0_arm64.whl '' , hash = `` sha256:988635d122aaf2bdcef9e795435662bcd65b02f4f4c1ae37fbee7401c440b3a7 '' } , python-versions = `` * '' isort `` src '' / * * / * .py -m 3 -- trailing-comma -c & & \ ` \ ` \ ` options : > repository-name : Project-C-SQL/Project-C-SQL.github.io lintscore= $ ( for x in I R C W E F ; do name = `` wrapt '' { file = `` mypy-0.982-cp38-cp38-macosx_11_0_arm64.whl '' , hash = `` sha256:6389af3e204975d6658de4fb8ac16f58c14e1bacc6142fee86d1b5b26aa52bda '' } , { file = `` wrapt-1.14.1-cp37-cp37m-musllinux_1_1_x86_64.whl '' , hash = `` sha256:2b39d38039a1fdad98c87279b48bc5dce2c0ca0d73483b12cb72aa9609278e8a '' } , black src -- check & & runisort ( ) { description = `` serialize all of python '' For linting , you need the CI tools : ` poetry install -with ci ` . { file = `` isort-5.10.1.tar.gz '' , hash = `` sha256 : e8443a5e7a020e9d7f97f1d7d9cd17c88bcb3bc7e218bf9cf5095fe550be2951 '' } , [ Linting ] ( # linting ) 'navigation_depth ' : 3 , { file = `` pathspec-0.10.1.tar.gz '' , hash = `` sha256:7ace6161b621d31e7902eb6b5ae148d12cfd23f4a249b9ffb6b9fee12084323d '' } , pylint = [ { file = `` wrapt-1.14.1-cp39-cp39-musllinux_1_1_x86_64.whl '' , hash = `` sha256:34aa51c45f28ba7f12accd624225e2b1e5a3a45206aa191f6f9aac931d9d56fe '' } , tomli = { version = `` > =1.1.0 '' , markers = `` python_version < \ '' 3.11\ '' '' } name = `` dill '' { file = `` black-22.10.0-cp310-cp310-win_amd64.whl '' , hash = `` sha256:819dc789f4498ecc91438a7de64427c73b45035e2e3680c92e18795a839ebb66 '' } , { file = `` lazy_object_proxy-1.8.0-cp311-cp311-win_amd64.whl '' , hash = `` sha256:14010b49a2f56ec4943b6cf925f597b534ee2fe1f0738c84b3bce0c1a11ff10d '' } , description = `` An abstract syntax tree for Python with inference support . '' runs-on : ubuntu-latest health-timeout 5s python-version : 3.10.7 uses : actions/checkout @ v2 { file = `` wrapt-1.14.1-cp27-cp27mu-manylinux1_i686.whl '' , hash = `` sha256:7ef58fb89674095bfc57c4069e95d7a31cfdc0939e2a579882ac7d55aadfd2a1 '' } , run : | name = `` pathspec '' run : poetry install -- no-interaction -- with ci -- no-root postgres : { file = `` wrapt-1.14.1-cp36-cp36m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl '' , hash = `` sha256:21ac0156c4b089b330b7666db40feee30a5d52634cc4560e1905d6529a3897ff '' } , html_theme_options = { requirements-deprecated-finder = [ `` pip-api '' , `` pipreqs '' ] { file = `` black-22.10.0-cp310-cp310-macosx_11_0_arm64.whl '' , hash = `` sha256:2039230db3c6c639bd84efe3292ec7b06e9214a2992cd9beb293d639c6402edb '' } , { file = `` wrapt-1.14.1-cp310-cp310-musllinux_1_1_x86_64.whl '' , hash = `` sha256:8ad85f7f4e20964db4daadcab70b47ab05c7c1cf2a7c1e51087bfaa83831854c '' } , 5432:5432 { file = `` lazy_object_proxy-1.8.0-cp39-cp39-win32.whl '' , hash = `` sha256:8f6ce2118a90efa7f62dd38c7dbfffd42f468b180287b748626293bf12ed468f '' } , # ` virtualenvs-in-project : true ` creates a ` .venv ` in test dir for easy caching optional = false { file = `` mypy-0.982-cp310-cp310-macosx_11_0_arm64.whl '' , hash = `` sha256 : f793e3dd95e166b66d50e7b63e69e58e88643d80a3dcc3bcd81368e0478b089c '' } , token : $ { { secrets.BOT_SECRET } } testutils = [ `` gitpython ( > 3 ) '' ] { file = `` mypy-0.982-cp39-cp39-macosx_11_0_arm64.whl '' , hash = `` sha256:91781eff1f3f2607519c8b0e8518aad8498af1419e8442d5d0afb108059881fc '' } , [ Imports ] ( # imports ) version = `` 2.5.2 '' { file = `` black-22.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl '' , hash = `` sha256:915ace4ff03fdfff953962fa672d44be269deb2eaf88499a0f8805221bc68c87 '' } , isort = `` > =4.2.5 , < 6 '' { { super } } { file = `` wrapt-1.14.1-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl '' , hash = `` sha256 : d52a25136894c63de15a35bc0bdc5adb4b0e173b9c0d07a2be9d3ca64a332735 '' } , { file = `` wrapt-1.14.1-cp27-cp27m-manylinux1_i686.whl '' , hash = `` sha256:903500616422a40a98a5a3c4ff4ed9d0066f3b4c951fa286018ecdf0750194ef '' } , { file = `` lazy_object_proxy-1.8.0-cp38-cp38-win32.whl '' , hash = `` sha256 : d176f392dbbdaacccf15919c77f526edf11a34aece58b55ab58539807b85436f '' } , uses : JamesIves/github-pages-deploy-action @ v4 PGHOST : localhost \ ` \ ` \ ` diff < /details > '' id : cache-deps","['.github/actions/install/action.yml', '.github/workflows/ci-flow.yml', '.github/workflows/pr_flow.yml', '.github/workflows/pytest.yml', '.github/workflows/sphinx.yml', 'README.md', 'docs/_static/github-mark.svg', 'docs/_templates/footer.html', 'docs/conf.py', 'docs/program-architecture.md', 'poetry.lock', 'pyproject.toml', 'scripts/ci-grade.sh']",2022-10-26 10:02:30+00:00,2022-11-06 12:04:39+00:00,2022-11-06 14:04:38+02:00
49,cd7168bd9791c3c51875f85850371cec52a72e57,1.2870067621406632e-05,1,"Wrapper has 2 significant bugs left : - parse multiline queries properly ( ` db= > SELECT db- > db- > * FROM orders ; ` ) - separate queries properly ( ` db= > SELECT * FROM orders ; db= > INSERT INTO queries VALUES ( 6,6,6 ) ; ` should not parse as ` SELECT * FROM orders ; db= > INSERT INTO queries VALUES ( 6,6,6 ) ; ` ) due to lazily sticking to SELECT as the delimiter .","Multiline queries , detect separate queries",Merge pull request # 80 from Project-C-SQL/fix/wrapper,"psql.ofilter ( b'\x08\x08 ' ) b '' order_id | order_total_eur | customer_id \r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\r\n ( 0 rows ) \r\n\r\n\r\nTest\r\n\r\n\x1b [ ? 2004htest_db= # `` case_query_with_newline = \ # extra whitespace : identbodychars , nums b ' order_id | order_total_eur | customer_id \r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\r\n ( 0 rows ) \r\n\r\n ' + b'\r\n ' + b'Test ' + b'\r\n\r\n ' + b'\x1b [ ? 2004hpgdb= # ' # ctrl-R to previous query . Query includes a return press near end . `` psql ( 14.5 ) \nType \ '' help\ '' for help.\n\npgdb= # SELECT * FROM\npgdb- # orders ; '' if self.debug : from shutil import get_terminal_size ( CaselessLiteral ( `` > - '' ) | CaselessLiteral ( `` # - '' ) ) + \ assert p.parse_last_found_stmt ( case_multiline_query ) == \ psql.ofilter ( b'\r\n\x1b [ ? 2004l\r ' ) no_newlines_res = reversed_flattened_res.replace ( '\n ' , `` ) psql.ofilter ( b'SELECT ' ) from functools import reduce self.tok_rev_prompt_end + \ # extra 2 whitespaces : is_select : bool = False ZeroOrMore ( Char ( `` \n '' ) | Char ( `` \r '' ) | White ( ) ) + \ assert psql.ofilter ( case_query_2_prompt ) == \ # reverse given string , match reversed tokens , pick first match , # complicated case : user has ctrl-R 'd , copy-pasted command or something , version_ok : bool = version in self.supported_psql_versions # saved stream of characters . Most likely the control streams depend # If parsing was successful , pick interesting parts . db_name = stmt_res_list [ length - 1 ] [ : :-1 ] # in live scenarios most of the time , but I can not reproduce it with this Literal ( `` ERROR : '' ) results = [ stmt_res_list [ length - 3 ] , match_prompt : ParserElement = \ c = pexpect.spawn ( `` psql `` + bytes.decode ( self.psql_args ) , match_error : ParserElement = \ identbodychars b'\x1b [ ? 2004l\r order_id | order_total_eur | customer_id \r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\r\n ( 0 rows ) \r\n\r\n\r\nTest\r\n\r\n\x1b [ ? 2004htest_db= # ' psql.ofilter ( b'FROM ' ) # Literal ( `` ERROR : '' ) # b ' order_id | order_total_eur | customer_id \r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\r\n ( 0 rows ) \r\n\r\n\r\nTest\r\n\r\n\x1b [ ? 2004hpgdb= # ' # replacing \n 's with `` '' maybe has less edge cases . psql.ofilter ( b'\x1b [ ? 2004htest_db- # ' ) tok_stmt_end : param psql : psql -- version output tok_rev_prompt_end : ParserElement = \ psql.ofilter ( b'\r\x1b [ K\x1b > \x1b [ r\x1b [ ? 1049l ' ) b ' 207.60 | 9\x1b [ m\r\n 21 | 471.12 | 179\x1b [ m\r\n : \x1b [ K ' ) # reverse back , concatenate , and remove \n 's assert psql.ofilter ( case_query_2_prompt ) == \ stmt_res = match_version_stmt.parse_string ( psql ) if len ( res_list ) == 4 : # includes \x1b [ ? 2004l `` SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur = 100 ; '' return reversed_flattened_res stmt_res = match_last_stmt.parse_string ( psql_rev ) case_multiple_queries_and_whitespaces = \ psql.ofilter ( b '' \r\n\x1b [ ? 2004l\r '' ) match_sql_stmt_end : ParserElement = \ psql.ofilter ( b ' * ' ) self.tok_rev_prompt_end case_select_then_insert = `` psql ( 14.5 ) \nType \ '' help\ '' for help.\n\npgdb= # SELECT * FROM orders ; \npgdb= # INSERT INTO orders VALUES ( 6 , 6 , 6 ) ; '' psql.ofilter ( b'\x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C ' ) ( StringEnd ( ) | ( Literal ( `` ? [ \x1b '' ) def __init__ ( self , db_name_parameter : bytes , ZeroOrMore ( White ( ) ) + tok_stmt_end + ... + \ Word ( prompt_chars ) + Char ( '\n ' ) try : assert psql.ofilter ( b'\x1b [ ? 2004htest_db= # ' ) == \ # magic strings related to solely to ctrl-R use are ( CaselessLiteral ( `` - > '' ) | CaselessLiteral ( `` - # '' ) ) # print ( psql.pyte_screen.display ) elif len ( res_list ) == 2 : # stops right after database name CaselessLiteral ( `` TCELES '' ) + ( CaselessLiteral ( `` > = '' ) | CaselessLiteral ( `` # = '' ) ) # case_query_3_prompt = b ' order_id | order_total_eur | customer_id \r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\r\n ( 0 rows ) \r\n\r\n\x1b [ ? 2004hpgdb= # ' match_select_stmt : ParserElement = \ Literal ( `` psql ( PostgreSQL ) `` ) + Combine ( Word ( nums ) + ' . ' + Word ( nums ) ) psql.ofilter ( b '' \x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C0 ' : SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur \x1b [ 7m= 10\x1b [ 27m0 ; \x08\x08\x08\x08\x08\x08 '' ) ZeroOrMore ( Char ( `` \n '' ) | Char ( `` \r '' ) ) + self.match_whole_rev_sql_stmt # BUG : Will match until previous SELECT query , if newest is e.g INSERT tok_prompt_linebreak : ParserElement = \ return demultilined_res result = stmt_res.as_list ( ) [ 1 ] # Something weird going this test case . Pyte understands this case right # psql.ofilter ( b'\x08\x08\x08\x08 ' ) # multiline query psql.ofilter ( b '' \x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C0 ' : SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur \x1b [ 7m= 100\x1b [ 27m ; \x08\x08\x08\x08\x08\x08 '' ) case_query_2_prompt = b '' order_id | order_total_eur | customer_id \r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\r\n ( 0 rows ) \r\n\r\n\x1b [ ? 2004htest_db= # `` # then reverse the matched string . match_prompt + match_sql_stmt + match_sql_stmt_end version : str = self.parser.parse_psql_version ( version_info_str ) match_sql_stmt : ParserElement = \ b'\r\nTest\r\n\r\n\x1b [ ? 2004htest_db= # ' self.db_name : bytes = db_name_parameter # psql.ofilter ( case_query_3 ) MatchFirst ( [ tok_prompt ] ) # `` '' str ( self.supported_psql_versions ) + `` . '' Literal ( `` > = '' ) | Literal ( `` # = '' ) psql.ofilter ( b'\r\n ' ) # TODO : For some reason Literal ( `` > = '' ) does not provide a match , # ready for analysis . def parse_psql_version ( self , psql : str ) - > str : # parser tokens : psql = new_psqlwrapper ( ) assert p.parse_last_found_stmt ( case_select_then_insert ) == \ CaselessLiteral , Char , Combine , Literal , ParseException , \ psql.ofilter ( b ' ; ' ) case_query_2_prompt = \ `` SELECT * FROM orders ; '' from pyparsing import \ if version_ok : f = open ( `` psqlparser.log '' , `` a '' ) stmt_res : ParseResults = None # al_eur = 100 ; '' else : # ctrl-R to previous query with three key presses searching ( 1 .. 0 .. 0 ) . Press return . # in live scenarios most of the time , but I can not reproduce it with this match_rev_sql_stmt_start : ParserElement = \ case_empirical_1 = \ b'\r\x1b [ 16Ppgdb= # SELECT * FROM orders WHERE order_total_eur = 0 AND order_tot\x08\r\n\x1b [ ? 2004l\r ' ( StringEnd ( ) | ( Literal ( `` ? [ \x1b '' ) + \ `` SELECT * FROM orders WHERE order_total_eur = 100 ; '' version_info = \ # TODO : allow multiple statements def __init__ ( self , psql_args : bytes , # Parse prompt text at the end , so multiline queries can be cleaned version_msg = self.check_psql_version ( ) psql.ofilter ( b '' \x08\x08\x08= ' : SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur \x1b [ 7m=\x1b [ 27m 100 ; \x08\x08\x08\x08\x08\x08 '' ) Word ( stmt_chars ) psql.ofilter ( b'\x08order_total_eur = 0 AND order_total_eur = 10\x1b [ C\x1b [ 1P ; \x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C ' ) psql.ofilter ( b '' '\r ( reverse-i-search ) ` ' : `` ) parse_sql_stmt : ParserElement = \ psql.ofilter ( b'\r\x1b [ C ' ) # TODO/BUG : removing \n 's is a tough problem , see : # BUG ( ? ) : Assumes only single statement query if is_select : # TODO : strip `` - > '' / '' - # '' from string to allow multiline queries # Fix it by matching rev_stmt_start also against rev_prompt `` `` '' Parse for psql version and return version number . CaselessLiteral ( `` SELECT `` ) # All interesting stmts are 'select ' ( CaselessLiteral ( `` = > '' ) | CaselessLiteral ( `` = # '' ) ) result : str = `` '' # Something weird going these test case . Pyte understands this case right assert psql.ofilter ( b'\x1b [ ? 2004l\r order_id | order_total_eur | customer_id \r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\r\n ( 0 rows ) \r\n\r\n\x1b [ ? 2004htest_db= # ' ) == \ match_rev_any_sql_stmt : ParserElement = \ def check_psql_version ( self ) - > str : # Arrow-up to previous query , alt-B until 'orders WHERE ' and remove the from pyparsing import CaselessLiteral , Char , Literal , MatchFirst , \ psql.ofilter ( b '' \x08\x08\x08t ' : SELECT * FROM orders WHERE order_total_eur = 0 AND order_to\x1b [ 7mt\x1b [ 27mal_eur = 100 ; \x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08 '' ) supported_psql_versions : list [ str ] = [ `` 14.5 '' ] match_whole_rev_sql_stmt : ParserElement = \ stmt_res_list [ length - 4 ] ] # TODO ( ? ) : We may have to match for errors return `` '' # should parse as \n - > `` `` to avoid `` SELECT * FROM .. '' . # case_query_3 = \ tok_rev_prompt_linebreak : ParserElement = \ self.psql_args : bytes = psql_args psql.ofilter ( b '' \x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C1 ' : SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur \x1b [ 7m= 1\x1b [ 27m00 ; \x08\x08\x08\x08\x08\x08 '' ) # match_error : ParserElement = \ psql.ofilter ( b'\x08order_total_eur = 0 AND order_total_eur = 1\x1b [ 1P00 ; \x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C ' ) # psql.ofilter ( b'\x08\x1b [ 1P ' ) assert p.parse_last_found_stmt ( case_multiple_queries_and_whitespaces ) == \ f.close ( ) : returns : version string ( e.g `` 14.5 '' ) return `` Pg4n has only been tested on psql versions `` + \ ( Literal ( `` > = '' ) | Literal ( `` # = '' ) ) + \ # properly . # assert p.parse_last_found_stmt ( case_select_then_insert ) == \ # psql.ofilter ( return_press_1 ) psql.ofilter ( b'\r\n\r\r\n ' ) psql.ofilter ( b'\x08\x08\x08\x08\x08\x08 ' ) if version_msg ! = `` '' : self.match_rev_any_sql_stmt + Word ( self.prompt_chars ) tok_stmt_end + ... + match_rev_sql_stmt_start # case_select_then_insert = `` psql ( 14.5 ) \nType \ '' help\ '' for help.\n\npgdb= # SELECT * FROM orders ; \npgdb= # INSERT INTO orders VALUES ( 6 , 6 , 6 ) ; '' psql.ofilter ( b'\r ( reverse-i-search ) ` \ ' : ' ) pexpect.spawn ( `` psql `` + bytes.decode ( self.psql_args ) psql.ofilter ( b'SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur = 100 ; ' ) psql.ofilter ( b'orders ' ) b ' order_id | order_total_eur | customer_id \r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\r\n ( 0 rows ) \r\n\r\n\x1b [ ? 2004hpgdb= # ' match_sql_stmt_start : ParserElement = \ # complicated case : user has ctrl-R 'd , copypasted command or something . # reverse string for parsing efficiency # psql.ofilter ( b'\x08\x08\x08\x08\x08\x08 ' ) c = pexpect.spawn ( `` psql `` + bytes.decode ( self.db_name ) , # If it is SELECT , remove multiline delimiters and then statement is match_version_stmt : ParserElement = \ assert p.parse_last_found_stmt ( case_query_with_newline ) == \ match_last_stmt : ParserElement = \ if len ( res_list ) == 4 : # results include \x1b [ ? 2004l return result psql.ofilter ( b'\x1b [ ? 2004l\r\x1b [ ? 1049h\x1b=\r order_id | order_total_eur | customer_id \x1b [ m\r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\x1b [ m\r\n 1 | 535.36 | 111\x1b [ m\r\n 2 | 409.80 | 217\x1b [ m\r\n 3 | 189.43 | 19\x1b [ m\r\n 4 | 144.14 | 157\x1b [ m\r\n 5 | 582.52 | 172\x1b [ m\r\n 6 | 132.85 | 206\x1b [ m\r\n 7 | 183.92 | 236\x1b [ m\r\n 8 | 424.80 | 244\x1b [ m\r\n 9 | 519.43 | 175\x1b [ m\r\n 10 | 414.55 | 234\x1b [ m\r\n 11 | 88.19 | 50\x1b [ m\r\n 12 | 591.72 | 143\x1b [ m\r\n 13 | 503.52 | 216\x1b [ m\r\n 14 | 586.06 | 181\x1b [ m\r\n 15 | 47.79 | 248\x1b [ m\r\n 16 | 330.92 | 130\x1b [ m\r\n 17 | 302.31 | 225\x1b [ m\r\n 18 | 438.38 | 26\x1b [ m\r\n 19 | 107.53 | 94\x1b [ m\r\n 20 | ' Char ( '\n ' ) + Word ( prompt_chars ) + \ # Is the statement a SELECT statement ? `` SELECT * FROM orders WHERE order_total_eur = 100 ; '' psql.ofilter ( b'\x08\x08\x08\x08 ' ) print ( version_msg ) db_name : str = `` '' version_info_str : str = bytes.decode ( version_info.before ) # magic strings related seemingly solely to ctrl-R use are version_info.expect ( pexpect.EOF ) assert p.parse_last_found_stmt ( case_empirical_1 ) == \ `` -- version '' ) # but works fine without the whitespace .. stmt_res = match_rev_last_stmt.parse_string ( psql_rev ) if stmt_res : # on terminal size , and can not be just copy-pasted from live tests . stmt_res_list [ length - 3 ] , # saved stream of characters . `` `` is_select = \ .replace ( db_name + `` - > '' , `` '' ) \ # Match statement that might have \r\n or whitespace at the end . tok_rev_prompt : ParserElement = \ ParseResults , ParserElement , StringEnd , White , Word , ZeroOrMore , \ # psql.ofilter ( b'\x08\x08 ' ) `` psql ( 14.5 ) \nType \ '' help\ '' for help.\n\npgdb= # SELECT * FROM orders ; \npgdb= # INSERT INTO orders VALUES ( 6 , 6 , 6 ) ; \npgdb= # SELECT * FROM\n orders WHERE order_total_eur = 100 ; `` # * FROM orders WHERE order_total_eur = 100 ; tok_prompt : ParserElement = \ # Broken case found in empirical testing match_rev_last_stmt : ParserElement = \ tok_rev_prompt_end psql.ofilter ( b '' \x1b [ A\rtest_db= # SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur = 100 ; \x1b [ K\x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\r\n\r '' ) # `` pgdb= > SELECT * FROM orders WHERE order_tot psql.ofilter ( b'\x1b [ ? 2004l\r\x1b [ ? 2004htest_db- # ' ) ParseException , ParseResults , ParserElement , StringEnd , Word , ZeroOrMore , \ f.write ( str ( e.explain ( ) ) + `` \n '' ) psql.ofilter ( case_query_2 ) except ParseException as e : # `` pgdb= > SELECT Literal ( `` > = '' ) | Literal ( `` # = '' ) demultilined_res = no_newlines_res\ # TODO : test case for multiline - > queries ZeroOrMore ( White ( ) ) + CaselessLiteral ( `` SELECT '' ) case_multiline_query = \ `` sql ( 14.5 ) \nType \ '' help\ '' for help.\n\npgdb= # SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur = 100 ; \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n '' # fresh prompt in this case : # fresh prompt : .replace ( db_name + `` - # '' , `` '' ) # b'SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur = 100 ; ' # parser combinations assert psql.pg4n_message == `` Test '' match_select_stmt.parse_string ( no_newlines_res ) is not [ ] # should parse as \n - > `` '' `` `` '' stmt_res_list [ length - 4 ] ] # reverse order elif len ( res_list ) == 2 : # parsing stops right after database name # assert psql.ofilter ( case_query_3_prompt ) == \ results = [ stmt_res_list [ length - 2 ] , ( CaselessLiteral ( `` > = '' ) | CaselessLiteral ( `` # = '' ) ) + \ `` sql ( 14.5 ) \nType \ '' help\ '' for help.\n\npgdb= # SELECT * FROM orders WHERE order\n_total_eur = 100 ; \n\n\n '' b '' \x1b [ A\rtest_db= # SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur = 100 ; \x1b [ K\x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\r\n\r '' # Arrow-up to previous query , alt-B until 'orders WHERE ' and remove the","['src/pg4n/psqlparser.py', 'src/pg4n/psqlwrapper.py', 'src/pg4n/test/test_psqlparser.py', 'src/pg4n/test/test_psqlwrapper.py']",2022-11-04 15:31:55+00:00,2022-11-21 14:23:46+00:00,2022-11-21 16:23:44+02:00
52,dbbd4ef6012e41811e4d34b77b6e621abbb89329,1.042272288032109e-05,1,To be discussed in sprint planning,Adding automatic formatter to development pipeline,Merge pull request # 103 from Project-C-SQL/feat/githooks,"assert psql._intercept ( case_query_2_prompt ) == \ b '' 207.60 | 9\x1b [ m\r\n 21 | 471.12 | 179\x1b [ m\r\n : \x1b [ K '' from .config_reader import ConfigReader parser : PsqlParser , psql._intercept ( b '' * '' ) poetry-githooks = `` ^2.0.0 '' content-hash = `` bda80eb1b1c7745b639f9a3f54a4078af57c5368d7e25dd2f5ae38751c10e3fd '' `` Actual Total Time '' : float , p.parse_last_stmt ( case_multiple_queries_and_whitespaces ) column_expression def _intercept ( `` \x1b [ ? 2004l\r order_id | order_total_eur | customer_id \r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\r\n ( 0 rows ) \r\n\r\n\x1b [ ? 2004hpgdb= # `` QEPParser ( conn=self.db_connection , constraint_exclusion=True ) assert p.parse_last_stmt ( case_select_then_insert ) == `` '' psql._intercept ( b '' ; '' ) from .. psqlparser import PsqlParser from shutil import get_terminal_size whole_statement [ total_start_offset : total_end_offset ] syntax_error = \ `` Planning Time '' : float , column_expression ) b '' SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur = 100 ; '' self.tok_rev_prompt_end assert p.parse_last_stmt ( case_multiline_query ) == \ `` Plan Rows '' : int , ' '' # ' , SQL_VARCHAR_SUSPICIOUS = f '' '' '' ' '' ? # ' , `` * ? > '' , category = `` dev '' `` Plans '' : List [ `` node '' ] , SQL_NESTED_WHERE_SUSPICIOUS = \ `` Planning Time '' : float , ' '' > ' , project = `` PostgreSQL for novices '' case_trivial = `` \x1b [ ? 2004hpgdb= > `` `` sphinx_autodoc_typehints '' , == b '' \r\n '' + b '' Test '' + b '' \r\n\r\n '' + b '' \x1b [ ? 2004hpgdb= # `` ' '' ? > ' , '.rst ' : 'restructuredtext ' , import sqlglot.expressions as exp case_empirical_1 = \ self.qep_analysis.root.rfindval ( `` Node Type '' , `` Sort '' ) ) > 0 p.parse_last_stmt ( case_empirical_1 ) `` Parent Relationship '' : str , == b '' \r\nTest\r\n\r\n\x1b [ ? 2004htest_db= # `` SQL_VARCHAR_SUSPICIOUS = \ ... + tok_marker_caret + ... + tok_rev_error `` Parent Relationship '' : str , assert p.parse_last_stmt ( case_multiline_query ) == `` SELECT * FROM orders ; '' `` \x1b [ ? 2004l\r order_id | order_total_eur | customer_id \r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\r\n ( 0 rows ) \r\n\r\n '' , p.parse_last_stmt ( case_query_with_newline ) def start ( self ) - > None : from pytest_postgresql import factories match_rev_magical_returns.parse_string ( psql_rev ) type_start_matcher = re.compile ( r'^ ( [ a-zA-Z ] + ) . * $ ' ) == b '' order_id | order_total_eur | customer_id \r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\r\n ( 0 rows ) \r\n\r\n\r\nTest\r\n\r\n\x1b [ ? 2004htest_db= # `` analysis_result : Optional [ str ] = None ] psql._intercept ( b '' \r\n\r\r\n '' ) b '' \x1b [ ? 2004l\r order_id | order_total_eur | customer_id \r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\r\n ( 0 rows ) \r\n\r\n\x1b [ ? 2004htest_db= # `` `` ( ! # '' , copyright = `` 2022 , Heikkilä et al '' ... # has already been parsed as prompt_chars `` Plan Rows '' : int , `` - ! > '' , `` * ! > '' , `` \ ' ! > '' , `` \ '' ! > '' , `` $ ! > '' , `` ( ! > '' , import copy version = `` 2.0.0 '' analysis_result : Optional [ str ] = \ from typing import Optional , Type , Any [ Githooks ] ( # githooks ) assert p.parse_last_stmt ( case_trivial ) == \ def __init__ ( self , psql_args : str ) : from .config_values import ConfigValues case_multiline_query = \ `` myst_parser '' , assert p.parse_last_stmt ( case_multiple_queries_and_whitespaces ) == \ assert p.parse_new_prompt_and_rest ( case_trivial ) == \ self.pg_port sql_parser : SqlParser = SqlParser ( conn ) b ' 207.60 | 9\x1b [ m\r\n 21 | 471.12 | 179\x1b [ m\r\n : \x1b [ K ' ) Literal ( `` \ '' as user \ '' '' ) import sys `` Triggers '' : list [ str ] , `` psql ( 14.5 ) \nType \ '' help\ '' for help.\n\npgdb= # SELECT * FROM\npgdb- # orders ; '' ) - > Optional [ Tuple [ str , str , str , str , str ] ] : stmt.strip ( ) .rstrip ( ' ; ' ) + `` ; '' is_select = match_select_stmt.parse_string ( no_newlines_res ) is not [ ] case_long_return = \ columns : list [ Column ] ) : a.type.digits is not None and b.type.digits is None `` \r\x1b [ 16Ppgdb= # SELECT * FROM orders WHERE order_total_eur = 0 AND order_tot\x08\r\n\x1b [ ? 2004l\r '' match_psql_conninfo.parse_string ( conninfo_str ) .as_list ( ) 'psql ( 14.5 ) \nType `` help '' for help.\n\npgdb= # SELECT * FROM\npgdb- # orders ; ' `` $ ! > '' , `` Execution Time '' : float , Word ( nums ) `` ' * # '' , SQL_SIMPLE = \ self.tok_rev_prompt_end `` ( ! > '' , == b '' \x1b [ ? 2004l\r order_id | order_total_eur | customer_id \r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\r\n ( 0 rows ) \r\n\r\n\r\nTest\r\n\r\n\x1b [ ? 2004htest_db= # `` whole_statement [ : total_start_offset ] b '' \x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C0 ' : SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur \x1b [ 7m= 10\x1b [ 27m0 ; \x08\x08\x08\x08\x08\x08 '' node = TypedDict ( def find ( self , pr : Callable [ [ node ] , bool ] , recursive=False ) - > list [ node ] : f.write ( psql._intercept ( b ' ; ' ) psql._intercept ( b'\x1b [ ? 2004htest_db- # ' ) from pyte import Stream , Screen bytes.decode ( output , `` utf-8 '' ) analysis_result = CmpDomainChecker ( ( Literal ( `` = '' ) | Literal ( `` ^ '' ) ) psql._intercept ( b'\x08\x08 ' ) from .sqlparser import SqlParser potential_future_screen_output_sink.feed ( bytes.decode ( latest_output ) ) psql._intercept ( b '' \x1b [ ? 2004htest_db- # `` ) conn=self.db_connection , constraint_exclusion=True psql._intercept ( b'\x1b [ ? 2004l\r\x1b [ ? 1049h\x1b=\r order_id | order_total_eur | customer_id \x1b [ m\r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\x1b [ m\r\n 1 | 535.36 | 111\x1b [ m\r\n 2 | 409.80 | 217\x1b [ m\r\n 3 | 189.43 | 19\x1b [ m\r\n 4 | 144.14 | 157\x1b [ m\r\n 5 | 582.52 | 172\x1b [ m\r\n 6 | 132.85 | 206\x1b [ m\r\n 7 | 183.92 | 236\x1b [ m\r\n 8 | 424.80 | 244\x1b [ m\r\n 9 | 519.43 | 175\x1b [ m\r\n 10 | 414.55 | 234\x1b [ m\r\n 11 | 88.19 | 50\x1b [ m\r\n 12 | 591.72 | 143\x1b [ m\r\n 13 | 503.52 | 216\x1b [ m\r\n 14 | 586.06 | 181\x1b [ m\r\n 15 | 47.79 | 248\x1b [ m\r\n 16 | 330.92 | 130\x1b [ m\r\n 17 | 302.31 | 225\x1b [ m\r\n 18 | 438.38 | 26\x1b [ m\r\n 19 | 107.53 | 94\x1b [ m\r\n 20 | ' `` Relation Name '' : str , dimensions= ( self.rows , self.cols ) SQL_NESTED_WHERE_VALID = \ sql_query , match_select_stmt : ParserElement = ( if self.parser.output_has_magical_return ( bytes.decode ( output , `` utf-8 '' ) ) : `` * ! # '' , `` dbname= '' from .. qepparser import QEPParser psql._intercept ( b'\x08\x08\x08\x08\x08\x08 ' ) SQL_NESTED_SUBQUERY_INNER_ORDER = \ CaselessLiteral ( `` SELECT '' ) qep = TypedDict ( `` QEP '' , { psql._intercept ( b'\x08\x08\x08\x08 ' ) `` Index Name '' : str , elif ( ( a.type.digits is None and b.type.digits is not None ) or psql._intercept ( b '' \x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C1 ' : SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur \x1b [ 7m= 1\x1b [ 27m00 ; \x08\x08\x08\x08\x08\x08 '' ) chain.from_iterable ( x.find ( pr , True ) for x in iter ( self ) ) list ( chain.from_iterable ( x.find ( pr , True ) for x in iter ( self ) ) ) 'navigation_depth ' : 3 , PsqlParser ( ) SQL_NO_IMPLIED_EXPRESSION = \ qep_analysis : QEPAnalysis = QEPParser ( conn=conn ) .parse ( sql_query ) underlined_query = ( case_query_2 = b '' \x1b [ A\rtest_db= # SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur = 100 ; \x1b [ K\x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\r\n\r '' assert p.parse_last_stmt ( case_select_then_select ) == \ qep_analysis_with_constraint_exclusion = ( potential_future_contents : str = '\n'.join ( and not has_onetime_filter_without_constraint_exclusion def __init__ ( self , parsed_sql : exp.Expression , sql_statement : str , '' , def _detect_suspicious_cmp ( self , cmp : exp.Predicate , columns : list [ Column ] ) : magical_return_res = match_rev_magical_returns.parse_string ( psql_rev ) StringEnd ( ) # output may stop at end of db name , `` user= '' + self.pg_user '\n'.join ( line.rstrip ( ) for line in self.pyte_screen.display ) ) - > bytes : def _detect_suspicious_cmp ( self , cmp : exp.Predicate , import sys SqlParser ( conn ) == `` SELECT * FROM orders WHERE order_total_eur = 100 ; '' `` Plan '' : node , { file = `` poetry_githooks-2.0.0-py3-none-any.whl '' , hash = `` sha256:3eb0d2371ab10f7da3fc3f555446b5ee168b6de25fa0c9f22bcd6ce9cebed5cf '' } , from .. implied_expression_checker import ImpliedExpressionChecker self.tok_pre_host sanitized_sql , sql_parser Column , cur.execute ( == `` SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur = 100 ; '' Opt ( Literal ( ' * ' ) | Literal ( ' ! ' ) | Literal ( ' ? ' ) , `` '' ) sanitized_sql : exp.Expression = sql_parser.parse_one ( sql_query ) html_theme = 'sphinx_rtd_theme ' split_prompt [ 0 ] + `` \r\n '' qep_parser_with_constraint_exclusion = QEPParser ( psql._intercept ( b '' \x08\x08 '' ) node = TypedDict ( `` Plan '' , { ) : SQL_MULTI_CMP_VALID = f '' '' '' has_onetime_filter_with_constraint_exclusion unreversed_flattened_res : str = reduce ( stmt_res_list [ 2 ] , lambda x : `` '' , pre-commit = `` black . & & isort -- profile black . '' psql._intercept ( b'\x1b [ ? 2004l\r\x1b [ ? 2004htest_db- # ' ) `` sql ( 14.5 ) \nType \ '' help\ '' for help.\n\npgdb= # SELECT * FROM orders WHERE\norder_total_eur = 100 ; \n\n\n '' `` QEP '' , b.type.precision is not None ) or `` ' # '' , tok_marker_caret import sqlglot.expressions as exp tok_end : ParserElement = \ 'sphinx.ext.autodoc ' , assert p.parse_last_stmt ( case_trivial ) == `` SELECT * FROM orders ; '' Opt ( White ( ) ) templates_path = [ `` _templates '' ] psql._intercept ( b '' \x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C0 ' : SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur \x1b [ 7m= 10\x1b [ 27m0 ; \x08\x08\x08\x08\x08\x08 '' ) `` explain ( format json , analyze , verbose ) `` + stmt.strip ( ) .rstrip ( `` ; '' ) + `` ; '' VT100_UNDERLINE `` sql ( 14.5 ) \nType \ '' help\ '' for help.\n\npgdb= # SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur = 100 ; \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n '' `` Filter '' : str , SQL_CHECK_CONSTRAINT_VIOLATION = f '' '' '' no_newlines_res = unreversed_flattened_res.replace ( '\n ' , ' ' ) `` - ? # '' , `` * ? # '' , `` \ ' ? # '' , `` \ '' ? # '' , `` $ ? # '' , `` ( ? # '' , `` Total Runtime '' : float , `` `` SQL_NESTED_WHERE_VALID = f '' '' '' This needs to be re-run each time the ` [ tool.githooks ] ` section is modified in the ` pyproject.toml ` file . `` * ? # '' , `` user= '' res_list [ 2 ] [ : :-1 ] + res_list [ 1 ] [ : :-1 ] + res_list [ 0 ] [ : :-1 ] Word ( identbodychars ) enumerate ( self.suspicious_cmp_contexts ) : tok_host : ParserElement = \ return self.find ( pr ) + list ( `` host= '' psql._intercept ( b '' \x08\x08\x08\x08 '' ) `` $ ? # '' , One can skip pre-commit hooks by running ` git commit ` with the ` -- no-verify ` flag . psql._intercept ( b '' SELECT '' ) has_sort_node = len ( self.qep_analysis.root.rfindval ( `` Node Type '' , `` Sort '' ) ) > 0 ( Literal ( ' # ' ) | Literal ( ' > ' ) ) screen : str = \ StringEnd ( ) b'\r\n\x1b [ ? 2004l\r ' `` Actual Loops '' : int , [ Linters and formatters ] ( # linters-and-formatters ) case_mixed_results = `` \x1b [ ? 2004l\r order_id | order_total_eur | customer_id \r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\r\n ( 0 rows ) \r\n\r\n\x1b [ ? 2004hpgdb= # `` `` Node Type '' : str , case_select_then_select = 'psql ( 14.5 ) \nType `` help '' for help.\n\npgdb= # SELECT * FROM orders ; \npgdb= # SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur = 100 ; ' multiline_prompt_ends : list [ str ] = \ results = [ stmt_res_list [ 3 ] , `` $ * # '' , `` .md '' : `` markdown '' , SQL_CHECK_CONSTRAINT_VIOLATION = \ match_select_stmt : ParserElement = ZeroOrMore ( White ( ) ) + CaselessLiteral ( b'\r\n ' + b'Test ' + b'\r\n\r\n ' + b'\x1b [ ? 2004hpgdb= # ' ( a.type.precision is not None and tok_pre_user : ParserElement = \ Literal ( `` ? [ \x1b '' ) # in this case control code parameter tok_database : ParserElement = \ case_select_then_insert = `` psql ( 14.5 ) \nType \ '' help\ '' for help.\n\npgdb= # SELECT * FROM orders ; \npgdb= # INSERT INTO orders VALUES ( 6 , 6 , 6 ) ; '' # # # # Githooks `` * ! > '' , potential_future_screen = \ case_long_return = `` \r\x1b [ 16Ppgdb= # SELECT * FROM orders WHERE order_total_eur = 0 AND order_tot\x08\r\n\x1b [ ? 2004l\r '' tok_stmt_end deepcopy ( self.pyte_screen ) recursive=False ) - > list [ node ] : `` psql ( 14.5 ) \nType \ '' help\ '' for help.\n\npgdb= # SELECT * FROM orders ; \npgdb= # SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur = 100 ; '' from .sqlparser import ( assert psql._intercept ( fresh_prompt_1 ) == \ from .. sqlparser import Column return self.find ( pr ) + \ results = [ `` '' , res_list [ 1 ] [ : :-1 ] + res_list [ 0 ] [ : :-1 ] ] p.parse_last_stmt ( case_select_then_select ) ) conn=self.db_connection , constraint_exclusion=False tok_user : ParserElement = Word ( identbodychars ) SQL_SIMPLE = f '' '' '' SQL_OUTER_ORDER_WITH_INNER_ORDER = f '' '' '' split_prompt [ 0 ] + `` \r\n '' + print_msg + `` \r\n\r\n '' + split_prompt [ 1 ] , `` utf-8 '' [ `` '' , `` \x1b [ ? 2004hpgdb= > `` ] ) results = [ stmt_res_list [ length - 3 ] , stmt_res_list [ length - 4 ] ] if self.parser.output_has_new_prompt ( columns tok_pre_host : ParserElement = \ self.tok_end SQL_NESTED_WHERE_SUSPICIOUS = f '' '' '' `` .rst '' : `` restructuredtext '' , def _check_and_act_on_repl_output ( self , latest_output : bytes ) - > bytes : `` collapse_navigation '' : False , import psycopg `` `` '' ) tok_pre_user : ParserElement = Literal ( ' '' as user `` ' ) psql._intercept ( case_query_2_prompt ) print_msg + `` \r\n\r\n '' `` Total Runtime '' : float , case_psql_start = \ config_values : Optional [ ConfigValues ] , ( self.pg_name has_implied_expression = ( tok_end : ParserElement = Literal ( ' '' . ' ) `` ( ? > '' , SQL_MULTI_VARCHAR_SUSPICIOUS = f '' '' '' elif ( ( a.type.precision is None and insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 250 , 367.56 , 214 ) ; '' '' '' bytes.decode ( prompt , `` utf-8 '' ) tok_pre_database : ParserElement = \ from .. qepparser import QEPParser `` Execution Time '' : float , `` - ! # '' , `` - ? # '' , b '' \x08\x08\x08= ' : SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur \x1b [ 7m=\x1b [ 27m 100 ; \x08\x08\x08\x08\x08\x08 '' ) b.type.precision is None ) ) : b'\r\nTest\r\n\r\n\x1b [ ? 2004htest_db= # ' has_implied_expression = \ ParserElement , `` port= '' psql._intercept ( b '' \r\n\x1b [ ? 2004l\r '' ) from .. psqlparser import PsqlParser `` ' ! > '' , return_press_3 = b '' \x08\r\n '' self.pg_host psql._intercept ( b'FROM ' ) `` Plans '' : List [ `` node '' ] , a.type.precision is not None and b.type.precision is None psql._intercept ( b'\r\x1b [ K\x1b > \x1b [ r\x1b [ ? 1049l ' ) `` - > '' , `` psql ( 14.5 ) \nType \ '' help\ '' for help.\n\npgdb= # SELECT * FROM orders ; \npgdb= # INSERT INTO orders VALUES ( 6 , 6 , 6 ) ; \npgdb= # SELECT * FROM\n orders WHERE order_total_eur = 100 ; `` from .config_values import ConfigValues psql._intercept ( b '' \x08\x08\x08= ' : SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur \x1b [ 7m=\x1b [ 27m 100 ; \x08\x08\x08\x08\x08\x08 '' ) potential_future_screen_output_sink.feed ( assert p.parse_last_stmt ( case_empirical_1 ) == \ assert p.parse_last_stmt ( case_select_then_insert ) == \ 'collapse_navigation ' : False , `` .txt '' : `` markdown '' , Literal ( `` You are connected to database \ '' '' ) b'\x1b [ ? 2004hpgdb= # ' Opt ( Literal ( `` * '' ) | Literal ( `` ! '' ) | Literal ( `` ? `` ) , `` '' ) self.tok_pre_port sql_parser.get_query_columns ( sanitized_sql ) case_trivial = 'psql ( 14.5 ) \nType `` help '' for help.\n\npgdb= # SELECT * FROM orders ; ' author = `` Heikkilä et al . '' assert p.parse_new_prompt_and_rest ( case_mixed_results ) == [ from .semanticrouter import SemanticRouter from os import getenv self.tok_host def run_analysis ( self , sql_query : str ) - > str : `` Alias '' : str , `` - > '' , `` * > '' , `` \ ' > '' , `` \ '' > '' , `` $ > '' , `` ( > '' , [ tool.githooks ] exclude_patterns = [ `` build '' , `` Thumbs.db '' , `` .DS_Store '' ] potential_future_screen_output_sink = Stream ( potential_future_screen ) self `` - * > '' , `` * * > '' , `` \ ' * > '' , `` \ '' * > '' , `` $ * > '' , `` ( * > '' , case_query_2 = \ `` Startup Cost '' : float , PsqlParser ( ) , `` - # '' , `` dbname= '' + self.pg_name ( StringEnd ( ) # output may stop at end of db name , case_query_1 = ( filter ( lambda x : isinstance ( x , exp.Binary ) , predicates ) ) qep_parser_without_constraint_exclusion = \ psql._intercept ( b '' \x1b [ ? 2004l\r\x1b [ ? 2004htest_db- # `` ) PsqlParser ( ) ) `` ( ? # '' , [ [ package ] ] SQL_OUTER_ORDER_WITHOUT_INNER_ORDER = \ syntax_error = self.parser.parse_syntax_error ( potential_future_contents ) `` $ > '' , tok_pre_database : ParserElement = Literal ( 'You are connected to database `` ' ) [ `` - # '' , `` * # '' , `` \ ' # '' , `` \ '' # '' , `` $ # '' , `` ( # '' , results = [ SqlParser , stmt_res_list [ length - 4 ] def _detect_suspicious_cmps ( is_select = \ psql_args : str `` Plan Width '' : int , self.tok_user from pyparsing import Literal , Word , ParseException , ParserElement , \ VT100_RESET self , select_statement : exp.Select , columns : list [ Column ] assert psql._intercept ( b'\x1b [ ? 2004l\r order_id | order_total_eur | customer_id \r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\r\n ( 0 rows ) \r\n\r\n\x1b [ ? 2004htest_db= # ' ) == \ latest_output : bytes f '' '' '' conninfo_res = match_psql_conninfo.parse_string ( conninfo_str ) .as_list ( ) insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 250 , 367.56 , 214 ) ; '' '' '' ) sql_parser.parse_one ( sql_query ) Combine ( psql._intercept ( b '' \r\n '' ) Literal ( `` \ '' at port \ '' '' ) results = [ self.warning_msg += '\n ' `` \x1b [ ? 2004hpgdb= > `` SQL_WITHOUT_OUTER_ORDER = \ tok_port : ParserElement = \ case_select_then_select = \ def __init__ ( parsed_sql , sql_statement , db_connection ) assert p.parse_last_stmt ( case_query_with_newline ) == \ bytes.decode ( prompt , `` utf-8 '' ) from .qepparser import QEPAnalysis , QEPNode , QEPParser case_multiple_queries_and_whitespaces = \ whole_statement [ total_end_offset : len ( whole_statement ) ] `` * > '' , lambda x , y : x + y , sys.argv [ 1 : ] , `` '' sql_parser : SqlParser = \ optional = false `` ( * # '' , db_connection : Connection ) : ) - > None : `` * * # '' , `` ( > '' , return_press_2 = \ has_onetime_filter_without_constraint_exclusion = ( `` Index Cond '' : str , cmp_column_name = SqlParser.get_column_name_from_column_expression ( qep_parser_without_constraint_exclusion = QEPParser ( ) dbname=getenv ( `` PGDBNAME '' , `` test_database '' ) , def __init__ ( from .. sqlparser import SqlParser tok_stmt_end : ParserElement = Char ( ' ; ' ) ) case_multiline_query = ( nums == `` SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur = 100 ; '' ... bytes.decode ( latest_output ) res_list [ 2 ] [ : :-1 ] + res_list [ 1 ] [ : :-1 ] + res_list [ 0 ] [ : :-1 ] , `` Filter '' : str , `` SELECT * FROM orders ; '' psql._intercept ( b '' \x1b [ ? 2004l\r\x1b [ ? 1049h\x1b=\r order_id | order_total_eur | customer_id \x1b [ m\r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\x1b [ m\r\n 1 | 535.36 | 111\x1b [ m\r\n 2 | 409.80 | 217\x1b [ m\r\n 3 | 189.43 | 19\x1b [ m\r\n 4 | 144.14 | 157\x1b [ m\r\n 5 | 582.52 | 172\x1b [ m\r\n 6 | 132.85 | 206\x1b [ m\r\n 7 | 183.92 | 236\x1b [ m\r\n 8 | 424.80 | 244\x1b [ m\r\n 9 | 519.43 | 175\x1b [ m\r\n 10 | 414.55 | 234\x1b [ m\r\n 11 | 88.19 | 50\x1b [ m\r\n 12 | 591.72 | 143\x1b [ m\r\n 13 | 503.52 | 216\x1b [ m\r\n 14 | 586.06 | 181\x1b [ m\r\n 15 | 47.79 | 248\x1b [ m\r\n 16 | 330.92 | 130\x1b [ m\r\n 17 | 302.31 | 225\x1b [ m\r\n 18 | 438.38 | 26\x1b [ m\r\n 19 | 107.53 | 94\x1b [ m\r\n 20 | `` ) - > str : return_press_1 = \ tok_database : ParserElement = Word ( identbodychars ) VT100_UNDERLINE + \ from .errfmt import ErrorFormatter `` Plan '' : node , `` Total Cost '' : float , qep_analysis_without_constraint_exclusion = ( | ( # or continue \x1b [ ? .. return_press_1 = b '' \r\n '' psql._intercept ( b '' \x1b [ A\rtest_db= # SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur = 100 ; \x1b [ K\x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\r\n\r '' ) author = 'Heikkilä et al . ' psql._intercept ( b '' \x1b [ ? 2004htest_db= # `` ) `` ( # '' , SQL_NOT_NULL_CONSTRAINT_VIOLATION = f '' '' '' ] html_theme = `` sphinx_rtd_theme '' psql._intercept ( b '' '\r ( reverse-i-search ) ` ' : `` ) elif ( a.type.digits is None and b.type.digits is not None ) or ( 'myst_parser ' , def _check_and_act_on_repl_output ( qep_analysis : QEPAnalysis = \ sql_query : str QEPNode , SQL_NO_IMPLIED_EXPRESSION = f '' '' '' This project uses ` poetry-githooks ` to run automatic formatting on each commit . To set this up , run : results = [ stmt_res_list [ 3 ] , stmt_res_list [ 2 ] , stmt_res_list [ 1 ] ] case_query_with_newline = \ psql._intercept ( b'\r\n\r\r\n ' ) from .sqlparser import Column potential_future_contents : str = `` \n '' .join ( dimensions= ( self.rows , self.cols ) , | ( # or continue \x1b [ ? .. ) : from .qepparser import QEPAnalysis , QEPParser `` host= '' + self.pg_host potential_future_screen = deepcopy ( self.pyte_screen ) html_static_path = [ `` _static '' ] `` psql `` from os import getenv `` SELECT '' case_mixed_results = \ `` ' ? # '' , f.write ( `` \n '' .join ( line.rstrip ( ) for line in self.pyte_screen.display ) ) b '' \x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C0 ' : SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur \x1b [ 7m= 100\x1b [ 27m ; \x08\x08\x08\x08\x08\x08 '' stmt_res_list [ length - 3 ] , cmp_columns [ 1 ] ) : fresh_prompt_1 = b '' \x1b [ ? 2004hpgdb= # `` psql._intercept ( b'SELECT ' ) self.tok_rev_prompt_end python-versions = `` > =3.6.2 , < 4.0 '' Literal ( `` psql ( PostgreSQL ) `` ) res_list [ 1 ] [ : :-1 ] + res_list [ 0 ] [ : :-1 ] psql._intercept ( b '' \r\x1b [ C '' ) ) `` ` bash tok_pre_host : ParserElement = Literal ( ' '' on host `` ' ) | Literal ( ' '' via socket in `` ' ) SqlParser.get_column_name_from_column_expression ( self.pg_name , self.parser.parse_syntax_error ( potential_future_contents ) type_start_matcher = re.compile ( r '' ^ ( [ a-zA-Z ] + ) . * $ '' ) `` psql ( 14.5 ) \nType \ '' help\ '' for help.\n\npgdb= # SELECT * FROM orders ; '' b '' \x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C '' [ `` \x1b [ ? 2004l\r order_id | order_total_eur | customer_id \r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\r\n ( 0 rows ) \r\n\r\n '' , `` \x1b [ ? 2004hpgdb= # `` ] def start ( Word ( nums ) def get ( self ) - > Optional [ Tuple [ str , str , str , str , str ] ] : SQL_NOT_NULL_CONSTRAINT_VIOLATION = \ `` Alias '' : str , psql._intercept ( b '' \x08\x08\x08\x08\x08\x08 '' ) self case_select_then_insert = 'psql ( 14.5 ) \nType `` help '' for help.\n\npgdb= # SELECT * FROM orders ; \npgdb= # INSERT INTO orders VALUES ( 6 , 6 , 6 ) ; ' `` Actual Startup Time '' : float , containing_where_start_offset = whole_statement.find ( containing_where ) `` Relation Name '' : str , case_trivial = \ b '' \x08order_total_eur = 0 AND order_total_eur = 10\x1b [ C\x1b [ 1P ; \x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C '' from pyte import Screen , Stream '.txt ' : 'markdown ' , psql._intercept ( b'\x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C ' ) def run_analysis ( Literal ( `` \ '' via socket in \ '' '' ) ZeroOrMore ( White ( ) ) + tok_stmt_end + ... + self.tok_rev_prompt_end columns : list [ Column ] = \ `` SELECT * FROM orders WHERE order_total_eur = 100 ; '' reduce ( whole_statement [ total_end_offset : len ( whole_statement ) ] psql._intercept ( fresh_prompt_1 ) `` utf-8 '' assert p.parse_new_prompt_and_rest ( case_mixed_results ) == \ self.tok_database no_newlines_res = unreversed_flattened_res.replace ( `` \n '' , `` `` ) from .sqlparser import Column , SqlParser language = `` en '' '' 'Alias for __call__ '' ' magical_return_res = \ `` ' * > '' , has_onetime_filter_with_constraint_exclusion = ( import pexpect description = `` Simple git hooks with poetry '' `` Index Name '' : str , ) `` Plan '' , `` Scan Direction '' : str , checker = ImpliedExpressionChecker ( match_select_stmt.parse_string ( no_newlines_res ) is not [ ] ' '' ! > ' , sanitized_sql , self.tok_pre_database + self.tok_database import copy tok_user : ParserElement = \ `` Actual Rows '' : int , ... # has already been parsed as prompt_chars [ Linting ] ( # linting ) stmt = `` explain ( format json , analyze , verbose ) `` + \ `` - * > '' , self , whole_statement.find ( containing_where ) `` One-Time Filter '' : str , identbodychars , nums `` SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur = 100 ; '' `` Actual Loops '' : int , `` password= '' tok_pre_port : ParserElement = Literal ( ' '' at port `` ' ) poetry run githooks setup psql._intercept ( b'orders ' ) `` Triggers '' : list [ str ] , sanitized_sql : exp.Expression = \ `` - ! # '' , `` * ! # '' , `` \ ' ! # '' , `` \ '' ! # '' , `` $ ! # '' , `` ( ! # '' , total_start_offset = \ psql._intercept ( html_static_path = [ '_static ' ] `` * # '' , SQL_MULTIPLE_INNER_ORDERS = \ self.pg_pass b '' SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur = 100 ; '' ) : ) : case_query_with_newline = 'sql ( 14.5 ) \nType `` help '' for help.\n\npgdb= # SELECT * FROM orders WHERE\norder_total_eur = 100 ; \n\n\n ' assert psql._intercept ( b'\x1b [ ? 2004htest_db= # ' ) == \ `` SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur = 100 ; '' from shutil import get_terminal_size click = `` > =8.0.3 , < 9.0.0 '' from .. sqlparser import Column , SqlParser Word ( nums ) ) .get ( ) `` style_external_links '' : True , ) potential_future_screen_output_sink = \ qep_analysis_without_constraint_exclusion = \ `` Actual Rows '' : int , match_version_stmt : ParserElement = ( psql._intercept ( b'\r\x1b [ C ' ) [ package.dependencies ] ( Literal ( `` # '' ) | Literal ( `` > '' ) ) `` ' > '' , QEPParser , { file = `` poetry-githooks-2.0.0.tar.gz '' , hash = `` sha256 : aa5a09159b479987d0426d6bd27df92d7252a901522436b42e5d74812d63eb2d '' } , match_version_stmt : ParserElement = Literal ( `` psql ( PostgreSQL ) `` ) + Combine ( Literal ( `` \ '' . '' ) lambda x , y : x + y [ : :-1 ] , results , `` '' sanitized_sql , qep_analysis case_query_1 = \ `` port= '' + self.pg_port for i , suspicious_cmp_context in enumerate ( self.suspicious_cmp_contexts ) : whole_statement [ total_start_offset : total_end_offset ] + \ self , parsed_sql : exp.Expression , sql_statement : str , db_connection : Connection ' . ' psql._intercept ( b '' orders '' ) screen : str = `` \n '' .join ( line.rstrip ( ) for line in self.pyte_screen.display ) `` Index Cond '' : str , multiline_prompt_ends : list [ str ] = [ qep = TypedDict ( cmp_column_name = \ `` $ # '' , `` $ ? > '' , dbname=getenv ( `` PGDBNAME '' , `` test_database '' ) ) g.write ( str ( new_output ) + `` \n '' ) config_values : Optional [ ConfigValues ] SQL_WITHOUT_OUTER_ORDER = f '' '' '' self.tok_pre_user Literal ( `` \ '' on host \ '' '' ) | \ fresh_prompt_1 = \ # # # Linters and formatters ParserElement , `` ' ! # '' , ( a.type.digits is not None and b.type.digits is None ) ) : b '' order_id | order_total_eur | customer_id \r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\r\n ( 0 rows ) \r\n\r\n\r\nTest\r\n\r\n\x1b [ ? 2004htest_db= # `` `` Actual Startup Time '' : float , from .semanticrouter import SemanticRouter project = 'PostgreSQL for novices ' } ) not has_onetime_filter_without_constraint_exclusion self.tok_pre_database `` - ? > '' , `` * ? > '' , `` \ ' ? > '' , `` \ '' ? > '' , `` $ ? > '' , `` ( ? > '' ] SQL_MULTI_VARCHAR_SUSPICIOUS = \ nums , VT100_RESET + \ # # # Linting } , from .sqlparser import SqlParser , Column Opt ( White ( ) ) ... `` Total Cost '' : float , return_press_3 = \ poetry-githooks = [ psql._intercept ( b '' '\r ( reverse-i-search ) ` ' : `` ) `` ` analysis_result = CmpDomainChecker ( sanitized_sql , columns ) .check ( ) `` ( * > '' , from .config_reader import ConfigReader qep_parser_with_constraint_exclusion = \ `` sphinx.ext.todo '' , case_psql_start = b'psql ( 14.5 ) \r\nType `` help '' for help.\r\n\r\n\x1b [ ? 2004hpgdb= # ' copyright = '2022 , Heikkilä et al ' case_multiple_queries_and_whitespaces = 'psql ( 14.5 ) \nType `` help '' for help.\n\npgdb= # SELECT * FROM orders ; \npgdb= # INSERT INTO orders VALUES ( 6 , 6 , 6 ) ; \npgdb= # SELECT * FROM\n orders WHERE order_total_eur = 100 ; ' 'sphinx_autodoc_typehints ' , self.tok_end containing_where_start_offset = \ SQL_INT_VARCHAR_VALID = \ stmt = ( SQL_MULTI_CMP_VALID = \ sql_parser conninfo_res = \ has_sort_node = len ( `` `` '' from .qepparser import QEPAnalysis , QEPParser ) : psql._intercept ( b'SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur = 100 ; ' ) QEPParser ( conn=conn ) .parse ( sql_query ) templates_path = [ '_templates ' ] qep_analysis tok_rev_error `` One-Time Filter '' : str , def find ( self , pr : Callable [ [ node ] , bool ] , `` sphinx.ext.autodoc '' , from .. implied_expression_checker import ImpliedExpressionChecker has_onetime_filter_with_constraint_exclusion and \ ' '' * > ' , psql._intercept ( b '' \x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C0 ' : SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur \x1b [ 7m= 100\x1b [ 27m ; \x08\x08\x08\x08\x08\x08 '' ) b '' \x08order_total_eur = 0 AND order_total_eur = 1\x1b [ 1P00 ; \x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C '' `` $ * > '' , `` \x1b [ ? 2004hpgdb= # `` , b'\x1b [ ? 2004l\r order_id | order_total_eur | customer_id \r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\r\n ( 0 rows ) \r\n\r\n\r\nTest\r\n\r\n\x1b [ ? 2004htest_db= # ' import pytest import psycopg parser : PsqlParser b '' \x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C1 ' : SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur \x1b [ 7m= 1\x1b [ 27m00 ; \x08\x08\x08\x08\x08\x08 '' assert ( ' '' * # ' , `` `` '' Alias for __call__ '' '' '' Literal ( `` ? [ \x1b '' ) # in this case control code parameter whole_statement [ : total_start_offset ] + \ assert p.parse_new_prompt_and_rest ( case_trivial ) == [ `` '' , `` \x1b [ ? 2004hpgdb= > `` ] lambda x : `` Test '' , return_press_2 = b '' \r\n\x1b [ ? 2004l\r '' `` Node Type '' : str , SQL_OUTER_ORDER_WITHOUT_INNER_ORDER = f '' '' '' StringEnd ( ) ] output : bytes Stream ( potential_future_screen ) elif ( a.type.precision is None and b.type.precision is not None ) or ( containing_where_start_offset + cmp_start_offset `` - * # '' , underlined_query = \ def _detect_suspicious_cmps ( self , select_statement : exp.Select , pexpect_conninfo = pexpect.spawn ( `` psql -c \ '' \\conninfo\ '' `` + psql_args ) ) .get ( ) from .errfmt import ErrorFormatter import pytest `` * * > '' , from psycopg import Connection tok_pre_port : ParserElement = \ tok_host : ParserElement = Word ( identbodychars + `` / . '' ) psql._intercept ( b'\x08order_total_eur = 0 AND order_total_eur = 1\x1b [ 1P00 ; \x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C ' ) has_onetime_filter_with_constraint_exclusion = \ `` Actual Total Time '' : float , def get ( unreversed_flattened_res : str = \ filter ( lambda x : isinstance ( x , exp.Binary ) , predicates ) from psycopg import Connection for i , suspicious_cmp_context in \ language = 'en ' has_onetime_filter_without_constraint_exclusion = \ columns : list [ Column ] = sql_parser.get_query_columns ( sanitized_sql ) `` - * # '' , `` * * # '' , `` \ ' * # '' , `` \ '' * # '' , `` $ * # '' , `` ( * # '' , from pyparsing import Literal , ParseException , ParserElement , Word , identbodychars , nums `` password= '' + self.pg_pass self.tok_port ZeroOrMore ( White ( ) ) ) if not self._are_from_compatible_domains ( cmp_columns [ 0 ] , cmp_columns [ 1 ] ) : conn None b'SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur = 100 ; ' { ' '' ! # ' , ( Literal ( '= ' ) | Literal ( '^ ' ) ) 'style_external_links ' : True , `` $ ! # '' , SQL_MULTIPLE_INNER_ORDERS = f '' '' '' reduce ( lambda x , y : x + y [ : :-1 ] , results , `` '' ) from .qepparser import ( psql._intercept ( b'\x08order_total_eur = 0 AND order_total_eur = 10\x1b [ C\x1b [ 1P ; \x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C ' ) == `` SELECT * FROM orders WHERE order_total_eur = 100 ; '' 'sphinx.ext.viewcode ' , `` navigation_depth '' : 3 , b'\x08\r\n ' ] `` - ? > '' , if self.parser.output_has_new_prompt ( bytes.decode ( latest_output ) ) : `` Plan Width '' : int , tok_stmt_end : ParserElement = Char ( `` ; '' ) '.md ' : 'markdown ' , toml = `` > =0.10.2 , < 0.11.0 '' `` sphinx.ext.viewcode '' , self.warning_msg += `` \n '' psql = PsqlWrapper ( `` '' , lambda x : `` Test '' , lambda x : `` '' , PsqlParser ( ) ) QEPParser ( conn=self.db_connection , constraint_exclusion=False ) psql._intercept ( b'\r\n\x1b [ ? 2004l\r ' ) if not self._are_from_compatible_domains ( cmp_columns [ 0 ] , g.write ( str ( new_output ) + '\n ' ) checker = ImpliedExpressionChecker ( parsed_sql , sql_statement , db_connection ) b'\r\n ' import pexpect self.pg_name from pytest_postgresql import factories name = `` poetry-githooks '' psql._intercept ( b '' \r\x1b [ K\x1b > \x1b [ r\x1b [ ? 1049l '' ) 'sphinx.ext.todo ' , cur.execute ( `` '' '' def _intercept ( self , output : bytes ) - > bytes : case_empirical_1 = 'sql ( 14.5 ) \nType `` help '' for help.\n\npgdb= # SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur = 100 ; \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n ' SQL_NESTED_SUBQUERY_INNER_ORDER = f '' '' '' psql._intercept ( b ' * ' ) `` SELECT * FROM orders WHERE order_total_eur = 100 ; '' exclude_patterns = [ 'build ' , 'Thumbs.db ' , '.DS_Store ' ] self.pg_user ) stmt_res_list [ 1 ] ] psql._intercept ( b '' FROM '' ) QEPAnalysis , psql._intercept ( b'\r\n ' ) split_prompt [ 1 ] , unreversed_flattened_res : str = reduce ( lambda x , y : x + y [ : :-1 ] , results , `` '' ) `` SELECT * FROM orders ; '' columns : list [ Column ] ) : `` psql `` + reduce ( lambda x , y : x + y , sys.argv [ 1 : ] , `` '' ) qep_analysis_with_constraint_exclusion = \ b'psql ( 14.5 ) \r\nType `` help '' for help.\r\n\r\n\x1b [ ? 2004hpgdb= # ' total_start_offset = containing_where_start_offset + cmp_start_offset pexpect_conninfo = pexpect.spawn ( 'psql -c `` \\conninfo '' ' + psql_args ) from typing import Any , Optional , Type Word ( identbodychars + `` / . '' ) self.tok_pre_port + self.tok_port `` - ! > '' , `` Scan Direction '' : str , self.tok_pre_host + self.tok_host tok_port : ParserElement = Word ( nums ) if self.parser.output_has_magical_return ( SQL_INT_VARCHAR_VALID = f '' '' '' psql = PsqlWrapper ( `` '' , SQL_OUTER_ORDER_WITH_INNER_ORDER = \ Word ( nums ) + `` . '' + Word ( nums ) `` `` '' ) .check ( ) `` Startup Cost '' : float , content-hash = `` 4b0b96510694d91c9e450261d0e6ad6e5c8fd5406801b3ba7190c6451be463e5 '' `` ' ? > '' , sanitized_sql , sql_query , conn self.tok_pre_user + self.tok_user","['README.md', 'docs/conf.py', 'poetry.lock', 'pyproject.toml', 'src/pg4n/cmp_domain_checker.py', 'src/pg4n/eq_wildcard_checker.py', 'src/pg4n/implied_expression_checker.py', 'src/pg4n/main.py', 'src/pg4n/psqlconninfo.py', 'src/pg4n/psqlparser.py', 'src/pg4n/psqlwrapper.py', 'src/pg4n/qepparser.py', 'src/pg4n/semanticrouter.py', 'src/pg4n/strange_having_checker.py', 'src/pg4n/subquery_order_by_checker.py', 'src/pg4n/subquery_select_checker.py', 'src/pg4n/sum_distinct_checker.py', 'src/pg4n/test/test_cmp_domain_checker.py', 'src/pg4n/test/test_config_parser.py', 'src/pg4n/test/test_implied_expression_checker.py', 'src/pg4n/test/test_psqlparser.py', 'src/pg4n/test/test_psqlwrapper.py', 'src/pg4n/test/test_qepparser.py', 'src/pg4n/test/test_subquery_order_by_checker.py', 'src/pg4n/test/test_subquery_select_checker.py']",2022-11-06 11:25:40+00:00,2022-12-22 10:07:51+00:00,2022-12-22 12:07:50+02:00
54,33120fdaf85b81b29fda0b164e51a4d43a477810,1.6571768355788663e-05,1,"Upon push to ` main ` branch < sup > 1 < /sup > , we should - enact sensible versioning < sup > 2 < /sup > - only deploy versions that pass tests - have automatic formation of changelog - upload to PyPI , TestPyPI , or equivalent < sup > 3 < /sup > - have uploaded a version that an end user can install with a clean installation of Python 3.10+ , e.g . by running ` pip install pg4n ` or equivalent < sup > 4 < /sup > - as per good programming practices , ` pg4n -h ` or ` pg4n -- help ` should give info required to get pg4n running < sup > 1 < /sup > Alternative strategy : push only releases/tags ? < sup > 2 < /sup > Consider if a short git hash suffices , ` < major > . < minor > . < patch > ` might not be too feasible to enact automatically . < sup > 3 < /sup > Idea : upload GitHub releases to PyPI , and merges to ` main ` to TestPyPI ? This way we can test the end user installation experience in advance through TestPyPI . < sup > 4 < /sup > ~~Also look into whether we can bundle a PostgreSQL instance alongside pg4n.~~ Nay by customer . -- - In case more dev hours can be expended : distribute man pages ? https : //github.com/pypa/packaging-problems/issues/72",Incorporate automatic deployment into the CI/CD pipeline,Merge pull request # 85 from Project-C-SQL/feat/cd-publish,"version = `` 0.1.1 '' name : Wait For Other Pipelines env : with : version = `` 0.1.2 '' uses : ./.github/actions/install shell : bash # # # # Versioning else PYPI_USER : __token__ # Run PyTest publish : # ! /usr/bin/env bash [ Versioning ] ( # versioning ) # or use -- repository testpypi ? poetry version $ ( poetry version -- short ) -dev. $ GITHUB_RUN_NUMBER step-name : `` Wait For Other Pipelines '' runs-on : ubuntu-latest # in case collisions etc . occur run : | # Publish to PyPI GITHUB_TOKEN : $ { { secrets.GITHUB_TOKEN } } See version history [ here ] ( https : //pypi.org/project/pg4n/ # history ) . PYPI_PASS : $ { { secrets.PYPI_TOKEN } } runs-on : ubuntu-22.04 poetry publish -- no-interaction -- build -u $ PYPI_USER -p $ PYPI_PASS echo -e `` \nPublishing to version ref ' $ ( poetry version -- short ) ' ... \n\n '' poetry version $ ( poetry version -- short ) . $ GITHUB_RUN_NUMBER # https : //github.com/python-poetry/poetry/issues/3670 # issuecomment-776462445 scripts/cd-publish.sh fi needs : pytest You can bump the version number automatically with ` poetry version patch ` , ` poetry version minor ` , etc . See ` poetry version -h ` . if [ `` $ GITHUB_REF '' = `` refs/heads/main '' ] ; then # ( requires a testpypi setup ) steps : # based on :","['.github/workflows/ci-cd.yml', '.github/workflows/grade.yml', '.github/workflows/pytest.yml', '.github/workflows/sphinx.yml', 'README.md', 'pyproject.toml', 'scripts/cd-publish.sh']",2022-11-07 12:32:45+00:00,2022-11-22 15:15:02+00:00,2022-11-22 17:15:00+02:00
61,7a2404b05defc51c519424b9b8ecfc2de17e58a5,1.0231576197838876e-05,1,,Warning message levels ?,Merge pull request # 78 from Project-C-SQL/feat/config,"try : f '' warning : bad warning name or value in line { line_number } : ' { output_line } ' in configuration file : ' { self.file.name } ' '' , CONFIG_FILE_NAME = `` pg4n.conf '' /etc/pg4n/config , $ XDG_CONFIG_HOME/pg4n/config , or if if match : = ConfigParser._empty_line_matcher.match ( line ) : ) # # # # # # # # # # # # # # # # # # # # # # INNERORDERBY true # Contains all the key-value pairs meaningful in a config file . with TemporaryFile ( buffering=0 ) as tmp_file : seen_option_lines = `` '' self.file : TextIO = file if new_config_values is not None : for k , v in new_config_values.items ( ) : # line 1 : 'ImpliedExpression false ' ImpliedExpression : bool if os.path.isfile ( custom_config_home_path ) : def __init__ ( self , file : TextIO ) : fields in ConfigValues class . def _optval_to_bool ( self , optval : str ) - > bool : for ctx in filter ( lambda x : x.key == key , seen_option_contexts ) : return None # As a Last resort , we check the current directory for a config file . # line 10 : 'InnerOrderBy true ' # `` '' '' seen_option_contexts : list [ SeenOptionContext ] = [ ] return field true_values = ( `` true '' , `` 1 '' , `` yes '' ) $ XDG_CONFIG_HOME is not set , from $ HOME/.config/pg4n/config , if isinstance ( line , bytes ) : new_config_values : ConfigValues = config_parser.parse ( ) return True return config_values home = getenv ( `` HOME '' ) key = self._convert_from_anycase_to_propercase ( optname ) The configuration files are read in order from : # warning_matcher = re.compile ( \ for line_number , line in enumerate ( self.file.readlines ( ) ) : with open ( config_fname , `` r '' ) as config_file : seen_option_lines += f '' line { ctx.line_number } : ' { ctx.line } '\n '' tmp_file.seek ( 0 ) _option_matcher : re.Pattern = re.compile ( class ConfigReader : if anycase_key.lower ( ) == field.lower ( ) : xdg_config_home = getenv ( `` XDG_CONFIG_HOME '' ) config_values : Optional [ ConfigValues ] = parser.parse ( ) config_fnames = [ ] CONFIG = `` '' '' ImpliedExpression 0 # line 5 : 'InnerOrderBy true ' def _convert_from_anycase_to_propercase ( self , anycase_key : str ) - > str : # Needed for bytes containing files # # 3 # # jkelm el el e convert that user written value to the proper one that matches the multiply_defined_options.add ( key ) cwd_config_path = cwd + `` / '' + CONFIG_FILE_NAME f '' warning : option ' { key } ' is set multiple times\n { seen_option_lines } in configuration file : ' { self.file.name } ' '' , # line 6 : 'InnerOrderBy true ' def test_parse ( ) : assert config_values is not None tmp_file.flush ( ) return False else : multiply_defined_options = set ( ) if os.path.isfile ( etc_config_path ) : config_fnames.append ( cwd_config_path ) if optname.lower ( ) in optnames : from typing import Optional , TextIO config_values [ k ] = v except Exception as e : continue Reads config values from file givein in __init__ . line_number : int innerorderby true except Exception as e : if xdg_config_home : ) optnames = [ x.lower ( ) for x in ConfigValues.__annotations__.keys ( ) ] ) output_line = line.rstrip ( `` \n '' ) custom_config_home_path = xdg_config_home + `` / '' + CONFIG_FILE_NAME # This is the matching output of running the program that reads only 1 config import re SubquerySelect : bool r '' \s * ( ? P < optname > \w+ ) \s+ ( ? P < optval > 1|0|true|false|yes|no ) \s * $ '' , # ImpliedExpression 1 if os.path.isfile ( cwd_config_path ) : config_fnames.append ( etc_config_path ) ImpliedExpression yes pass # file=sys.stderr , cwd = os.getcwd ( ) optname = match.group ( `` optname '' ) flags=re.IGNORECASE , # configuration file output is not tested because its system dependent from dataclasses import dataclass config_values : ConfigValues = { } `` `` '' if match : = ConfigParser._comment_matcher.match ( line ) : # To make this work with bytes objects like TemporaryFile contents if optval.lower ( ) in false_values : assert config_values [ `` CmpDomains '' ] == False CmpDomains false # def test_multiple_option_definition_warings ( ) : try : else : import os.path config_fnames.append ( home_config_path ) InnerOrderBy true iNnErOrDeRbY true # line 8 : 'InnerOrderBy true ' # TODO : The actual test _comment_matcher : re.Pattern = re.compile ( r '' ^\s * # + . * $ '' ) f '' warning : unable to parse line { line_number } : ' { output_line } ' in configuration file : ' { self.file.name } ' '' , for key in multiply_defined_options : assert config_values [ `` SubquerySelect '' ] == False f '' error : unable to get current working directory ' { e } ' '' , file=sys.stderr from .config_values import ConfigValues for field in fields : # ) for config_fname in config_fnames : if match : = ConfigParser._option_matcher.match ( line ) : line = bytes.decode ( line , `` utf-8 '' ) return config_values if len ( config_values ) > 0 else None ) home_config_path = home + `` /.config/ '' + CONFIG_FILE_NAME Converts config file option value string into bool . def parse ( self ) - > Optional [ ConfigValues ] : InnerOrderBy : bool from .config_parser import ConfigParser # # # # line 2 : 'ImpliedExpression 1 ' # This is the config file Excepts only valid option values . f '' error : unable to read config file : ' { config_fname } ' '' , ) class SeenOptionContext : file=sys.stderr , # line 7 : 'InnerOrderBy true ' line : str config_parser = ConfigParser ( config_file ) self.file.seek ( 0 ) if optval.lower ( ) in true_values : tmp_file.write ( bytes ( CONFIG , `` utf-8 '' ) ) file=sys.stderr , if key in [ x.key for x in seen_option_contexts ] : # in configuration file : ' . * ' # file CONFIG Users can write option values case-insensitively . We still need to etc_config_path = `` /etc/ '' + CONFIG_FILE_NAME # # # # # # # # # # Not so brilliant computational complexity if len ( config_fnames ) == 0 : # SubquerySelect yes class ConfigValues ( TypedDict ) : ) def read ( self ) - > Optional [ ConfigValues ] : f '' error : unable to read config file : ' { config_fname } ' [ str ( { e.errno } ) ] '' , SubquerySelect 0 # The following stuff is for improved error messages from .. config_values import ConfigValues line = str ( line ) fields = ConfigValues.__annotations__.keys ( ) CmpDomains : bool parser = ConfigParser ( tmp_file ) def __init__ ( self ) : print ( import sys # line 4 : 'InnerOrderBy true ' config_values [ key ] = self._optval_to_bool ( assert False , f '' { e } '' from typing import Optional # CONFIG1 = `` '' '' ImpliedExpression false Assumes that anycase_key matches some option name case-insensitively . else : _empty_line_matcher : re.Pattern = re.compile ( r '' ^\s * $ '' ) config_fnames.append ( custom_config_home_path ) assert config_values [ `` ImpliedExpression '' ] == True # warning : option 'ImpliedExpression ' is set multiple times if os.path.isfile ( home_config_path ) : str ( match.group ( `` optval '' ) ) from tempfile import TemporaryFile key : str each new value introduced in latter files overriding the previous value . from .. config_parser import ConfigParser from typing import TypedDict print ( # InnerOrderBy true class ConfigParser : from os import getcwd , getenv false_values = ( `` false '' , `` 0 '' , `` no '' ) # CmpDomains false SeenOptionContext ( return False # Gives too many false positives output_line = line.rstrip ( `` \n '' ) seen_option_contexts.append ( `` `` '' assert config_values [ `` InnerOrderBy '' ] == True if hasattr ( e , `` errno '' ) : else : key=key , line=line.rstrip ( `` \n '' ) , line_number=line_number print (","['src/pg4n/config_parser.py', 'src/pg4n/config_reader.py', 'src/pg4n/config_values.py', 'src/pg4n/test/test_config_parser.py']",2022-11-08 09:23:02+00:00,2022-11-22 10:09:25+00:00,2022-11-21 22:39:05+02:00
70,9e87043b619778dee4903f22deeda35ed41af442,2.471053267072421e-05,1,,Detect strange HAVING clause without GROUP BY ( e32 per Brass ),Merge pull request # 71 from Project-C-SQL/feat/strange-having,"insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 29 , 217.18 , 124 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 104 , 97.04 , 11 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 88 , 210.95 , 158 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 1 , 535.36 , 111 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 202 , 'Sonja ' , 'Pentycross ' , ' B ' , 'Carthaette ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 172 , 15.3 , 30 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 207 , 'Elise ' , 'Kamenar ' , ' C ' , 'Caswell ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 41 , 158.78 , 145 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 12 , 'Tiffi ' , 'Riolfo ' , ' C ' , 'Ada ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 205 , 'Orlan ' , 'Kynder ' , ' C ' , 'Cassandra ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 248 , 321.97 , 195 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 242 , 356.69 , 244 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 210 , 332.45 , 47 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 79 , 94.87 , 194 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 118 , 23.96 , 195 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 1 , 'Josi ' , 'Grimsell ' , ' B ' , 'Aaron ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 68 , 73.27 , 189 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 117 , 23.13 , 46 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 155 , 274.14 , 151 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 60 , 'Sibyl ' , 'Thoms ' , ' C ' , 'Almira ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 197 , 'Missie ' , 'Fealty ' , ' C ' , 'Carol ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 42 , 561.85 , 222 ) ; parsed_sql = sql_parser.parse_one ( sql_statement ) insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 112 , 38.97 , 239 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 187 , 271.52 , 242 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 83 , 451.45 , 203 ) ; , PRIMARY KEY ( order_id ) import sqlglot.expressions as exp insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 27 , 'Callean ' , 'Werlock ' , ' C ' , 'Aileen ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 183 , 546.08 , 88 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 36 , 'Bendite ' , 'Morfett ' , ' B ' , 'Aleksandr ' ) ; has_group_by = len ( list ( self.parsed_sql.find_all ( exp.Group ) ) ) ! = 0 insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 198 , 'Kellby ' , 'Threlfall ' , ' C ' , 'Carolann ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 201 , 411.07 , 202 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 20 , 'Robbi ' , ' O '' Caherny ' , ' B ' , 'Adelphia ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 179 , 'Daphne ' , 'Kells ' , ' C ' , 'Broderick ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 248 , 'Norby ' , 'Biernacki ' , ' C ' , 'Clementine ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 173 , 297.4 , 85 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 166 , 95.01 , 189 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 97 , 'Germain ' , 'Haly ' , ' B ' , 'Archilles ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 96 , 'Tiertza ' , 'Bunford ' , ' C ' , 'Archibald ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 119 , 579.12 , 43 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 97 , 313.39 , 241 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 135 , 574.1 , 222 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 169 , 'Elsbeth ' , 'Nucciotti ' , ' B ' , 'Bradley ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 174 , 'Carolyn ' , 'Quinlan ' , ' C ' , 'Brian ' ) ; from pytest_postgresql import factories insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 110 , 144.28 , 59 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 80 , 17.1 , 21 ) ; def __init__ ( self , parsed_sql : exp.Expression , qep_analysis : QEPAnalysis ) : has_having = len ( list ( self.parsed_sql.find_all ( exp.Having ) ) ) ! = 0 insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 227 , 189.25 , 230 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 198 , 120.47 , 95 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 4 , 'Nancey ' , 'Fawlkes ' , ' C ' , 'Abel ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 152 , 'Towny ' , 'Middell ' , ' B ' , 'Bert ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 56 , 'Kaitlin ' , 'Payle ' , ' B ' , 'Allyson ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 194 , 'Corilla ' , 'Aldwinckle ' , ' C ' , 'Carmellia ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 222 , 416.65 , 59 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 223 , 200.44 , 47 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 114 , 339.9 , 108 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 2 , 'Tomlin ' , 'Nozzolinii ' , ' B ' , 'Abbigail ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 90 , 169.25 , 30 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 11 , 'Amby ' , 'Ligoe ' , ' C ' , 'Absalom ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 63 , 'Gratia ' , 'Moss ' , ' B ' , 'Althea ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 70 , 'Carmela ' , 'Sedgeworth ' , ' C ' , 'Amos ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 104 , 'Timofei ' , 'Grene ' , ' B ' , 'Armena ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 115 , 351.68 , 153 ) ; assert checker is not None insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 171 , 175.72 , 249 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 47 , 'Tracey ' , 'Sauvan ' , ' B ' , 'Alice ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 102 , 158.53 , 220 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 63 , 542.48 , 52 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 76 , 281.92 , 183 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 62 , 418.98 , 60 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 134 , 296.72 , 222 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 120 , 454.18 , 214 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 239 , 327.06 , 34 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 25 , 83.54 , 79 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 40 , 33.89 , 23 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 195 , 504.28 , 117 ) ; SELECT ( 1 , 2 , 3 ) ; '' '' '' insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 34 , 64.76 , 13 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 109 , 'Marquita ' , 'Impy ' , ' B ' , 'Aron ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 151 , 'Prentiss ' , 'Filby ' , ' B ' , 'Berney ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 216 , 'Elsbeth ' , 'MacGaughie ' , ' B ' , 'Charles ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 225 , 'Egbert ' , 'Vasyunin ' , ' B ' , 'Chloe ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 69 , 'Maryjo ' , 'Pink ' , ' C ' , 'Amelia ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 241 , 296.03 , 169 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 111 , 490.85 , 191 ) ; SELECT customer_id , SUM ( order_total_eur ) insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 161 , 184.39 , 94 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 72 , 539.87 , 62 ) ; sql_statement = SQL_NEITHER_GROUP_BY_OR_HAVING insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 195 , 'Dewey ' , 'Bottom ' , ' C ' , 'Carmelo ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 80 , 'Petey ' , 'Colloby ' , ' B ' , 'Ann ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 222 , 'Hazel ' , 'Rushforth ' , ' C ' , 'Chester ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 238 , 448.86 , 16 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 53 , 'Riva ' , 'Scawen ' , ' C ' , 'Allen ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 145 , 112.51 , 162 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 58 , 'Lettie ' , 'Coffin ' , ' B ' , 'Almena ' ) ; sql_statement = SQL_GROUP_BY_WITH_HAVING insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 73 , 144.33 , 52 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 59 , 'Lin ' , 'Race ' , ' B ' , 'Almina ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 209 , 203.86 , 244 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 203 , 545.33 , 116 ) ; , PRIMARY KEY ( customer_id ) insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 127 , 451.77 , 17 ) ; SQL_GROUP_BY_WITH_HAVING = f '' '' '' insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 113 , 'Dania ' , 'Foxton ' , ' C ' , 'Arthusa ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 146 , 184.13 , 22 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 170 , 539.11 , 92 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 94 , 'Halimeda ' , 'Freak ' , ' B ' , 'Arabelle ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 148 , 'Lidia ' , 'Quinane ' , ' C ' , 'Benjamin ' ) ; , nickname VARCHAR ( 20 ) NOT NULL insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 100 , 424.83 , 50 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 81 , 'Sharline ' , 'Rosenwald ' , ' B ' , 'Anna ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 213 , 329.78 , 105 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 137 , 417.16 , 215 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 231 , 'Calhoun ' , 'BoHlingolsen ' , ' C ' , 'Christina ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 31 , 394.48 , 62 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 15 , 47.79 , 248 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 167 , 'Ninnette ' , 'Steere ' , ' C ' , 'Brad ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 17 , 'Carlyle ' , 'Zimek ' , ' B ' , 'Adelbert ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 235 , 'Justus ' , 'Barthrup ' , ' B ' , 'Christy ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 142 , 509.25 , 190 ) ; conn : Connection = psycopg.connect ( * * kwargs ) insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 220 , 367.15 , 163 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 220 , 'Kylen ' , 'Bewicke ' , ' B ' , 'Cheryl ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 180 , 'Leonelle ' , 'Chiommienti ' , ' B ' , 'Caitlin ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 52 , 81.47 , 212 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 90 , 'Forest ' , 'Trim ' , ' B ' , 'Appoline ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 221 , 'Cassondra ' , 'Mattingson ' , ' B ' , 'Chesley ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 8 , 424.8 , 244 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 229 , 89.34 , 147 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 21 , 'Nady ' , 'Lempertz ' , ' B ' , 'Adolphus ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 67 , 550.21 , 63 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 103 , 'Ede ' , 'Golden of Ireland ' , ' C ' , 'Armanda ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 89 , 556.68 , 74 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 162 , 168.92 , 27 ) ; CHECK ( type IN ( ' C ' , ' B ' ) ) -- C = customer , B = business insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 76 , 'Ardys ' , 'Currm ' , ' B ' , 'Andriane ' ) ; cur.execute ( insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 247 , 'Dulcie ' , 'Crutchley ' , ' B ' , 'Clement ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 163 , 61.42 , 69 ) ; qep_analysis = qep_parser.parse ( sql_statement ) ORDERS_TABLE_NAME = `` strange_having_test_table_orders '' def load_database ( * * kwargs ) : insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 182 , 'Sasha ' , 'Stiffkins ' , ' C ' , 'Caldonia ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 49 , 'Theodosia ' , 'Rosson ' , ' B ' , 'Aline ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 55 , 'Terrill ' , 'Syde ' , ' B ' , 'Allison ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 5 , 'Callida ' , 'Tomasello ' , ' B ' , 'Abiel ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 154 , 291.52 , 54 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 191 , 'Frankie ' , 'Canny ' , ' B ' , 'Candace ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 10 , 'Sonnie ' , 'Kelling ' , ' B ' , 'Abram ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 68 , 'Leisha ' , 'Darlington ' , ' C ' , 'Ambrose ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 212 , 179.55 , 180 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 226 , 212.04 , 28 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 229 , 'Melessa ' , 'MacAleese ' , ' C ' , 'Christiana ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 140 , 'Suki ' , 'Flinn ' , ' B ' , 'Bea ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 88 , 'Sansone ' , 'Copsey ' , ' C ' , 'Antonia ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 224 , 293.35 , 186 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 50 , 'Anne-marie ' , 'Mounsie ' , ' B ' , 'Alison ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 204 , 'Cassy ' , 'Pearcehouse ' , ' C ' , 'Casper ' ) ; load= [ load_database ] , insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 188 , 'Ferguson ' , 'Mackriell ' , ' B ' , 'Cameron ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 48 , 'Marve ' , 'Eykel ' , ' C ' , 'Alicia ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 208 , 'Legra ' , 'Drought ' , ' C ' , 'Catherine ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 249 , 'Rhoda ' , 'Leheude ' , ' C ' , 'Cliff ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 77 , 'Maegan ' , 'Wheldon ' , ' C ' , 'Angela ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 181 , 'Daria ' , 'Wistance ' , ' C ' , 'Caitlyn ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 156 , 'Allistir ' , 'Frary ' , ' C ' , 'Beth ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 72 , 'Nadiya ' , 'Gingles ' , ' B ' , 'Anderson ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 7 , 183.92 , 236 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 7 , 'Lorin ' , 'Dollimore ' , ' C ' , 'Abijah ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 79 , 'Preston ' , 'Groves ' , ' B ' , 'Angelina ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 144 , 504.73 , 154 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 219 , 594.84 , 121 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 141 , 183.27 , 44 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 217 , 'Lucy ' , 'Durtnell ' , ' C ' , 'Charlie ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 140 , 297.41 , 101 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 215 , 'Nollie ' , 'Jemmett ' , ' B ' , 'Charity ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 85 , 404.96 , 79 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 27 , 137.86 , 21 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 240 , 384.87 , 107 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 115 , 'Shirl ' , 'Pilpovic ' , ' C ' , 'Asahel ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 96 , 311.78 , 173 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 206 , 226.62 , 228 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 155 , 'Murdock ' , 'Dix ' , ' C ' , 'Bess ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 38 , 366.31 , 59 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 19 , 107.53 , 94 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 138 , 'Ainsley ' , 'Wraighte ' , ' C ' , 'Barticus ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 176 , 'Marylou ' , 'Guilloton ' , ' C ' , 'Bridget ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 233 , 87.21 , 179 ) ; GROUP BY customer_id insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 177 , 334.0 , 167 ) ; CREATE TABLE { ORDERS_TABLE_NAME } ( f '' '' '' insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 178 , 563.08 , 161 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 30 , 'Colin ' , 'Jansie ' , ' C ' , 'Alastair ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 160 , 144.6 , 82 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 153 , 'Alfy ' , 'McCahill ' , ' B ' , 'Bertha ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 124 , 552.02 , 191 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 114 , 'Fara ' , 'Arkil ' , ' B ' , 'Arzada ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 206 , 'Ardyth ' , 'Conningham ' , ' B ' , 'Cassidy ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 108 , 294.25 , 131 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 46 , 362.72 , 240 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 29 , 'Dawna ' , 'Knipe ' , ' C ' , 'Alanson ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 111 , 'Torey ' , 'Sessuns ' , ' B ' , 'Artemus ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 2 , 409.8 , 217 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 112 , 'Nanci ' , 'Byrd ' , ' C ' , 'Arthur ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 126 , 384.61 , 226 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 182 , 478.47 , 70 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 81 , 490.65 , 41 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 197 , 529.63 , 46 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 232 , 'Maritsa ' , 'Cowpland ' , ' C ' , 'Christine ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 230 , 'Cordell ' , 'Bineham ' , ' B ' , 'Christiano ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 168 , 137.02 , 109 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 11 , 88.19 , 50 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 130 , 'Rora ' , 'Adcock ' , ' C ' , 'Babs ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 122 , 'Myrlene ' , 'Worcs ' , ' B ' , 'Augusta ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 217 , 302.24 , 189 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 151 , 221.16 , 212 ) ; CREATE TABLE { CUSTOMERS_TABLE_NAME } ( insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 60 , 473.05 , 208 ) ; warning_msg = checker.check ( ) insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 23 , 236.48 , 51 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 200 , 'Fanni ' , 'Iacopetti ' , ' C ' , 'Carolyn ' ) ; warning_msg = `` Warning : HAVING without GROUP BY [ pg4n : :StrangeHaving ] '' insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 235 , 230.72 , 168 ) ; ) insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 185 , 'Tanitansy ' , 'Headington ' , ' C ' , 'Calista ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 53 , 592.15 , 207 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 211 , 399.2 , 138 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 131 , 'Ive ' , 'Matches ' , ' B ' , 'Barbara ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 26 , 'Jenica ' , 'Martina ' , ' C ' , 'Agnes ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 202 , 99.52 , 171 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 3 , 189.43 , 19 ) ; FROM { ORDERS_TABLE_NAME } import psycopg insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 211 , 'Jobi ' , 'Bails ' , ' B ' , 'Cecilia ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 226 , 'Emelina ' , 'Ayliff ' , ' B ' , 'Chris ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 121 , 'Clywd ' , 'Stokey ' , ' B ' , 'August ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 107 , 'Celisse ' , 'Rubra ' , ' B ' , 'Arminta ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 149 , 'Erik ' , 'Cushe ' , ' B ' , 'Benjy ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 44 , 537.56 , 2 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 239 , 'Atalanta ' , 'Girdler ' , ' C ' , 'Claire ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 56 , 501.06 , 129 ) ; , customer_id INT NOT NULL insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 250 , 367.56 , 214 ) ; '' '' '' from .. qepparser import QEPParser insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 31 , 'Dario ' , 'Siehard ' , ' C ' , 'Alazama ' ) ; , FOREIGN KEY ( customer_id ) insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 61 , 343.91 , 223 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 42 , 'Pyotr ' , 'Feldhorn ' , ' C ' , 'Alexis ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 203 , 'Rory ' , 'Hallatt ' , ' C ' , 'Casey ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 228 , 'Rudd ' , 'Ames ' , ' B ' , 'Christian ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 61 , 'Blisse ' , 'Dillway ' , ' C ' , 'Alonzo ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 164 , 'Abel ' , 'Bezants ' , ' C ' , 'Bob ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 65 , 318.64 , 6 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 136 , 'Aretha ' , 'Arias ' , ' C ' , 'Bart ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 152 , 291.54 , 10 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 69 , 266.3 , 39 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 196 , 'Louisa ' , 'Matasov ' , ' B ' , 'Carmon ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 160 , 'Patti ' , 'Louis ' , ' C ' , 'Biddie ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 48 , 199.52 , 234 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 236 , 485.18 , 167 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 214 , 'Chalmers ' , 'Britton ' , ' C ' , 'Celinda ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 189 , 164.91 , 68 ) ; if not has_strange_having : assert warning_msg is None insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 210 , 'Pamelina ' , 'Vittery ' , ' C ' , 'Cathy ' ) ; # pylint : disable=line-too-long insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 101 , 328.66 , 189 ) ; HAVING MIN ( order_total_eur ) < MAX ( order_total_eur ) ; '' '' '' , fname VARCHAR ( 50 ) NOT NULL insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 62 , 'Seline ' , 'McGray ' , ' B ' , 'Alphinias ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 65 , 'Glenna ' , 'Alastair ' , ' C ' , 'Alyssa ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 75 , 'Erma ' , 'Cranstone ' , ' B ' , 'Andrew ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 231 , 51.77 , 118 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 129 , 426.3 , 136 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 66 , 'Sadella ' , 'Boxhall ' , ' B ' , 'Alzada ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 37 , 'Talbot ' , 'Keddey ' , ' B ' , 'Aleva ' ) ; def qep_parser ( postgresql : Connection ) : insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 98 , 177.22 , 86 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 122 , 406.1 , 80 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 204 , 212.04 , 203 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 227 , 'Jeralee ' , 'Atwill ' , ' C ' , 'Christa ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 221 , 487.39 , 227 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 186 , 'Chloette ' , 'Ratt ' , ' B ' , 'Calpurnia ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 209 , 'Dulcea ' , 'Akister ' , ' C ' , 'Cathleen ' ) ; from typing import Optional insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 4 , 144.14 , 157 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 71 , 175.29 , 115 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 218 , 389.51 , 177 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 183 , 'Harvey ' , 'Skinn ' , ' B ' , 'Caleb ' ) ; SQL_GROUP_BY_WITHOUT_HAVING = f '' '' '' postgresql = factories.postgresql ( `` factory '' ) insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 119 , 'Gregg ' , 'Lazenbury ' , ' B ' , 'Aubrey ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 18 , 'Odie ' , 'Rowling ' , ' C ' , 'Adele ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 236 , 'Garnette ' , 'Tabrett ' , ' C ' , 'Cicely ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 146 , 'Dunstan ' , 'Cressey ' , ' B ' , 'Bella ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 118 , 'Hermy ' , 'Whieldon ' , ' B ' , 'Ashley ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 237 , 293.23 , 140 ) ; sql_statement = SQL_HAVING_WITHOUT_GROUP_BY insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 224 , 'Dayle ' , 'Eirwin ' , ' B ' , 'Chick ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 199 , 376.5 , 53 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 28 , 87.44 , 1 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 106 , 236.57 , 4 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 16 , 330.92 , 130 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 131 , 255.66 , 127 ) ; CUSTOMERS_TABLE_NAME = `` strange_having_test_table_customer '' with conn.cursor ( ) as cur : sql_statement = SQL_GROUP_BY_WITHOUT_HAVING insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 93 , 'Sashenka ' , 'Fedorski ' , ' C ' , 'Arabella ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 103 , 14.83 , 183 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 232 , 330.85 , 204 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 94 , 406.59 , 129 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 161 , 'Barron ' , 'Dishmon ' , ' B ' , 'Bill ' ) ; return None insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 10 , 414.55 , 234 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 200 , 592.16 , 137 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 71 , 'Cynthie ' , 'Rouby ' , ' B ' , 'Anastasia ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 249 , 491.05 , 63 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 116 , 'Annmarie ' , 'Errichelli ' , ' B ' , 'Asaph ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 143 , 239.98 , 109 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 244 , 273.35 , 153 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 194 , 328.76 , 41 ) ; return warning_msg insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 245 , 327.9 , 212 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 133 , 499.73 , 235 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 142 , 'Elfrieda ' , 'Cleary ' , ' C ' , 'Becca ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 64 , 'Dyan ' , 'Crosbie ' , ' B ' , 'Alverta ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 67 , 'Zsazsa ' , 'Bellocht ' , ' C ' , 'Amanda ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 134 , 'Georgetta ' , 'Crossley ' , ' B ' , 'Barnabas ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 201 , 'Arv ' , 'Spawforth ' , ' B ' , 'Carrie ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 101 , 'Hamilton ' , 'Pellew ' , ' B ' , 'Arizona ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 243 , 209.34 , 31 ) ; DROP TABLE IF EXISTS { CUSTOMERS_TABLE_NAME } ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 123 , 'Lyon ' , 'Nolleau ' , ' C ' , 'Augustina ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 43 , 'Belle ' , 'Barsham ' , ' B ' , 'Alfonse ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 205 , 508.59 , 59 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 17 , 302.31 , 225 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 99 , 354.37 , 66 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 176 , 22.8 , 175 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 3 , 'Christen ' , 'Culley ' , ' C ' , 'Abednego ' ) ; , type CHAR ( 1 ) NOT NULL insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 141 , 'Jacinta ' , 'Villiers ' , ' B ' , 'Beatrice ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 167 , 547.07 , 197 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 159 , 281.36 , 198 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 102 , 'Ricca ' , 'Rupprecht ' , ' B ' , 'Arlene ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 175 , 'Davy ' , 'Blomefield ' , ' B ' , 'Brianna ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 120 , 'Corinna ' , 'Pyburn ' , ' B ' , 'Audrey ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 162 , 'Jessee ' , 'List ' , ' B ' , 'Billy ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 157 , 477.53 , 205 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 52 , 'Gerrilee ' , 'Ackland ' , ' B ' , 'Allan ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 126 , 'Lilllie ' , 'Annis ' , ' C ' , 'Aurelia ' ) ; def sql_parser ( postgresql : Connection ) : insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 109 , 170.82 , 206 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 24 , 'Jacinthe ' , 'Kleeman ' , ' B ' , 'Adrienne ' ) ; HAVING SUM ( order_total_eur ) > 150 ; '' '' '' insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 91 , 'Bobby ' , 'Fortesquieu ' , ' B ' , 'Aquilla ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 38 , 'Web ' , 'Catterill ' , ' B ' , 'Alex ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 51 , 244.27 , 119 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 75 , 238.65 , 203 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 184 , 'Louise ' , 'Jansey ' , ' C ' , 'California ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 54 , 'Malchy ' , 'Hearty ' , ' B ' , 'Allisandra ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 208 , 344.91 , 150 ) ; ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 137 , 'Lucilia ' , 'Bentick ' , ' C ' , 'Bartholomew ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 25 , 'Neely ' , 'Merrydew ' , ' B ' , 'Agatha ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 41 , 'Reilly ' , 'Kennler ' , ' B ' , 'Alexandria ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 93 , 452.63 , 115 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 240 , 'Britte ' , 'Muge ' , ' B ' , 'Clara ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 121 , 132.25 , 50 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 230 , 389.39 , 247 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 154 , 'Conney ' , 'Riteley ' , ' C ' , 'Bertram ' ) ; self.qep_analysis : QEPAnalysis = qep_analysis insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 241 , 'Sigismund ' , 'Mowsdill ' , ' B ' , 'Clare ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 132 , 'Olympe ' , 'Faber ' , ' B ' , 'Barbery ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 106 , 'Merrily ' , 'Coundley ' , ' C ' , 'Arminda ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 242 , 'Brenden ' , 'Simmons ' , ' B ' , 'Clarence ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 218 , 'Raffarty ' , 'Sweeney ' , ' C ' , 'Charlotte ' ) ; return SqlParser ( db_connection=postgresql ) insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 173 , 'Kristopher ' , 'Mackelworth ' , ' B ' , 'Brenda ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 187 , 'Donall ' , 'Casolla ' , ' B ' , 'Calvin ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 107 , 23.63 , 179 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 186 , 561.85 , 156 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 172 , 'Pammi ' , 'Codling ' , ' B ' , 'Breeanna ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 14 , 586.06 , 181 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 83 , 'Wolf ' , 'Brenton ' , ' B ' , 'Annette ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 98 , 'Elfreda ' , 'Tome ' , ' C ' , 'Ariadne ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 223 , 'Annice ' , 'Haynes ' , ' B ' , 'Chet ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 147 , 180.39 , 2 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 57 , 349.14 , 58 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 129 , 'Ashla ' , 'De-Ville ' , ' C ' , 'Bab ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 45 , 46.05 , 177 ) ; , sname VARCHAR ( 50 ) NOT NULL insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 78 , 'Matilde ' , 'Froome ' , ' B ' , 'Angelica ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 212 , 'Annecorinne ' , 'Soles ' , ' B ' , 'Cedric ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 87 , 441.16 , 191 ) ; class StrangeHavingChecker : from .qepparser import QEPAnalysis insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 145 , 'Adena ' , 'Wenham ' , ' C ' , 'Belinda ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 91 , 331.76 , 115 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 84 , 396.02 , 111 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 138 , 223.81 , 183 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 139 , 'Kelsi ' , 'Suddell ' , ' C ' , 'Bazaleel ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 54 , 591.44 , 145 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 33 , 'Amble ' , 'Jewes ' , ' B ' , 'Alberta ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 117 , 'Marysa ' , 'Wadman ' , ' C ' , 'Asenath ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 32 , 331.93 , 144 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 234 , 'Cayla ' , 'Statter ' , ' B ' , 'Christopher ' ) ; Returns warning message if there exists HAVING without a GROUP BY , insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 123 , 370.87 , 115 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 165 , 84.61 , 1 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 39 , 42.62 , 95 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 188 , 495.68 , 39 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 215 , 515.79 , 96 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 192 , 'Dudley ' , 'Vesco ' , ' B ' , 'Carlotta ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 13 , 'Marion ' , 'Penelli ' , ' B ' , 'Adaline ' ) ; ) insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 105 , 107.29 , 12 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 125 , 'Leo ' , 'Creaney ' , ' B ' , 'Augustus ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 18 , 438.38 , 26 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 247 , 123.55 , 179 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 163 , 'Gerhardt ' , 'Simcock ' , ' B ' , 'Blanche ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 30 , 435.57 , 105 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 214 , 520.52 , 98 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 150 , 'Agnesse ' , 'Liebmann ' , ' B ' , 'Bernard ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 33 , 140.92 , 236 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 21 , 471.12 , 179 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 28 , 'Nanice ' , 'MacMaster ' , ' B ' , 'Alan ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 144 , 'Ange ' , 'Pasterfield ' , ' C ' , 'Bedelia ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 95 , 'Amandie ' , 'Botham ' , ' B ' , 'Araminta ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 128 , 415.86 , 243 ) ; SELECT 'T ' AS result insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 159 , 'Carilyn ' , 'Vinecombe ' , ' B ' , 'Bezaleel ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 193 , 449.91 , 213 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 191 , 183.55 , 142 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 113 , 305.06 , 123 ) ; from .. strange_having_checker import StrangeHavingChecker insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 6 , 'Daisey ' , 'Hamill ' , ' B ' , 'Abigail ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 87 , 'Nanette ' , 'McElwee ' , ' B ' , 'Antoinette ' ) ; DROP TABLE IF EXISTS { ORDERS_TABLE_NAME } ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 238 , 'Gregor ' , 'Crinion ' , ' B ' , 'Cindy ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 110 , 'Donall ' , 'Labrenz ' , ' B ' , 'Artelepsa ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 12 , 591.72 , 143 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 174 , 597.34 , 184 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 136 , 411.87 , 10 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 99 , 'Phineas ' , 'Yuryaev ' , ' B ' , 'Arielle ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 179 , 453.95 , 43 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 14 , 'Davon ' , 'Burris ' , ' C ' , 'Addison ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 130 , 575.58 , 235 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 193 , 'Brucie ' , 'Coning ' , ' C ' , 'Carlton ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 58 , 10.24 , 74 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 156 , 130.63 , 188 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 9 , 'Lester ' , 'Markus ' , ' C ' , 'Abraham ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 150 , 439.75 , 18 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 250 , 'Langston ' , 'Prosser ' , ' C ' , 'Clifford ' ) ; GROUP BY customer_id ; '' '' '' insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 77 , 335.23 , 149 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 125 , 170.66 , 131 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 149 , 340.62 , 215 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 177 , 'Genvieve ' , 'Marthen ' , ' B ' , 'Brittany ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 23 , 'Jeanette ' , 'Fincher ' , ' B ' , 'Adriane ' ) ; has_strange_having = has_having and not has_group_by insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 20 , 207.6 , 9 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 92 , 156.72 , 192 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 24 , 538.88 , 38 ) ; customer_id INT insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 233 , 'Tibold ' , 'Sleigh ' , ' C ' , 'Christoph ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 153 , 350.78 , 247 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 171 , 'Fredrick ' , 'Matuszynski ' , ' C ' , 'Breanna ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 127 , 'Rhoda ' , 'Kurton ' , ' C ' , 'Avarilla ' ) ; from .. sqlparser import SqlParser assert warning_msg is not None insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 148 , 203.36 , 180 ) ; factory = factories.postgresql_proc ( insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 189 , 'Merle ' , 'Erridge ' , ' C ' , 'Camille ' ) ; return QEPParser ( conn=postgresql ) insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 57 , 'Vita ' , 'Dunnett ' , ' B ' , 'Allyssa ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 181 , 150.37 , 69 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 243 , 'Hannah ' , 'Mattheis ' , ' C ' , 'Clarinda ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 139 , 441.16 , 97 ) ; otherwise None . insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 9 , 519.43 , 175 ) ; self.parsed_sql : exp.Expression = parsed_sql order_id INT insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 132 , 488.95 , 234 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 199 , 'Matilda ' , 'Malenoir ' , ' C ' , 'Caroline ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 44 , 'Buffy ' , ' O '' Cridigan ' , ' B ' , 'Alfred ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 225 , 26.43 , 228 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 185 , 505.7 , 49 ) ; conn.commit ( ) insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 108 , 'Janene ' , 'Motten ' , ' C ' , 'Arnold ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 178 , 'Rogers ' , 'Plose ' , ' B ' , 'Brittney ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 5 , 582.52 , 172 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 175 , 161.61 , 58 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 45 , 'Seymour ' , 'Mayer ' , ' B ' , 'Alfreda ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 158 , 65.82 , 201 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 47 , 163.79 , 141 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 135 , 'Janenna ' , 'McCamish ' , ' C ' , 'Barney ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 37 , 322.11 , 41 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 168 , 'Melicent ' , 'Cheston ' , ' B ' , 'Bradford ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 35 , 389.81 , 218 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 43 , 133.73 , 196 ) ; import pytest insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 180 , 452.67 , 234 ) ; from psycopg import Connection insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 92 , 'Raven ' , 'Eilles ' , ' C ' , 'Ara ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 234 , 254.56 , 98 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 190 , 'Kara ' , 'Backs ' , ' B ' , 'Campbell ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 124 , 'Penelope ' , 'Quadling ' , ' C ' , 'Augustine ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 237 , 'Jeramie ' , 'Gallehock ' , ' C ' , 'Cinderella ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 184 , 380.46 , 98 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 19 , 'Daphne ' , 'Bullen ' , ' B ' , 'Adeline ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 147 , 'Wilmer ' , 'MacWhan ' , ' B ' , 'Benedict ' ) ; REFERENCES { CUSTOMERS_TABLE_NAME } ( customer_id ) insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 219 , 'Adriane ' , 'Ccomini ' , ' B ' , 'Chauncey ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 244 , 'Katrine ' , 'Janiak ' , ' B ' , 'Clarissa ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 133 , 'Clementia ' , 'Fergusson ' , ' B ' , 'Barbie ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 46 , 'Mechelle ' , 'Vinick ' , ' B ' , 'Algernon ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 246 , 'Albert ' , 'Heimann ' , ' B ' , 'Cleatus ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 213 , 'Rubin ' , 'Lunney ' , ' B ' , 'Celeste ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 32 , 'Aubrie ' , 'Lockitt ' , ' C ' , 'Albert ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 22 , 193.12 , 6 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 95 , 367.31 , 48 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 59 , 141.8 , 118 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 39 , 'Tabbie ' , 'Glison ' , ' B ' , 'Alexander ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 216 , 388.15 , 142 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 86 , 537.64 , 201 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 26 , 590.52 , 50 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 70 , 596.2 , 221 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 128 , 'Jere ' , 'Cometti ' , ' B ' , 'Azariah ' ) ; def check ( self ) - > Optional [ str ] : insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 64 , 534.3 , 108 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 165 , 'Angele ' , 'Wildbore ' , ' C ' , 'Bobby ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 16 , 'Augustin ' , 'Blaxall ' , ' C ' , 'Adelaide ' ) ; checker = StrangeHavingChecker ( parsed_sql , qep_analysis ) , order_total_eur DECIMAL ( 6,2 ) NOT NULL insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 13 , 503.52 , 216 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 34 , 'Lorens ' , 'Buzin ' , ' C ' , 'Aldo ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 49 , 376.9 , 89 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 192 , 206.39 , 151 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 22 , 'Grazia ' , 'Syne ' , ' C ' , 'Adrian ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 74 , 'Giffy ' , 'Cottee ' , ' C ' , 'Andrea ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 164 , 193.39 , 169 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 6 , 132.85 , 206 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 116 , 292.86 , 97 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 86 , 'Lauren ' , 'Tolworth ' , ' B ' , 'Anthony ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 50 , 306.71 , 235 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 166 , 'Angelo ' , 'Vanstone ' , ' C ' , 'Boetius ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 35 , 'Lainey ' , 'Davidow ' , ' C ' , 'Aldrich ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 143 , 'Sasha ' , 'Eunson ' , ' C ' , 'Beck ' ) ; def test_inner_orderby ( sql_parser : SqlParser , qep_parser : QEPParser ) : insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 100 , 'Gypsy ' , 'Bottrell ' , ' C ' , 'Aristotle ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 74 , 63.02 , 117 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 73 , 'Seymour ' , 'Maffioletti ' , ' B ' , 'Andre ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 170 , 'Bard ' , 'Shaw ' , ' C ' , 'Brady ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 84 , 'Birk ' , 'Malling ' , ' C ' , 'Annie ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 89 , 'Nickie ' , 'Bloss ' , ' C ' , 'Antonio ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 36 , 225.6 , 136 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 190 , 401.19 , 88 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 85 , 'Brig ' , 'Triswell ' , ' C ' , 'Anselm ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 246 , 510.74 , 188 ) ; SQL_HAVING_WITHOUT_GROUP_BY = f '' '' '' insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 245 , 'Holly ' , 'Roy ' , ' C ' , 'Claudia ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 228 , 542.3 , 42 ) ; SQL_NEITHER_GROUP_BY_OR_HAVING = f '' '' '' insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 15 , 'Zachary ' , 'Faloon ' , ' C ' , 'Adela ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 158 , 'Anett ' , 'Hercules ' , ' B ' , 'Beverly ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 8 , 'Gasparo ' , 'Bohlje ' , ' C ' , 'Abner ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 169 , 552.88 , 241 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 207 , 205.25 , 199 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 105 , 'Cary ' , 'Sells ' , ' C ' , 'Armilda ' ) ; `` `` '' insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 51 , 'Kennan ' , 'Burstowe ' , ' B ' , 'Alixandra ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 78 , 569.4 , 99 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 196 , 259.0 , 244 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 82 , 106.39 , 237 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 157 , 'Noach ' , 'MacRitchie ' , ' C ' , 'Bethena ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 82 , 'Abey ' , 'Darridon ' , ' C ' , 'Anne ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 66 , 454.41 , 11 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 55 , 391.93 , 128 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 40 , 'Olva ' , 'Leborgne ' , ' C ' , 'Alexandra ' ) ;","['src/pg4n/strange_having_checker.py', 'src/pg4n/test/test_strange_having_checker.py']",2022-11-17 17:50:30+00:00,2022-11-21 10:02:16+00:00,2022-11-21 12:02:15+02:00
74,dd91d2f5cb68a8ada87f47034162548dafa00053,6.51922746328637e-05,1,,Detect wildcards without LIKE ( e34 per Brass ),Merge pull request # 75 from Project-C-SQL/feat/eq-wildcard,"insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 29 , 217.18 , 124 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 104 , 97.04 , 11 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 88 , 210.95 , 158 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 1 , 535.36 , 111 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 202 , 'Sonja ' , 'Pentycross ' , ' B ' , 'Carthaette ' ) ; self.parsed_sql = parsed_sql insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 172 , 15.3 , 30 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 207 , 'Elise ' , 'Kamenar ' , ' C ' , 'Caswell ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 41 , 158.78 , 145 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 12 , 'Tiffi ' , 'Riolfo ' , ' C ' , 'Ada ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 205 , 'Orlan ' , 'Kynder ' , ' C ' , 'Cassandra ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 248 , 321.97 , 195 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 242 , 356.69 , 244 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 210 , 332.45 , 47 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 79 , 94.87 , 194 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 118 , 23.96 , 195 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 1 , 'Josi ' , 'Grimsell ' , ' B ' , 'Aaron ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 68 , 73.27 , 189 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 117 , 23.13 , 46 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 155 , 274.14 , 151 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 60 , 'Sibyl ' , 'Thoms ' , ' C ' , 'Almira ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 197 , 'Missie ' , 'Fealty ' , ' C ' , 'Carol ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 42 , 561.85 , 222 ) ; parsed_sql = sql_parser.parse_one ( sql_statement ) insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 112 , 38.97 , 239 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 187 , 271.52 , 242 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 83 , 451.45 , 203 ) ; , PRIMARY KEY ( order_id ) import sqlglot.expressions as exp insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 27 , 'Callean ' , 'Werlock ' , ' C ' , 'Aileen ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 183 , 546.08 , 88 ) ; eq.left insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 36 , 'Bendite ' , 'Morfett ' , ' B ' , 'Aleksandr ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 198 , 'Kellby ' , 'Threlfall ' , ' C ' , 'Carolann ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 201 , 411.07 , 202 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 20 , 'Robbi ' , ' O '' Caherny ' , ' B ' , 'Adelphia ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 179 , 'Daphne ' , 'Kells ' , ' C ' , 'Broderick ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 248 , 'Norby ' , 'Biernacki ' , ' C ' , 'Clementine ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 173 , 297.4 , 85 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 166 , 95.01 , 189 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 97 , 'Germain ' , 'Haly ' , ' B ' , 'Archilles ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 96 , 'Tiertza ' , 'Bunford ' , ' C ' , 'Archibald ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 119 , 579.12 , 43 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 97 , 313.39 , 241 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 135 , 574.1 , 222 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 169 , 'Elsbeth ' , 'Nucciotti ' , ' B ' , 'Bradley ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 174 , 'Carolyn ' , 'Quinlan ' , ' C ' , 'Brian ' ) ; from pytest_postgresql import factories insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 110 , 144.28 , 59 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 80 , 17.1 , 21 ) ; def __init__ ( self , parsed_sql : exp.Expression , qep_analysis : QEPAnalysis ) : sql_statement = SQL_LIKE_WILDCARD_AND_EQ_WILDCARD1 insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 227 , 189.25 , 230 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 198 , 120.47 , 95 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 4 , 'Nancey ' , 'Fawlkes ' , ' C ' , 'Abel ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 152 , 'Towny ' , 'Middell ' , ' B ' , 'Bert ' ) ; # pylint : disable=line-too-long insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 56 , 'Kaitlin ' , 'Payle ' , ' B ' , 'Allyson ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 194 , 'Corilla ' , 'Aldwinckle ' , ' C ' , 'Carmellia ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 222 , 416.65 , 59 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 223 , 200.44 , 47 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 114 , 339.9 , 108 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 2 , 'Tomlin ' , 'Nozzolinii ' , ' B ' , 'Abbigail ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 90 , 169.25 , 30 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 11 , 'Amby ' , 'Ligoe ' , ' C ' , 'Absalom ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 63 , 'Gratia ' , 'Moss ' , ' B ' , 'Althea ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 70 , 'Carmela ' , 'Sedgeworth ' , ' C ' , 'Amos ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 104 , 'Timofei ' , 'Grene ' , ' B ' , 'Armena ' ) ; ) or self._is_wildcard_string_literal ( eq.right ) insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 115 , 351.68 , 153 ) ; assert checker is not None insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 171 , 175.72 , 249 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 47 , 'Tracey ' , 'Sauvan ' , ' B ' , 'Alice ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 102 , 158.53 , 220 ) ; SQL_LIKE_WILDCARD_AND_EQ_WILDCARD2 = f '' '' '' insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 63 , 542.48 , 52 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 76 , 281.92 , 183 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 62 , 418.98 , 60 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 134 , 296.72 , 222 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 120 , 454.18 , 214 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 239 , 327.06 , 34 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 25 , 83.54 , 79 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 40 , 33.89 , 23 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 195 , 504.28 , 117 ) ; SELECT ( 1 , 2 , 3 ) ; '' '' '' insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 34 , 64.76 , 13 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 109 , 'Marquita ' , 'Impy ' , ' B ' , 'Aron ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 151 , 'Prentiss ' , 'Filby ' , ' B ' , 'Berney ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 216 , 'Elsbeth ' , 'MacGaughie ' , ' B ' , 'Charles ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 225 , 'Egbert ' , 'Vasyunin ' , ' B ' , 'Chloe ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 69 , 'Maryjo ' , 'Pink ' , ' C ' , 'Amelia ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 241 , 296.03 , 169 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 111 , 490.85 , 191 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 161 , 184.39 , 94 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 72 , 539.87 , 62 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 195 , 'Dewey ' , 'Bottom ' , ' C ' , 'Carmelo ' ) ; SQL_LIKE_WILDCARD_AND_EQ_WILDCARD1 = f '' '' '' insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 80 , 'Petey ' , 'Colloby ' , ' B ' , 'Ann ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 222 , 'Hazel ' , 'Rushforth ' , ' C ' , 'Chester ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 238 , 448.86 , 16 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 53 , 'Riva ' , 'Scawen ' , ' C ' , 'Allen ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 145 , 112.51 , 162 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 58 , 'Lettie ' , 'Coffin ' , ' B ' , 'Almena ' ) ; if type ( operand ) == exp.Literal and operand.is_string : insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 73 , 144.33 , 52 ) ; class EqWildcardChecker : insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 59 , 'Lin ' , 'Race ' , ' B ' , 'Almina ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 209 , 203.86 , 244 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 203 , 545.33 , 116 ) ; , PRIMARY KEY ( customer_id ) insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 127 , 451.77 , 17 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 113 , 'Dania ' , 'Foxton ' , ' C ' , 'Arthusa ' ) ; WHERE sname LIKE ' O % ' AND insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 146 , 184.13 , 22 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 170 , 539.11 , 92 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 94 , 'Halimeda ' , 'Freak ' , ' B ' , 'Arabelle ' ) ; SQL_EQ_WILDCARD = f '' '' '' insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 148 , 'Lidia ' , 'Quinane ' , ' C ' , 'Benjamin ' ) ; , nickname VARCHAR ( 20 ) NOT NULL insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 100 , 424.83 , 50 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 81 , 'Sharline ' , 'Rosenwald ' , ' B ' , 'Anna ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 213 , 329.78 , 105 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 137 , 417.16 , 215 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 231 , 'Calhoun ' , 'BoHlingolsen ' , ' C ' , 'Christina ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 31 , 394.48 , 62 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 15 , 47.79 , 248 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 167 , 'Ninnette ' , 'Steere ' , ' C ' , 'Brad ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 17 , 'Carlyle ' , 'Zimek ' , ' B ' , 'Adelbert ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 235 , 'Justus ' , 'Barthrup ' , ' B ' , 'Christy ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 142 , 509.25 , 190 ) ; conn : Connection = psycopg.connect ( * * kwargs ) insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 220 , 367.15 , 163 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 220 , 'Kylen ' , 'Bewicke ' , ' B ' , 'Cheryl ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 180 , 'Leonelle ' , 'Chiommienti ' , ' B ' , 'Caitlin ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 52 , 81.47 , 212 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 90 , 'Forest ' , 'Trim ' , ' B ' , 'Appoline ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 221 , 'Cassondra ' , 'Mattingson ' , ' B ' , 'Chesley ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 8 , 424.8 , 244 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 229 , 89.34 , 147 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 21 , 'Nady ' , 'Lempertz ' , ' B ' , 'Adolphus ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 67 , 550.21 , 63 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 103 , 'Ede ' , 'Golden of Ireland ' , ' C ' , 'Armanda ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 89 , 556.68 , 74 ) ; fname = ' A % ' ; '' '' '' insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 162 , 168.92 , 27 ) ; CHECK ( type IN ( ' C ' , ' B ' ) ) -- C = customer , B = business insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 76 , 'Ardys ' , 'Currm ' , ' B ' , 'Andriane ' ) ; cur.execute ( insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 247 , 'Dulcie ' , 'Crutchley ' , ' B ' , 'Clement ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 163 , 61.42 , 69 ) ; qep_analysis = qep_parser.parse ( sql_statement ) def load_database ( * * kwargs ) : insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 182 , 'Sasha ' , 'Stiffkins ' , ' C ' , 'Caldonia ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 49 , 'Theodosia ' , 'Rosson ' , ' B ' , 'Aline ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 55 , 'Terrill ' , 'Syde ' , ' B ' , 'Allison ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 5 , 'Callida ' , 'Tomasello ' , ' B ' , 'Abiel ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 154 , 291.52 , 54 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 191 , 'Frankie ' , 'Canny ' , ' B ' , 'Candace ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 10 , 'Sonnie ' , 'Kelling ' , ' B ' , 'Abram ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 68 , 'Leisha ' , 'Darlington ' , ' C ' , 'Ambrose ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 212 , 179.55 , 180 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 226 , 212.04 , 28 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 229 , 'Melessa ' , 'MacAleese ' , ' C ' , 'Christiana ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 140 , 'Suki ' , 'Flinn ' , ' B ' , 'Bea ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 88 , 'Sansone ' , 'Copsey ' , ' C ' , 'Antonia ' ) ; wild card character ( the ' % ' character ) , otherwise None . insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 224 , 293.35 , 186 ) ; sql_statement = SQL_LIKE_WILDCARD_AND_EQ_NO_WILDCARD1 insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 50 , 'Anne-marie ' , 'Mounsie ' , ' B ' , 'Alison ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 204 , 'Cassy ' , 'Pearcehouse ' , ' C ' , 'Casper ' ) ; load= [ load_database ] , insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 188 , 'Ferguson ' , 'Mackriell ' , ' B ' , 'Cameron ' ) ; WHERE fname = 'Amble ' AND insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 48 , 'Marve ' , 'Eykel ' , ' C ' , 'Alicia ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 208 , 'Legra ' , 'Drought ' , ' C ' , 'Catherine ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 249 , 'Rhoda ' , 'Leheude ' , ' C ' , 'Cliff ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 77 , 'Maegan ' , 'Wheldon ' , ' C ' , 'Angela ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 181 , 'Daria ' , 'Wistance ' , ' C ' , 'Caitlyn ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 156 , 'Allistir ' , 'Frary ' , ' C ' , 'Beth ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 72 , 'Nadiya ' , 'Gingles ' , ' B ' , 'Anderson ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 7 , 183.92 , 236 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 7 , 'Lorin ' , 'Dollimore ' , ' C ' , 'Abijah ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 79 , 'Preston ' , 'Groves ' , ' B ' , 'Angelina ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 144 , 504.73 , 154 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 219 , 594.84 , 121 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 141 , 183.27 , 44 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 217 , 'Lucy ' , 'Durtnell ' , ' C ' , 'Charlie ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 140 , 297.41 , 101 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 215 , 'Nollie ' , 'Jemmett ' , ' B ' , 'Charity ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 85 , 404.96 , 79 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 27 , 137.86 , 21 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 240 , 384.87 , 107 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 115 , 'Shirl ' , 'Pilpovic ' , ' C ' , 'Asahel ' ) ; def _is_wildcard_string_literal ( self , operand : exp.Expression ) - > bool : insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 96 , 311.78 , 173 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 206 , 226.62 , 228 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 155 , 'Murdock ' , 'Dix ' , ' C ' , 'Bess ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 38 , 366.31 , 59 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 19 , 107.53 , 94 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 138 , 'Ainsley ' , 'Wraighte ' , ' C ' , 'Barticus ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 176 , 'Marylou ' , 'Guilloton ' , ' C ' , 'Bridget ' ) ; sql_statement = SQL_SIMPLE insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 233 , 87.21 , 179 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 177 , 334.0 , 167 ) ; CREATE TABLE { ORDERS_TABLE_NAME } ( f '' '' '' insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 178 , 563.08 , 161 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 30 , 'Colin ' , 'Jansie ' , ' C ' , 'Alastair ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 160 , 144.6 , 82 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 153 , 'Alfy ' , 'McCahill ' , ' B ' , 'Bertha ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 124 , 552.02 , 191 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 114 , 'Fara ' , 'Arkil ' , ' B ' , 'Arzada ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 206 , 'Ardyth ' , 'Conningham ' , ' B ' , 'Cassidy ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 108 , 294.25 , 131 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 46 , 362.72 , 240 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 29 , 'Dawna ' , 'Knipe ' , ' C ' , 'Alanson ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 111 , 'Torey ' , 'Sessuns ' , ' B ' , 'Artemus ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 2 , 409.8 , 217 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 112 , 'Nanci ' , 'Byrd ' , ' C ' , 'Arthur ' ) ; WHERE sname = 'Flinn ' ; '' '' '' insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 126 , 384.61 , 226 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 182 , 478.47 , 70 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 81 , 490.65 , 41 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 197 , 529.63 , 46 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 232 , 'Maritsa ' , 'Cowpland ' , ' C ' , 'Christine ' ) ; SELECT sname , fname insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 230 , 'Cordell ' , 'Bineham ' , ' B ' , 'Christiano ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 168 , 137.02 , 109 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 11 , 88.19 , 50 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 130 , 'Rora ' , 'Adcock ' , ' C ' , 'Babs ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 122 , 'Myrlene ' , 'Worcs ' , ' B ' , 'Augusta ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 217 , 302.24 , 189 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 151 , 221.16 , 212 ) ; CREATE TABLE { CUSTOMERS_TABLE_NAME } ( insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 60 , 473.05 , 208 ) ; warning_msg = checker.check ( ) insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 23 , 236.48 , 51 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 200 , 'Fanni ' , 'Iacopetti ' , ' C ' , 'Carolyn ' ) ; SQL_SIMPLE = f '' '' '' insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 235 , 230.72 , 168 ) ; ) insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 185 , 'Tanitansy ' , 'Headington ' , ' C ' , 'Calista ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 53 , 592.15 , 207 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 211 , 399.2 , 138 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 131 , 'Ive ' , 'Matches ' , ' B ' , 'Barbara ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 26 , 'Jenica ' , 'Martina ' , ' C ' , 'Agnes ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 202 , 99.52 , 171 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 3 , 189.43 , 19 ) ; import psycopg insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 211 , 'Jobi ' , 'Bails ' , ' B ' , 'Cecilia ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 226 , 'Emelina ' , 'Ayliff ' , ' B ' , 'Chris ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 121 , 'Clywd ' , 'Stokey ' , ' B ' , 'August ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 107 , 'Celisse ' , 'Rubra ' , ' B ' , 'Arminta ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 149 , 'Erik ' , 'Cushe ' , ' B ' , 'Benjy ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 44 , 537.56 , 2 ) ; SQL_LIKE_WILDCARD = f '' '' '' insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 239 , 'Atalanta ' , 'Girdler ' , ' C ' , 'Claire ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 56 , 501.06 , 129 ) ; , customer_id INT NOT NULL insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 250 , 367.56 , 214 ) ; '' '' '' from .. qepparser import QEPParser insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 31 , 'Dario ' , 'Siehard ' , ' C ' , 'Alazama ' ) ; , FOREIGN KEY ( customer_id ) SQL_LIKE_WILDCARD_AND_EQ_NO_WILDCARD2 = f '' '' '' insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 61 , 343.91 , 223 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 42 , 'Pyotr ' , 'Feldhorn ' , ' C ' , 'Alexis ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 203 , 'Rory ' , 'Hallatt ' , ' C ' , 'Casey ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 228 , 'Rudd ' , 'Ames ' , ' B ' , 'Christian ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 61 , 'Blisse ' , 'Dillway ' , ' C ' , 'Alonzo ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 164 , 'Abel ' , 'Bezants ' , ' C ' , 'Bob ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 65 , 318.64 , 6 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 136 , 'Aretha ' , 'Arias ' , ' C ' , 'Bart ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 152 , 291.54 , 10 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 69 , 266.3 , 39 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 196 , 'Louisa ' , 'Matasov ' , ' B ' , 'Carmon ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 160 , 'Patti ' , 'Louis ' , ' C ' , 'Biddie ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 48 , 199.52 , 234 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 236 , 485.18 , 167 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 214 , 'Chalmers ' , 'Britton ' , ' C ' , 'Celinda ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 189 , 164.91 , 68 ) ; assert warning_msg is None insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 210 , 'Pamelina ' , 'Vittery ' , ' C ' , 'Cathy ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 101 , 328.66 , 189 ) ; , fname VARCHAR ( 50 ) NOT NULL insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 62 , 'Seline ' , 'McGray ' , ' B ' , 'Alphinias ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 65 , 'Glenna ' , 'Alastair ' , ' C ' , 'Alyssa ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 75 , 'Erma ' , 'Cranstone ' , ' B ' , 'Andrew ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 231 , 51.77 , 118 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 129 , 426.3 , 136 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 66 , 'Sadella ' , 'Boxhall ' , ' B ' , 'Alzada ' ) ; ORDERS_TABLE_NAME = `` eq_wildcard_test_table_orders '' insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 37 , 'Talbot ' , 'Keddey ' , ' B ' , 'Aleva ' ) ; def qep_parser ( postgresql : Connection ) : insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 98 , 177.22 , 86 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 122 , 406.1 , 80 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 204 , 212.04 , 203 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 227 , 'Jeralee ' , 'Atwill ' , ' C ' , 'Christa ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 221 , 487.39 , 227 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 186 , 'Chloette ' , 'Ratt ' , ' B ' , 'Calpurnia ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 209 , 'Dulcea ' , 'Akister ' , ' C ' , 'Cathleen ' ) ; sname LIKE ' O % ' ; '' '' '' from typing import Optional insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 4 , 144.14 , 157 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 71 , 175.29 , 115 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 218 , 389.51 , 177 ) ; SQL_LIKE_WILDCARD_AND_EQ_NO_WILDCARD1 = f '' '' '' insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 183 , 'Harvey ' , 'Skinn ' , ' B ' , 'Caleb ' ) ; postgresql = factories.postgresql ( `` factory '' ) insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 119 , 'Gregg ' , 'Lazenbury ' , ' B ' , 'Aubrey ' ) ; sql_statement = SQL_EQ_NO_WILDCARD insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 18 , 'Odie ' , 'Rowling ' , ' C ' , 'Adele ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 236 , 'Garnette ' , 'Tabrett ' , ' C ' , 'Cicely ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 146 , 'Dunstan ' , 'Cressey ' , ' B ' , 'Bella ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 118 , 'Hermy ' , 'Whieldon ' , ' B ' , 'Ashley ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 237 , 293.23 , 140 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 224 , 'Dayle ' , 'Eirwin ' , ' B ' , 'Chick ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 199 , 376.5 , 53 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 28 , 87.44 , 1 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 106 , 236.57 , 4 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 16 , 330.92 , 130 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 131 , 255.66 , 127 ) ; with conn.cursor ( ) as cur : sql_statement = SQL_LIKE_WILDCARD_AND_EQ_NO_WILDCARD2 insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 93 , 'Sashenka ' , 'Fedorski ' , ' C ' , 'Arabella ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 103 , 14.83 , 183 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 232 , 330.85 , 204 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 94 , 406.59 , 129 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 161 , 'Barron ' , 'Dishmon ' , ' B ' , 'Bill ' ) ; return None insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 10 , 414.55 , 234 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 200 , 592.16 , 137 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 71 , 'Cynthie ' , 'Rouby ' , ' B ' , 'Anastasia ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 249 , 491.05 , 63 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 116 , 'Annmarie ' , 'Errichelli ' , ' B ' , 'Asaph ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 143 , 239.98 , 109 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 244 , 273.35 , 153 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 194 , 328.76 , 41 ) ; def is_wildcard_string_eq ( eq ) : return warning_msg insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 245 , 327.9 , 212 ) ; warning_msg = `` Warning : Possible use of '= ' instead of % for wildcard pattern [ pg4n : :EqWildcard ] '' insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 133 , 499.73 , 235 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 142 , 'Elfrieda ' , 'Cleary ' , ' C ' , 'Becca ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 64 , 'Dyan ' , 'Crosbie ' , ' B ' , 'Alverta ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 67 , 'Zsazsa ' , 'Bellocht ' , ' C ' , 'Amanda ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 134 , 'Georgetta ' , 'Crossley ' , ' B ' , 'Barnabas ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 201 , 'Arv ' , 'Spawforth ' , ' B ' , 'Carrie ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 101 , 'Hamilton ' , 'Pellew ' , ' B ' , 'Arizona ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 243 , 209.34 , 31 ) ; DROP TABLE IF EXISTS { CUSTOMERS_TABLE_NAME } ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 123 , 'Lyon ' , 'Nolleau ' , ' C ' , 'Augustina ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 43 , 'Belle ' , 'Barsham ' , ' B ' , 'Alfonse ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 205 , 508.59 , 59 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 17 , 302.31 , 225 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 99 , 354.37 , 66 ) ; Returns warning message if the sql has equals operation to a string with has_eq_wildcard = any ( filter ( is_wildcard_string_eq , eqs ) ) insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 176 , 22.8 , 175 ) ; fname = 'Amble ' ; '' '' '' SELECT sname insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 3 , 'Christen ' , 'Culley ' , ' C ' , 'Abednego ' ) ; , type CHAR ( 1 ) NOT NULL insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 141 , 'Jacinta ' , 'Villiers ' , ' B ' , 'Beatrice ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 167 , 547.07 , 197 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 159 , 281.36 , 198 ) ; self.qep_analysis = qep_analysis insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 102 , 'Ricca ' , 'Rupprecht ' , ' B ' , 'Arlene ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 175 , 'Davy ' , 'Blomefield ' , ' B ' , 'Brianna ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 120 , 'Corinna ' , 'Pyburn ' , ' B ' , 'Audrey ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 162 , 'Jessee ' , 'List ' , ' B ' , 'Billy ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 157 , 477.53 , 205 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 52 , 'Gerrilee ' , 'Ackland ' , ' B ' , 'Allan ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 126 , 'Lilllie ' , 'Annis ' , ' C ' , 'Aurelia ' ) ; def sql_parser ( postgresql : Connection ) : insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 109 , 170.82 , 206 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 24 , 'Jacinthe ' , 'Kleeman ' , ' B ' , 'Adrienne ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 91 , 'Bobby ' , 'Fortesquieu ' , ' B ' , 'Aquilla ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 38 , 'Web ' , 'Catterill ' , ' B ' , 'Alex ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 51 , 244.27 , 119 ) ; return operand.this.find ( `` % '' ) ! = -1 insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 75 , 238.65 , 203 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 184 , 'Louise ' , 'Jansey ' , ' C ' , 'California ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 54 , 'Malchy ' , 'Hearty ' , ' B ' , 'Allisandra ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 208 , 344.91 , 150 ) ; ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 137 , 'Lucilia ' , 'Bentick ' , ' C ' , 'Bartholomew ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 25 , 'Neely ' , 'Merrydew ' , ' B ' , 'Agatha ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 41 , 'Reilly ' , 'Kennler ' , ' B ' , 'Alexandria ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 93 , 452.63 , 115 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 240 , 'Britte ' , 'Muge ' , ' B ' , 'Clara ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 121 , 132.25 , 50 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 230 , 389.39 , 247 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 154 , 'Conney ' , 'Riteley ' , ' C ' , 'Bertram ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 132 , 'Olympe ' , 'Faber ' , ' B ' , 'Barbery ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 241 , 'Sigismund ' , 'Mowsdill ' , ' B ' , 'Clare ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 106 , 'Merrily ' , 'Coundley ' , ' C ' , 'Arminda ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 242 , 'Brenden ' , 'Simmons ' , ' B ' , 'Clarence ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 218 , 'Raffarty ' , 'Sweeney ' , ' C ' , 'Charlotte ' ) ; return SqlParser ( db_connection=postgresql ) insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 173 , 'Kristopher ' , 'Mackelworth ' , ' B ' , 'Brenda ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 187 , 'Donall ' , 'Casolla ' , ' B ' , 'Calvin ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 107 , 23.63 , 179 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 186 , 561.85 , 156 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 172 , 'Pammi ' , 'Codling ' , ' B ' , 'Breeanna ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 14 , 586.06 , 181 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 83 , 'Wolf ' , 'Brenton ' , ' B ' , 'Annette ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 98 , 'Elfreda ' , 'Tome ' , ' C ' , 'Ariadne ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 223 , 'Annice ' , 'Haynes ' , ' B ' , 'Chet ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 147 , 180.39 , 2 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 57 , 349.14 , 58 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 129 , 'Ashla ' , 'De-Ville ' , ' C ' , 'Bab ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 45 , 46.05 , 177 ) ; sql_statement = SQL_LIKE_WILDCARD , sname VARCHAR ( 50 ) NOT NULL insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 78 , 'Matilde ' , 'Froome ' , ' B ' , 'Angelica ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 212 , 'Annecorinne ' , 'Soles ' , ' B ' , 'Cedric ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 87 , 441.16 , 191 ) ; from .qepparser import QEPAnalysis insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 145 , 'Adena ' , 'Wenham ' , ' C ' , 'Belinda ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 91 , 331.76 , 115 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 84 , 396.02 , 111 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 138 , 223.81 , 183 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 139 , 'Kelsi ' , 'Suddell ' , ' C ' , 'Bazaleel ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 54 , 591.44 , 145 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 33 , 'Amble ' , 'Jewes ' , ' B ' , 'Alberta ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 117 , 'Marysa ' , 'Wadman ' , ' C ' , 'Asenath ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 32 , 331.93 , 144 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 234 , 'Cayla ' , 'Statter ' , ' B ' , 'Christopher ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 123 , 370.87 , 115 ) ; WHERE sname LIKE ' O % ' ; '' '' '' insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 165 , 84.61 , 1 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 39 , 42.62 , 95 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 188 , 495.68 , 39 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 215 , 515.79 , 96 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 192 , 'Dudley ' , 'Vesco ' , ' B ' , 'Carlotta ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 13 , 'Marion ' , 'Penelli ' , ' B ' , 'Adaline ' ) ; ) insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 105 , 107.29 , 12 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 125 , 'Leo ' , 'Creaney ' , ' B ' , 'Augustus ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 18 , 438.38 , 26 ) ; WHERE sname = ' O % ' ; '' '' '' insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 247 , 123.55 , 179 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 163 , 'Gerhardt ' , 'Simcock ' , ' B ' , 'Blanche ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 30 , 435.57 , 105 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 214 , 520.52 , 98 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 150 , 'Agnesse ' , 'Liebmann ' , ' B ' , 'Bernard ' ) ; return self._is_wildcard_string_literal ( insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 33 , 140.92 , 236 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 21 , 471.12 , 179 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 28 , 'Nanice ' , 'MacMaster ' , ' B ' , 'Alan ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 144 , 'Ange ' , 'Pasterfield ' , ' C ' , 'Bedelia ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 95 , 'Amandie ' , 'Botham ' , ' B ' , 'Araminta ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 128 , 415.86 , 243 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 159 , 'Carilyn ' , 'Vinecombe ' , ' B ' , 'Bezaleel ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 193 , 449.91 , 213 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 191 , 183.55 , 142 ) ; checker = EqWildcardChecker ( parsed_sql , qep_analysis ) insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 113 , 305.06 , 123 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 6 , 'Daisey ' , 'Hamill ' , ' B ' , 'Abigail ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 87 , 'Nanette ' , 'McElwee ' , ' B ' , 'Antoinette ' ) ; DROP TABLE IF EXISTS { ORDERS_TABLE_NAME } ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 238 , 'Gregor ' , 'Crinion ' , ' B ' , 'Cindy ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 110 , 'Donall ' , 'Labrenz ' , ' B ' , 'Artelepsa ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 12 , 591.72 , 143 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 174 , 597.34 , 184 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 136 , 411.87 , 10 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 99 , 'Phineas ' , 'Yuryaev ' , ' B ' , 'Arielle ' ) ; CUSTOMERS_TABLE_NAME = `` eq_wildcard_test_table_customers '' insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 179 , 453.95 , 43 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 14 , 'Davon ' , 'Burris ' , ' C ' , 'Addison ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 130 , 575.58 , 235 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 193 , 'Brucie ' , 'Coning ' , ' C ' , 'Carlton ' ) ; FROM { CUSTOMERS_TABLE_NAME } sql_statement = SQL_EQ_WILDCARD SQL_EQ_NO_WILDCARD = f '' '' '' from .. eq_wildcard_checker import EqWildcardChecker insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 58 , 10.24 , 74 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 156 , 130.63 , 188 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 9 , 'Lester ' , 'Markus ' , ' C ' , 'Abraham ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 150 , 439.75 , 18 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 250 , 'Langston ' , 'Prosser ' , ' C ' , 'Clifford ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 77 , 335.23 , 149 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 125 , 170.66 , 131 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 149 , 340.62 , 215 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 177 , 'Genvieve ' , 'Marthen ' , ' B ' , 'Brittany ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 23 , 'Jeanette ' , 'Fincher ' , ' B ' , 'Adriane ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 20 , 207.6 , 9 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 92 , 156.72 , 192 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 24 , 538.88 , 38 ) ; customer_id INT insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 233 , 'Tibold ' , 'Sleigh ' , ' C ' , 'Christoph ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 153 , 350.78 , 247 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 171 , 'Fredrick ' , 'Matuszynski ' , ' C ' , 'Breanna ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 127 , 'Rhoda ' , 'Kurton ' , ' C ' , 'Avarilla ' ) ; from .. sqlparser import SqlParser assert warning_msg is not None insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 148 , 203.36 , 180 ) ; factory = factories.postgresql_proc ( if not has_eq_wildcard : insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 189 , 'Merle ' , 'Erridge ' , ' C ' , 'Camille ' ) ; return QEPParser ( conn=postgresql ) insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 57 , 'Vita ' , 'Dunnett ' , ' B ' , 'Allyssa ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 181 , 150.37 , 69 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 243 , 'Hannah ' , 'Mattheis ' , ' C ' , 'Clarinda ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 139 , 441.16 , 97 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 9 , 519.43 , 175 ) ; order_id INT insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 132 , 488.95 , 234 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 199 , 'Matilda ' , 'Malenoir ' , ' C ' , 'Caroline ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 44 , 'Buffy ' , ' O '' Cridigan ' , ' B ' , 'Alfred ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 225 , 26.43 , 228 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 185 , 505.7 , 49 ) ; WHERE fname = ' A % ' AND conn.commit ( ) insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 108 , 'Janene ' , 'Motten ' , ' C ' , 'Arnold ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 178 , 'Rogers ' , 'Plose ' , ' B ' , 'Brittney ' ) ; eqs = self.parsed_sql.find_all ( exp.EQ ) insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 5 , 582.52 , 172 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 175 , 161.61 , 58 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 45 , 'Seymour ' , 'Mayer ' , ' B ' , 'Alfreda ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 158 , 65.82 , 201 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 47 , 163.79 , 141 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 135 , 'Janenna ' , 'McCamish ' , ' C ' , 'Barney ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 37 , 322.11 , 41 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 168 , 'Melicent ' , 'Cheston ' , ' B ' , 'Bradford ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 35 , 389.81 , 218 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 43 , 133.73 , 196 ) ; import pytest insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 180 , 452.67 , 234 ) ; from psycopg import Connection insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 92 , 'Raven ' , 'Eilles ' , ' C ' , 'Ara ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 234 , 254.56 , 98 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 190 , 'Kara ' , 'Backs ' , ' B ' , 'Campbell ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 124 , 'Penelope ' , 'Quadling ' , ' C ' , 'Augustine ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 237 , 'Jeramie ' , 'Gallehock ' , ' C ' , 'Cinderella ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 184 , 380.46 , 98 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 19 , 'Daphne ' , 'Bullen ' , ' B ' , 'Adeline ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 147 , 'Wilmer ' , 'MacWhan ' , ' B ' , 'Benedict ' ) ; REFERENCES { CUSTOMERS_TABLE_NAME } ( customer_id ) insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 219 , 'Adriane ' , 'Ccomini ' , ' B ' , 'Chauncey ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 244 , 'Katrine ' , 'Janiak ' , ' B ' , 'Clarissa ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 133 , 'Clementia ' , 'Fergusson ' , ' B ' , 'Barbie ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 46 , 'Mechelle ' , 'Vinick ' , ' B ' , 'Algernon ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 246 , 'Albert ' , 'Heimann ' , ' B ' , 'Cleatus ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 213 , 'Rubin ' , 'Lunney ' , ' B ' , 'Celeste ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 32 , 'Aubrie ' , 'Lockitt ' , ' C ' , 'Albert ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 22 , 193.12 , 6 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 95 , 367.31 , 48 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 59 , 141.8 , 118 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 39 , 'Tabbie ' , 'Glison ' , ' B ' , 'Alexander ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 216 , 388.15 , 142 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 86 , 537.64 , 201 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 26 , 590.52 , 50 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 70 , 596.2 , 221 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 128 , 'Jere ' , 'Cometti ' , ' B ' , 'Azariah ' ) ; def check ( self ) - > Optional [ str ] : insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 64 , 534.3 , 108 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 165 , 'Angele ' , 'Wildbore ' , ' C ' , 'Bobby ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 16 , 'Augustin ' , 'Blaxall ' , ' C ' , 'Adelaide ' ) ; , order_total_eur DECIMAL ( 6,2 ) NOT NULL insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 34 , 'Lorens ' , 'Buzin ' , ' C ' , 'Aldo ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 13 , 503.52 , 216 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 49 , 376.9 , 89 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 192 , 206.39 , 151 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 22 , 'Grazia ' , 'Syne ' , ' C ' , 'Adrian ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 74 , 'Giffy ' , 'Cottee ' , ' C ' , 'Andrea ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 164 , 193.39 , 169 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 6 , 132.85 , 206 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 116 , 292.86 , 97 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 86 , 'Lauren ' , 'Tolworth ' , ' B ' , 'Anthony ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 50 , 306.71 , 235 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 166 , 'Angelo ' , 'Vanstone ' , ' C ' , 'Boetius ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 35 , 'Lainey ' , 'Davidow ' , ' C ' , 'Aldrich ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 143 , 'Sasha ' , 'Eunson ' , ' C ' , 'Beck ' ) ; sql_statement = SQL_LIKE_WILDCARD_AND_EQ_WILDCARD2 def test_inner_orderby ( sql_parser : SqlParser , qep_parser : QEPParser ) : insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 100 , 'Gypsy ' , 'Bottrell ' , ' C ' , 'Aristotle ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 74 , 63.02 , 117 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 73 , 'Seymour ' , 'Maffioletti ' , ' B ' , 'Andre ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 170 , 'Bard ' , 'Shaw ' , ' C ' , 'Brady ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 84 , 'Birk ' , 'Malling ' , ' C ' , 'Annie ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 89 , 'Nickie ' , 'Bloss ' , ' C ' , 'Antonio ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 36 , 225.6 , 136 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 190 , 401.19 , 88 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 85 , 'Brig ' , 'Triswell ' , ' C ' , 'Anselm ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 246 , 510.74 , 188 ) ; return False insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 245 , 'Holly ' , 'Roy ' , ' C ' , 'Claudia ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 228 , 542.3 , 42 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 15 , 'Zachary ' , 'Faloon ' , ' C ' , 'Adela ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 158 , 'Anett ' , 'Hercules ' , ' B ' , 'Beverly ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 8 , 'Gasparo ' , 'Bohlje ' , ' C ' , 'Abner ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 169 , 552.88 , 241 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 207 , 205.25 , 199 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 105 , 'Cary ' , 'Sells ' , ' C ' , 'Armilda ' ) ; `` `` '' insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 51 , 'Kennan ' , 'Burstowe ' , ' B ' , 'Alixandra ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 78 , 569.4 , 99 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 196 , 259.0 , 244 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 82 , 106.39 , 237 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 157 , 'Noach ' , 'MacRitchie ' , ' C ' , 'Bethena ' ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 82 , 'Abey ' , 'Darridon ' , ' C ' , 'Anne ' ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 66 , 454.41 , 11 ) ; insert into { ORDERS_TABLE_NAME } ( order_id , order_total_eur , customer_id ) values ( 55 , 391.93 , 128 ) ; insert into { CUSTOMERS_TABLE_NAME } ( customer_id , fname , sname , type , nickname ) values ( 40 , 'Olva ' , 'Leborgne ' , ' C ' , 'Alexandra ' ) ;","['src/pg4n/eq_wildcard_checker.py', 'src/pg4n/test/test_eq_wildcard_checker.py']",2022-11-17 19:17:53+00:00,2022-11-21 10:02:46+00:00,2022-11-21 12:02:45+02:00
79,535fdf800713ce7b74f1e330e9c02af0bb981db2,1.026131121761864e-05,1,"Removing ` \n 's is a tough problem , see ought to replace \n with ` ` to avoid ` SELECT * FROM ` .",Edge cases with newlined psql queries,Merge pull request # 95 from Project-C-SQL/feat/error-handling-and-syntax-error-detection,"def parse_new_prompt_and_rest ( self , psql : str ) - > list [ str ] : prompt_res = match_rev_prompt_end.parse_string ( psql_rev ) Literal ( `` psql ( PostgreSQL ) `` ) + Combine ( Word ( nums ) + ' . ' + Word ( nums ) ) SubquerySelectChecker ( sanitized_sql , sql_parser ) .check ( ) from pyparsing import ( prompt_res = match_rev_prompt_end.parse_string ( psql_rev ) # Licensed under MIT . self.tok_rev_prompt_end psql_args : str # Semantic analysis is always done when user presses Return after most recent query . pg_user : str , # Comparing different domains Char ( ' ; ' ) from shutil import get_terminal_size psql.ofilter ( b'\r\n\r\r\n ' ) self , analysis_result = SubquerySelectChecker ( if output [ 0:2 ] == b'\r\n ' : qep_analysis def test_parse_last_stmt ( ) - > None : except Exception : # Matches only program errors ( see flake8 rule E722 ) ) - > bytes : # Opt ( Literal ( ' * ' ) | Literal ( ' ! ' ) | Literal ( ' ? ' ) , `` '' ) psql.ofilter ( b'\x1b [ ? 2004htest_db- # ' ) except ParseException : psql.ofilter ( b '' '\r ( reverse-i-search ) ` ' : `` ) assert p.output_has_new_prompt ( case_mixed_results ) # SUM/AVG ( DISTINCT ) def parse_new_prompt ( self , psql : str ) - > List [ str ] : def _check_and_act_on_repl_output ( # AND-clause will stop executing after first False . match_rev_magical_returns.parse_string ( psql_rev ) analysis_result = CmpDomainChecker ( sanitized_sql , columns ) .check ( ) self.tok_pre_database + self.tok_database assert p.parse_last_stmt ( case_trivial ) == \ pg_user : str , `` `` '' line and then the prompt , to allow easy message injection . res_list [ 1 ] [ : :-1 ] # see how the screen would look like , but still allow injecting to pick up relevant SQL statements and syntax errors for hook functions . '' '' '' if self.parser.output_has_magical_return ( res_list [ 2 ] [ : :-1 ] Word , assert p.parse_last_found_stmt ( case_multiline_query ) == \ psql_rev : str = psql [ : :-1 ] if magical_return_res : if self.pg4n_message ! = `` '' \ def test_output_has_new_prompt ( ) - > None : # Literal ( `` ERROR : '' ) return input reduce ( lambda x , y : x + y [ : :-1 ] , results , `` '' ) psql._intercept ( b'\r\n\r\r\n ' ) # Wildcards without LIKE `` `` '' if output [ 0:2 ] == b '' \r\n '' : ) : analysis_result : Optional [ str ] = None def test_output_has_magical_return ( ) - > None : return self.pg_tuple psql.start ( ) intercepted queries and syntax errors . psql._intercept ( b '' \x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C0 ' : SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur \x1b [ 7m= 100\x1b [ 27m ; \x08\x08\x08\x08\x08\x08 '' ) # Turn on verbose output to psqlparser.log file in working directory from pyparsing import Literal , Word , ParseException , ParserElement , \ `` psql `` + bytes.decode ( self.psql_args ) , prompt_res : Optional [ ParseResults ] = None : returns : an empty list if no prompt found . Otherwise has [ ' > = ' ] or \ unreversed_flattened_res : str = reduce ( def test_parse_magical_return ( ) - > None : # SQL parser , QEP parser , or an analysis module exploded : # Since latest_output contains error details , we will have to bytes.decode ( latest_output ) # `` = > SELECT psql.ofilter ( b'\r\n\x1b [ ? 2004l\r ' ) `` - ! > '' , `` * ! > '' , `` \ ' ! > '' , `` \ '' ! > '' , `` $ ! > '' , `` ( ! > '' , pg_host : str , return bytes ( line and then the prompt , to allow easy message injection . sql_parser : SqlParser = SqlParser ( conn ) assert psql._intercept ( fresh_prompt_1 ) == \ self.tok_pre_database + self.tok_database + \ match_rev_magical_returns : ParserElement = \ psql = PsqlWrapper ( sys.argv [ 1 ] .encode ( `` utf-8 '' ) , `` `` '' Start psql process and feed hook functions with \ encoding= '' utf-8 '' , assert psql._intercept ( case_query_2_prompt ) == \ main.py [ psql arguments ] < database name > '' ) def check_psql_version ( self ) - > str : self.tok_pre_user + self.tok_user Literal , def parse_new_prompt_and_rest ( self , psql : str ) - > List [ str ] : # for optimization reasons , check output only if len ( ) > 1 , so most psql._intercept ( case_query_1 ) `` `` '' Check for weird Return presses . self.parser.parse_new_prompt_and_rest ( tok_stmt_end psql.ofilter ( b '' \x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C1 ' : SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur \x1b [ 7m= 1\x1b [ 27m00 ; \x08\x08\x08\x08\x08\x08 '' ) .replace ( db_name + `` - > '' , `` '' ) \ and self.parser.parse_new_prompt ( tok_rev_error : ParserElement = Literal ( `` : RORRE '' ) res_list [ 2 ] [ : :-1 ] + res_list [ 1 ] [ : :-1 ] + res_list [ 0 ] [ : :-1 ] try : self.tok_rev_prompt_end def test_parse_new_prompt ( ) - > None : if len ( res_list ) == 4 : # results include \x1b [ ? 2004l # prompt1 per bin/psql/prompt.c : match_rev_last_stmt : ParserElement = ( split_prompt [ 1 ] , assert psql.ofilter ( fresh_prompt_1 ) == \ print ( f '' { os.path.basename ( sys.executable ) } \ results = [ : returns : a two-part list with everything before the prompt \ assert p.parse_last_stmt ( case_select_then_select ) == \ match_rev_last_stmt : ParserElement = \ ' . ' def test_ofilter ( ) - > None : StringEnd , self.pg_tuple = ( if prompt_res : ( Literal ( ' # ' ) | Literal ( ' > ' ) ) are received . `` port= '' + self.pg_port no_newlines_res = unreversed_flattened_res.replace ( '\n ' , ' ' ) def check_and_act_on_repl_output ( self , latest_output : bytes ) - > bytes : Literal ( `` psql ( PostgreSQL ) `` ) psql_rev = psql [ : :-1 ] # slicing is fastest operation for reversing # prompt : analysis_result = CmpDomainChecker ( bytes.decode ( prompt , `` utf-8 '' ) ) return has_magical_return # rev means reversed , these are for performance reasons . from typing import Optional , Tuple return `` Pg4n has only been tested on psql versions `` + \ analysis_result = EqWildcardChecker ( print_msg + `` \r\n\r\n '' if self.parser.output_has_new_prompt ( self.tok_rev_prompt_end def __init__ ( self , psql_args : str ) : SumDistinctChecker ( sanitized_sql , qep_analysis ) .check ( ) CaselessLiteral , to pick up relevant SQL statements for the hook function . potential_future_contents : str = '\n'.join ( # If we have a semantic error message waiting and there is a fresh `` user= '' + self.pg_user `` `` '' Parse for syntax error output . self.tok_pre_host + self.tok_host + \ conn ) .check ( ) : returns : syntax error message from 'ERROR : ' to last '^ ' . self.pg4n_message = self.semantic_analyze ( parsed_sql_query ) qep_analysis : QEPAnalysis = QEPParser ( conn=conn ) .parse ( sql_query ) version_info = \ `` - ? > '' , `` * ? > '' , `` \ ' ? > '' , `` \ '' ? > '' , `` $ ? > '' , `` ( ? > '' ] : returns : an empty string if current version has been tested , \ `` dbname= '' + self.pg_name psql.ofilter ( b'SELECT ' ) bytes.decode ( latest_output ) ) ! = [ ] : # there is new prompt self.match_rev_any_sql_stmt + Word ( self.prompt_chars ) psql.ofilter ( b'\r\x1b [ C ' ) # ( Return is always at least 2 length ) psql.ofilter ( b'\r\x1b [ K\x1b > \x1b [ r\x1b [ ? 1049l ' ) reversed_flattened_res : str = \ # input does not trigger parsing ( Return is always at least 2 length ) psql._intercept ( b'orders ' ) potential_future_screen = \ results = [ res_list [ 3 ] [ : :-1 ] , potential_future_screen_output_sink.feed ( psql.ofilter ( b'SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur = 100 ; ' ) import sys psql._intercept ( b'\r\x1b [ K\x1b > \x1b [ r\x1b [ ? 1049l ' ) : returns : if output is a fresh prompt . ImpliedExpressionChecker ( sanitized_sql , sql_query , if version == `` '' : c.interact ( input_filter=lambda x : x , output_filter=self._intercept ) latest_output : bytes : param prompt : is where the message is injected . A fresh prompt is \ sanitized_sql : exp.Expression = sql_parser.parse_one ( sql_query ) # debug creates pyte.screen ( current screenscraping context ) and Opt ( Literal ( ' * ' ) | Literal ( ' ! ' ) | Literal ( ' ? ' ) , `` '' ) stmt_res = match_error_statement.parse_string ( psql_rev ) pexpect.spawn ( `` psql `` + bytes.decode ( self.psql_args ) psql.ofilter ( b'\x08\x08 ' ) psql.ofilter ( b'\r\n ' ) def ofilter ( self , output : bytes ) - > bytes : : returns : a prompt with injected message , or unchanged if \ `` `` '' Forward output to ` _check_and_act_on_repl_output ` and feed \ StrangeHavingChecker ( sanitized_sql , qep_analysis ) .check ( ) def parse_syntax_error ( self , psql : str ) - > str : # magic strings ( related at least to ctrl-R use ) are lambda x , y : x + y [ : :-1 ] , results , `` '' else : from pyparsing import \ ) - > None : `` `` '' Detect when psql query evaluation has ended by parsing for a new prompt . psql._intercept ( b'\x1b [ ? 2004htest_db- # ' ) psql._intercept ( b ' ; ' ) assert p.parse_last_stmt ( case_empirical_1 ) == \ # from .inconsistent_expression_checker import InconsistentExpressionChecker `` `` '' Forward output to ` check_and_act_on_repl_output ( ) ` and feed \ with . CaselessLiteral , Char , Combine , Literal , ParseException , \ # and resulting message is saved here until when new prompt comes in # Inconsistent expression from functools import reduce # just match against a list of all possible combinations hook_semantic_f : Callable [ [ str ] , str ] , `` user= '' + self.pg_user # % / % R % x % # per postgres bin/psql/settings.h except ParseException as e : : returns : if user has indeed hit return . sql_query : str if len ( res_list ) == 2 : # parsing stops right after database name # replacing \n 's with `` '' maybe has less edge cases . Or actually more . sanitized_sql , `` SELECT * FROM orders WHERE order_total_eur = 100 ; '' # tok_multiline_prompt_end : ParserElement = \ `` `` '' Initiate session by getting psql connection parameters via psql \ # % / = current database psql_rev : str = psql [ : :-1 ] # slicing is fastest operation for reverse self.parser.parse_last_found_stmt ( screen ) self.pg_name `` psql `` + bytes.decode ( self.psql_args ) + `` -- version '' | Literal ( `` \x08\r\n '' [ : :-1 ] ) demultilined_res : str = no_newlines_res psql._intercept ( b '' \x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C1 ' : SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur \x1b [ 7m= 1\x1b [ 27m00 ; \x08\x08\x08\x08\x08\x08 '' ) # e.g . `` pg4n -- help '' is being run . # should parse as \n - > `` `` to avoid `` SELECT * FROM .. '' . print ( `` pg4n [ psql arguments ] < database name > '' ) # get terminal screen contents # superusers have = # prompt # Literal ( '\ '' ' ) | Literal ( ' $ ' ) | Literal ( ' ( ' ) ) # multiple elements into one . These are often combined to build functions elif len ( res_list ) == 2 : # parsing stops right after database name # Analysis is always done when user presses Return [ `` # = '' ] self.pg_pass , Literal ( `` > = '' ) | Literal ( `` # = '' ) with psycopg.connect ( `` host= '' + self.pg_host def start ( # SELECT in subquery Word ( nums ) # Inconsistent expression InconsistentExpressionChecker ( sanitized_sql , qep_analysis ) .check ( ) psql.ofilter ( b'orders ' ) # possibly provide a message to be included in next new prompt . stmt_chars : str = \ Control is only returned after psql process exits . tok_marker_caret : ParserElement = Literal ( `` ^ '' ) ZeroOrMore ( White ( ) ) from typing import List control codes . \n is newline ( carriage return \r will be added by \ multiline_prompt_ends : list [ str ] = \ assert p.parse_last_stmt ( case_query_with_newline ) == \ [ `` - # '' , `` * # '' , `` \ ' # '' , `` \ '' # '' , `` $ # '' , `` ( # '' , `` SELECT * FROM orders WHERE order_total_eur = 100 ; '' ZeroOrMore ( Char ( `` \n '' ) | Char ( `` \r '' ) | White ( ) ) debug : bool = False match_rev_prompt_and_then_rest : ParserElement = ( psql.ofilter ( case_psql_start ) stmt_res : Optional [ ParseResults ] = None assert p.parse_last_found_stmt ( case_multiple_queries_and_whitespaces ) == \ respectively . self `` `` '' Parse for a fresh prompt and everything preceding it into 2-length \ f.write ( '\n'.join ( line.rstrip ( ) for line in self.pyte_screen.display ) # and resulting message is saved until when new prompt comes in bytes.decode ( output , `` utf-8 '' ) output_filter=self.ofilter ) `` -- version '' ) stmt_chars : str = printable.translate ( str.maketrans ( `` '' , `` '' , stmt_end ) ) ) sql_parser : returns : unchanged input . SubqueryOrderByChecker ( sanitized_sql , qep_analysis ) .check ( ) psql._intercept ( b ' * ' ) `` - ! # '' , `` * ! # '' , `` \ ' ! # '' , `` \ '' ! # '' , `` $ ! # '' , `` ( ! # '' , messages are passed to , and from which corresponding warning messages \ detecting new prompt fails . sem_router = SemanticRouter ( * conn_info ) # asterisk unpacks the 5-tuple pg_name : str return assert p.parse_new_prompt ( case_trivial ) == \ `` utf-8 '' print_msg + `` \r\n\r\n '' : param input : user input characters . stmt_res_list [ 1 ] ] # `` pgdb= > SELECT def test_parse_last_found_stmt ( ) - > None : : param prompt : is output where message is injected to . A fresh prompt \ ) .check ( ) ] # * FROM orders WHERE order_total_eur = 100 ; c.interact ( input_filter=self.ifilter , psql._intercept ( b '' \x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C0 ' : SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur \x1b [ 7m= 10\x1b [ 27m0 ; \x08\x08\x08\x08\x08\x08 '' ) analysis_result = StrangeHavingChecker ( `` utf-8 '' ) psql._intercept ( b'\r\n ' ) res_list [ 3 ] [ : :-1 ] , def parse_magical_return ( self , psql : str ) - > List [ str ] : return bytes ( split_prompt [ 0 ] + `` \r\n '' split_prompt : List [ str ] = self.parser.parse_new_prompt_and_rest ( tok_stmt_end : ParserElement = Char ( ' ; ' ) sql_parser : SqlParser = SqlParser ( conn ) `` Pg4n has only been tested on psql versions `` `` `` '' Handle semantic analysis modules . '' '' '' psql._intercept ( b '' \r\n\x1b [ ? 2004l\r '' ) `` . '' elif len ( res_list ) == 4 : # results include \x1b [ ? 2004h .. EqWildcardChecker ( sanitized_sql , qep_analysis ) .check ( ) # reverse string for parsing efficiency syntax_error = \ def test_intercept ( ) - > None : if analysis_result is not None : sem_router.run_analysis , psql._intercept ( b'\x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C ' ) # magic strings related seemingly solely to ctrl-R use are bytes.decode ( output , `` utf-8 '' ) ) ! = [ ] : `` - * # '' , `` * * # '' , `` \ ' * # '' , `` \ '' * # '' , `` $ * # '' , `` ( * # '' , parsed_sql_query : str = self.parser.parse_last_stmt ( screen ) results : List [ str ] = [ ] ParseException , ParserElement , \ psql_output = pexpect.spawn ( # `` \r\n\x1b [ ? 2004l\r '' , `` \r\n\r\r\n '' and `` \x08\r\n '' . encoding= '' utf-8 '' , psql_output.expect ( pexpect.EOF ) self.pg4n_message = `` '' # Strange HAVING clause without GROUP BY self.pg4n_message = self.syntax_analyze ( syntax_error ) psql._intercept ( b'\x1b [ ? 2004l\r\x1b [ ? 2004htest_db- # ' ) assert psql.ofilter ( b'\x1b [ ? 2004l\r order_id | order_total_eur | customer_id \r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\r\n ( 0 rows ) \r\n\r\n\x1b [ ? 2004htest_db= # ' ) == \ def main ( ) - > None : str ( self.supported_psql_versions ) + `` . '' if magical_return_res : assert p.parse_last_found_stmt ( case_trivial ) == \ # This will match against `` % R % x % # `` , e.g `` = > `` . # Strange HAVING clause without GROUP BY line.rstrip ( ) for line in self.pyte_screen.display ) parsed_sql_query : str = \ if stmt_res : def start ( self ) - > None : self : param db_name_parameter : is name of database we are connecting to . # % R = - , * , ' , `` ; also $ , ( if syntax_error ! = `` '' : return analysis_result : param psql : screenscraped psql string with only whitespace \ list , facilitating easy message injection . `` - > '' , `` * > '' , `` \ ' > '' , `` \ '' > '' , `` $ > '' , `` ( > '' , `` host= '' + self.pg_host self.tok_pre_port + self.tok_port + \ psql.ofilter ( b '' \r\n\x1b [ ? 2004l\r '' ) # no syntax error analysis : psql.ofilter ( b ' ; ' ) match_rev_prompt_end : ParserElement = self.tok_rev_prompt_end return has_new_prompt assert p.parse_last_found_stmt ( case_query_with_newline ) == \ pg_pass : str , assert psql._intercept ( b'\x1b [ ? 2004l\r order_id | order_total_eur | customer_id \r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\r\n ( 0 rows ) \r\n\r\n\x1b [ ? 2004htest_db= # ' ) == \ psql.ofilter ( b '' \x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C0 ' : SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur \x1b [ 7m= 100\x1b [ 27m ; \x08\x08\x08\x08\x08\x08 '' ) name . psql._intercept ( b '' \x1b [ A\rtest_db= # SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur = 100 ; \x1b [ K\x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\r\n\r '' ) psql.ofilter ( b'\x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C ' ) psql._intercept ( b'FROM ' ) f.write ( str ( e.explain ( ) ) + `` \n '' ) columns def ifilter ( self , input : bytes ) - > bytes : from typing import Optional except ParseException as e : | ( # or continue \x1b [ ? .. [ ' # = ' ] . def __init__ ( new_output : bytes = self._replace_prompt ( latest_output ) # as interesting things usually are at end of a long string . printable.translate ( str.maketrans ( `` '' , `` '' , stmt_end ) ) ) - > str : StringEnd ( ) from typing import Optional psql._intercept ( b'\x08\x08 ' ) def parse_last_found_stmt ( self , psql : str ) - > str : deepcopy ( self.pyte_screen ) ) self.parser.parse_syntax_error ( potential_future_contents ) # cheaper and easier to reverse & start from the end # % # = # , > from .psqlconninfo import PsqlConnInfo : param hook_semantic_f : is a callback to which scraped SQL queries are\ # for optimization reasons , check output only if len ( ) > 1 , so keyboard psql._intercept ( b'SELECT ' ) [ `` > = '' ] from copy import deepcopy assert p.parse_last_stmt ( case_select_then_insert ) == \ Word ( nums ) psql.ofilter ( case_query_1 ) from .psqlparser import PsqlParser evaluation has ended . ) if self.debug : : returns : an empty list if no presses are found . \ # This will match against `` % R % x % # `` , e.g `` - > `` . # SELECT in subquery Char , res_list = prompt_res.as_list ( ) output : bytes pg_port : str , from functools import reduce return ( # * FROM orders WHERE order_total_eur = 100 ; '' # % x = nothing , * , ! , ? c = pexpect.spawn ( `` psql `` + bytes.decode ( self.psql_args ) , # ( Literal ( '- ' ) | Literal ( ' * ' ) | Literal ( '\ '' ) | # semantic analysis : from .psqlconninfo import PsqlConnInfo split_prompt [ 1 ] , assert psql.ofilter ( case_query_2_prompt ) == \ psql._intercept ( b '' '\r ( reverse-i-search ) ` ' : `` ) | Literal ( `` \x08\r\n '' [ : :-1 ] ) results = magical_return_res.as_list ( ) tok_rev_prompt_end : ParserElement = Combine ( match_select_stmt : ParserElement = ( demultilined_res = no_newlines_res\ self.pg_port , new_output : bytes = self._check_and_act_on_repl_output ( output ) return `` '' # No semantic errors found ZeroOrMore , assert p.parse_new_prompt ( case_mixed_results ) == \ # should convert \n - > `` `` to avoid `` SELECT * FROM .. '' . hook_f : Callable [ [ str ] , str ] , parser : PsqlParser ) : e.explain ( ) ) Literal ( `` \r\n\x1b [ ? 2004l\r '' [ : :-1 ] ) : param psql : screenscraped psql string res_list [ 0 ] [ : :-1 ] def _check_psql_version ( self ) - > str : # Replacing \n 's with `` `` seems to have less edge cases . self.pg_host , `` `` '' Check PostgreSQL version via psql child process and match \ stmt_res_list [ length - 4 ] ) : stmt_res_list [ length - 4 ] ] return new_output match_rev_any_sql_stmt : ParserElement = \ c = pexpect.spawn ( passed to , and from which corresponding semantic warning messages are \ self.pg_user , wrapper ) . `` psql `` assert p.output_has_new_prompt ( case_trivial ) split_prompt [ 0 ] + `` \r\n '' otherwise a warning message . # `` pgdb= > SELECT * FROM orders WHERE order_tot # either by only having single element , or using Combine to squash ) # should parse as \n - > `` '' psql._intercept ( b'\x1b [ ? 2004l\r\x1b [ ? 1049h\x1b=\r order_id | order_total_eur | customer_id \x1b [ m\r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\x1b [ m\r\n 1 | 535.36 | 111\x1b [ m\r\n 2 | 409.80 | 217\x1b [ m\r\n 3 | 189.43 | 19\x1b [ m\r\n 4 | 144.14 | 157\x1b [ m\r\n 5 | 582.52 | 172\x1b [ m\r\n 6 | 132.85 | 206\x1b [ m\r\n 7 | 183.92 | 236\x1b [ m\r\n 8 | 424.80 | 244\x1b [ m\r\n 9 | 519.43 | 175\x1b [ m\r\n 10 | 414.55 | 234\x1b [ m\r\n 11 | 88.19 | 50\x1b [ m\r\n 12 | 591.72 | 143\x1b [ m\r\n 13 | 503.52 | 216\x1b [ m\r\n 14 | 586.06 | 181\x1b [ m\r\n 15 | 47.79 | 248\x1b [ m\r\n 16 | 330.92 | 130\x1b [ m\r\n 17 | 302.31 | 225\x1b [ m\r\n 18 | 438.38 | 26\x1b [ m\r\n 19 | 107.53 | 94\x1b [ m\r\n 20 | ' self.tok_pre_host + self.tok_host ParseResults , return prompt # prompt is malformed and is returned as-is . line.rstrip ( ) for line in self.pyte_screen.display ) ) assert p.parse_magical_return ( case_long_return ) == \ stmt_res_list [ 2 ] , psql._intercept ( case_psql_start ) ParserElement.setDefaultWhitespaceChars ( `` ) to and from which semantic error messages are received in return . `` `` '' Parse for an empty prompt , to detect when a query \ from .psqlwrapper import PsqlWrapper has_new_prompt : bool = False # asterisk unpacks the 5-tuple match_psql_conninfo : ParserElement = ( match_rev_prompt_end : ParserElement = \ stmt_res : ParseResults = None `` `` '' Parse for an empty prompt and everything preceding it \ # should convert \n - > `` '' to avoid `` order_tot al_eur '' # Implied expression ParseException , def output_has_new_prompt ( self , psql : str ) - > bool : : returns : if user has hit return . .replace ( db_name + `` - # '' , `` '' ) psql._intercept ( b'\x08\x08\x08\x08\x08\x08 ' ) `` - ? # '' , `` * ? # '' , `` \ ' ? # '' , `` \ '' ? # '' , `` $ ? # '' , `` ( ? # '' , results = [ `` , match_version_stmt : ParserElement = ( debug : bool = False if stmt_res is not None : analysis_result = \ assert p.output_has_magical_return ( case_long_return ) # ORDER BY in subquery : param hook_f : is a callback to which scraped SQL queries are passed \ output to pyte screen for future screen-scraping . `` `` '' User input filter function for pexpect.interact : not used . Stream ( potential_future_screen ) stmt_res_list [ length - 3 ] , Word ( self.prompt_chars ) + \ magical_return_res = \ Literal ( `` ? [ \x1b '' ) # in this case control code parameter self.pg_pass , ( StringEnd ( ) # output may stop at end of db name , return results match_rev_any_sql_stmt [ `` \rl4002 ? [ \x1b\n\r '' ] is expected , or otherwise no injection is made . match_select_stmt : ParserElement = \ Literal , Word , \ results = [ stmt_res_list [ 3 ] , analysis_result = ImpliedExpressionChecker ( psql.ofilter ( b'\x08order_total_eur = 0 AND order_total_eur = 10\x1b [ C\x1b [ 1P ; \x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C ' ) `` port= '' + self.pg_port Opt , conn White , def main ( ) - > None : lambda syntax_error_analysis : `` '' , psql._intercept ( b'\r\x1b [ C ' ) with psycopg.connect ( results = [ stmt_res_list [ length - 3 ] , intercepted output . '' '' '' str ( self.supported_psql_versions ) sem_router = SemanticRouter ( * conn_info ) version_msg = self._check_psql_version ( ) def output_has_magical_return ( self , psql : str ) - > bool : identbodychars , nums psql._intercept ( b'\r\n\x1b [ ? 2004l\r ' ) # feed query to semantic analysis hook function # save a potential warning to be included in before next fresh prompt . # breaks , because both of these work right in straight psql . See : # ORDER BY in subquery ParseResults , ParserElement , StringEnd , White , Word , ZeroOrMore , \ # tok , or token , is parsing element with only single element output , psql._intercept ( b'\x08order_total_eur = 0 AND order_total_eur = 1\x1b [ 1P00 ; \x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C ' ) self.match_rev_magical_returns.parse_string ( psql_rev ) new_output = self._replace_prompt ( latest_output ) lambda x , y : x + y , sys.argv [ 1 : ] , `` '' ... : returns : if output has a weird Return press . ) : print ( e.explain ( ) ) ZeroOrMore ( White ( ) ) + CaselessLiteral ( `` SELECT '' ) match_psql_conninfo : ParserElement = \ self.pg_user , CaselessLiteral ( `` SELECT '' ) PsqlParser ( ) self.semantic_analyze : Callable [ [ str ] , str ] = hook_semantic_f Literal ( `` \r\n\x1b [ ? 2004l\r '' [ : :-1 ] ) \ from shutil import get_terminal_size # Parsing functions common to more than 1 parsing functions are listed here # TODO ( ? ) : We may have to match for errors def get ( self ) - > ( str , str , str , str , str ) : results = [ ) unreversed_flattened_res : str = \ # If there is a fresh prompt : tok_rev_prompt_end : ParserElement = \ # for simplicity , just use pexpect here prompt_res : ParseResults = None psql._intercept ( b'\x08order_total_eur = 0 AND order_total_eur = 10\x1b [ C\x1b [ 1P ; \x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C ' ) qep_analysis : QEPAnalysis = QEPParser ( conn=conn ) .parse ( sql_query ) # Wildcards without LIKE if self.pg4n_message ! = `` '' : # Implied expression Only one ( static ) class instance is intended for use in program . demultilined_res = demultilined_res.replace ( prompt , `` '' ) output to pyte screen for screenscraping . # keyboard input does not trigger parsing f = open ( `` psqlparser.log '' , `` a '' ) psql.ofilter ( b '' \x08\x08\x08= ' : SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur \x1b [ 7m=\x1b [ 27m 100 ; \x08\x08\x08\x08\x08\x08 '' ) self.analyze : Callable [ [ str ] , str ] = hook_f psql._intercept ( return_press_1 ) psql = PsqlWrapper ( assert p.parse_last_stmt ( case_multiple_queries_and_whitespaces ) == \ # command-line arguments prevent interactive sessions ( e.g pg4n -- help ) if prompt_res : # To save time , since linebreak prompts are only removed , match_rev_any_sql_stmt : ParserElement = ( psql._intercept ( b'SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur = 100 ; ' ) analysis_result = SubqueryOrderByChecker ( sys.argv [ 1 ] .encode ( `` utf-8 '' ) , `` password= '' + self.pg_pass psql.ofilter ( b '' \x1b [ A\rtest_db= # SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur = 100 ; \x1b [ K\x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\r\n\r '' ) ParserElement , tok_stmt_end : ParserElement = \ and then starting the session . '' '' '' psql.ofilter ( b'\x08order_total_eur = 0 AND order_total_eur = 1\x1b [ 1P00 ; \x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C ' ) psql.ofilter ( b'FROM ' ) print ( e.explain ( ) ) from .semanticrouter import SemanticRouter psql.ofilter ( return_press_1 ) Combine , dimensions= ( self.rows , self.cols ) ( StringEnd ( ) | ( Literal ( `` ? [ \x1b '' ) self.pg_tuple : Optional [ Tuple [ str , str , str , str , str ] ] = None : returns : a prompt with injected message . ) as conn : self.syntax_analyze : Callable [ [ str ] , str ] = hook_syntax_f sanitized_sql : exp.Expression = sql_parser.parse_one ( sql_query ) ( Literal ( '= ' ) | Literal ( '^ ' ) ) has_new_prompt = True child process , initializing semantic analysis and wrapper modules , \ def run_analysis ( self , sql_query : str ) - > str : # Comparing different domains return `` '' # No semantic errors found def run_analysis ( psql.ofilter ( b'\x1b [ ? 2004l\r\x1b [ ? 2004htest_db- # ' ) analysis_result : Optional [ str ] = None List is empty if no fresh prompt was found . Combine ( res_list [ 1 ] [ : :-1 ] + res_list [ 0 ] [ : :-1 ] split_prompt : List [ str ] = \ potential_future_screen_output_sink = \ version_msg = self.check_psql_version ( ) return `` '' # ( Literal ( ' # ' ) | Literal ( ' > ' ) ) ) expected . # and save resulting message bytes.decode ( prompt , `` utf-8 '' ) ) - > Optional [ Tuple [ str , str , str , str , str ] ] : | Literal ( `` \r\n\r\r\n '' [ : :-1 ] ) self.pg_port , : returns : a two-part list with everything before the prompt \ f.close ( ) psql.ofilter ( b ' * ' ) sem_router.run_analysis , tok_rev_error self.pg4n_message = `` '' tok_marker_caret parser : PsqlParser # an insightful syntax error message from the syntax analysis . tok_rev_prompt_end if conn_info is not None : return unreversed_flattened_res against versions pg4n is tested with . prompt = db_name + multiline_prompt_end `` password= '' + self.pg_pass ) as conn : f.write ( '\n'.join ( ... + StringEnd ( ) ) ) ] reduce ( # Combine ( psql.start ( ) match_rev_magical_returns : ParserElement = ( ] pg_port : str , : param hook_syntax_f : is a callback to which scraped syntax error \ `` `` '' Start psql process and then start feeding hook function with \ # ^either stops after dbname or includes \x1b [ ? 2004l ... if self.parser.parse_magical_return ( identbodychars , has_magical_return : bool = False hook_syntax_f : Callable [ [ str ] , str ] , nums # for matching . # match_error : ParserElement = \ : param psql_args : are the command-line arguments pg4n has been called \ def get ( # TODO/BUG : removing \n 's is a tough problem , see : prompt_res = match_rev_prompt_and_then_rest.parse_string ( psql_rev ) # ParserElement for these would look this : dimensions= ( self.rows , self.cols ) ) # prompt2 per bin/psql/prompt.c : new_output : bytes = self.check_and_act_on_repl_output ( output ) ZeroOrMore ( Char ( `` \n '' ) | Char ( `` \r '' ) | White ( ) ) + \ # Reversing happens for performance reasons , self.tok_pre_port + self.tok_port assert p.parse_last_found_stmt ( case_empirical_1 ) == \ 5-tuple or None . psql_args : bytes , # feed query to hook function and save resulting message # Psql is not connecting to any database , psql._intercept ( b'\x08\x08\x08\x08 ' ) def _intercept ( # `` \r\n\x1b [ ? 2004l\r '' , `` \r\n\r\r\n '' and `` \x08\r\n '' . # If we have a semantic error message waiting def __init__ ( self , def parse_last_stmt ( self , psql : str ) - > str : # from functools import reduce assert p.parse_last_found_stmt ( case_select_then_select ) == \ # Replacing \n 's has some edge cases where wrapper transparency Word ( self.prompt_chars ) `` - * > '' , `` * * > '' , `` \ ' * > '' , `` \ '' * > '' , `` $ * > '' , `` ( * > '' , magical_return_res : ParseResults = None `` dbname= '' + self.pg_name '' , pg_host : str , assert p.parse_last_stmt ( case_multiline_query ) == \ PsqlParser ( ) ) psql.ofilter ( b'\x08\x08\x08\x08 ' ) columns : list [ Column ] = sql_parser.get_query_columns ( sanitized_sql ) return ( self.pg_host , magical_return_res = \ from .psqlparser import PsqlParser sql_query , ) line.rstrip ( ) for line in potential_future_screen.display pg_pass : str , magical_return_res : Optional [ ParseResults ] = None | Literal ( `` \r\n\r\r\n '' [ : :-1 ] ) \ analysis_result = InconsistentExpressionChecker ( # `` = > SELECT * FROM orders WHERE order_tot reduce ( lambda x , y : x + y [ : :-1 ] , results , `` '' ) ParserElement.setDefaultWhitespaceChars ( `` '' ) # % R = = , ^ assert psql.ofilter ( b'\x1b [ ? 2004htest_db= # ' ) == \ # Based on exploratory testing , screen : str = '\n'.join ( if split_prompt == [ ] : name . '' '' '' assert p.parse_last_found_stmt ( case_select_then_insert ) == \ pg_name : str if analysis_result is not None : ZeroOrMore ( White ( ) ) + tok_stmt_end + ... + \ no_newlines_res = reversed_flattened_res.replace ( '\n ' , ' ' ) columns : list [ Column ] = sql_parser.get_query_columns ( sanitized_sql ) from .psqlwrapper import PsqlWrapper import sys psql.ofilter ( b'\x08\x08\x08\x08\x08\x08 ' ) self.tok_rev_prompt_end + \ print ( bytes.decode ( psql_output.before ) ) new_output : bytes = `` '' results = prompt_res.as_list ( ) stmt_res_list = stmt_res.as_list ( ) # SUM/AVG ( DISTINCT ) import pexpect psql._intercept ( b '' \x08\x08\x08= ' : SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur \x1b [ 7m=\x1b [ 27m 100 ; \x08\x08\x08\x08\x08\x08 '' ) ... # has already been parsed as prompt_chars prompt_res = match_rev_prompt_and_then_rest.parse_string ( psql_rev ) import os Opt ( White ( ) ) ... control codes and newlines ( without carriage returns ) . from .semanticrouter import SemanticRouter def __init__ ( self , psql_args : bytes , screen : str = \ return new_output has_magical_return = True for multiline_prompt_end in self.multiline_prompt_ends : match_version_stmt : ParserElement = \ lambda x : `` '' , assert psql._intercept ( b'\x1b [ ? 2004htest_db= # ' ) == \ : returns : ( hostname , port , user , password , database name ) \ match_rev_prompt_and_then_rest : ParserElement = \ self.pg4n_message = self.analyze ( parsed_sql_query ) `` `` '' Parse for weird Return presses . res_list = prompt_res.as_list ( ) # optimization : do not spend time parsing if there is no message : # 'rev ' in variable names is shorthand for reversed . Otherwise has newline text . received in return . print ( `` Fatal error : psql connection info could not be parsed\n '' to 2 cells . psql_rev = psql [ : :-1 ] psql.ofilter ( b'\x1b [ ? 2004l\r\x1b [ ? 1049h\x1b=\r order_id | order_total_eur | customer_id \x1b [ m\r\n -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -\x1b [ m\r\n 1 | 535.36 | 111\x1b [ m\r\n 2 | 409.80 | 217\x1b [ m\r\n 3 | 189.43 | 19\x1b [ m\r\n 4 | 144.14 | 157\x1b [ m\r\n 5 | 582.52 | 172\x1b [ m\r\n 6 | 132.85 | 206\x1b [ m\r\n 7 | 183.92 | 236\x1b [ m\r\n 8 | 424.80 | 244\x1b [ m\r\n 9 | 519.43 | 175\x1b [ m\r\n 10 | 414.55 | 234\x1b [ m\r\n 11 | 88.19 | 50\x1b [ m\r\n 12 | 591.72 | 143\x1b [ m\r\n 13 | 503.52 | 216\x1b [ m\r\n 14 | 586.06 | 181\x1b [ m\r\n 15 | 47.79 | 248\x1b [ m\r\n 16 | 330.92 | 130\x1b [ m\r\n 17 | 302.31 | 225\x1b [ m\r\n 18 | 438.38 | 26\x1b [ m\r\n 19 | 107.53 | 94\x1b [ m\r\n 20 | ' analysis_result = SumDistinctChecker ( match_error_statement : ParserElement = ( version_info = pexpect.spawn ( `` `` '' psql.ofilter ( b '' \x1b [ A\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C\x1b [ C0 ' : SELECT * FROM orders WHERE order_total_eur = 0 AND order_total_eur \x1b [ 7m= 10\x1b [ 27m0 ; \x08\x08\x08\x08\x08\x08 '' ) : param psql : screen-scraped psql output . # psqlwrapper.log ( capturing terminal stream ) in working directory return analysis_result self.pg_name ) self.tok_pre_user + self.tok_user + \ results : list [ str ] = [ ]","['src/pg4n/main.py', 'src/pg4n/psqlconninfo.py', 'src/pg4n/psqlparser.py', 'src/pg4n/psqlwrapper.py', 'src/pg4n/semanticrouter.py', 'src/pg4n/test/test_psqlparser.py', 'src/pg4n/test/test_psqlwrapper.py']",2022-11-19 17:10:41+00:00,2022-12-12 12:47:05+00:00,2022-12-12 14:47:03+02:00
92,ff25e18f8bfefbf98a4f27a1eccaf633c8313844,1.0447899512655567e-05,1,"Run ` SELECT * FROM albums ; ` or ` SELECT * FROM orders ; ` on customer-provided test database . Does n't crash without QEP parser , or without semantic router loaded , so seems like SQL parser is at fault . ` = # SELECT * FROM albums ; unable to convert from internal type 'boolean ' to declared type `",SQL parser crashes when querying database_generate.sql,Merge pull request # 93 from Project-C-SQL/fix/sqlparser-typeconv,"`` normalized '' in the context of this program 's conventions . type_charactervarying20 , type_bigserial BIGSERIAL , 1000000000000 , type_time TIME , elif match : = timestamp_matcher.match ( type_name ) : timestamptz_matcher = re.compile ( type_timestamp_without_time_zone TIMESTAMP WITHOUT TIME ZONE , type_time4 , 200.54321 , ' C ' , elif match : = json_matcher.match ( type_name ) : with conn.cursor ( ) as cur : type_bytea , tsvector_matcher = re.compile ( r '' ^ ( ? : tsvector ) $ '' ) type_polygon POLYGON , type_line LINE , SIMPLE_STATEMENT = f '' '' '' test_type_id INT , self._eval_opt_precission_field_match ( match , `` BIT '' ) type_macaddr MACADDR , parsed_sql = parser.parse_one ( SIMPLE_STATEMENT ) elif match : = line_matcher.match ( type_name ) : 12.1 , date_matcher = re.compile ( r '' ^ ( ? : date ) $ '' ) type_point , ' { { 1 , 1 , 2 } } ' : :line , SELECT ( 1,2,3 ) ; '' '' '' elif match : = timestamptz_matcher.match ( type_name ) : elif match.group ( 1 ) is not None and match.group ( 2 ) is not None : elif match : = point_matcher.match ( type_name ) : converted_types.append ( conv_type ) f '' NUMERIC ( { match.group ( 1 ) } ) '' , int ( match.group ( 1 ) ) , None type_time_with_time_zone , type_decimal , f '' { type_name_prefix } ( { match.group ( 1 ) } ) '' , int ( match.group ( 1 ) ) , None '08:05:06.789 ' , type_bytea BYTEA , PRIMARY KEY ( test_type_id ) type_cidr CIDR , import sqlglot.expressions as exp type_int8 , type_int INT , elif match : = double_precission_matcher.match ( type_name ) : type_timetz TIMETZ , # print ( f '' type_names : { type_names } '' ) `` `` '' parsed_sql = parser.parse_one ( SELECT_STATEMENT ) type_timestamp , assert type ( parser.get_root_node ( converted_types.append ( PostgreSQLDataType ( `` DATE '' , None , None ) ) DROP TABLE IF EXISTS { TYPE_TEST_TABLE_NAME } ; box_matcher = re.compile ( r '' ^ ( ? : box ) $ '' ) ZERO_TABLE_STATEMENT = \ type_character20 CHARACTER ( 20 ) , type_real , type_int2 INT2 , '12.8 ' : :money , text_matcher = re.compile ( r '' ^ ( ? : text ) $ '' ) 0.01 , smallint_matcher = re.compile ( r '' ^ ( ? : smallint|int2 ) $ '' , re.IGNORECASE ) type_varbit20 , elif match : = interval_matcher.match ( type_name ) : converted_types.append ( PostgreSQLDataType ( `` BOOL '' , None , None ) ) '\\000 ' : :bytea , self , match : re.Match , type_name_prefix : str `` `` '' IMPOSSIBLE_STATEMENT = \ SINGLE_TABLE_STATEMENT = f '' '' '' 'character varying20 ' , type_double_precision DOUBLE PRECISION , return PostgreSQLDataType ( `` TIMESTAMPTZ '' , None , None ) type_money , # | COMPLEX_MATCHERS | def _eval_opt_precission_field_match ( type_box , path_matcher = re.compile ( r '' ^ ( ? : path ) $ '' ) '11:05:06.7891+02 ' , conv_type = PostgreSQLDataType ( `` DECIMAL '' , None , None ) name = f '' DECIMAL ( { match.group ( 1 ) } , { match.group ( 2 ) } ) '' converted_types.append ( PostgreSQLDataType ( `` XML '' , None , None ) ) BORING_STATEMENT = \ '04:05:06.789 ' , converted_types.append ( PostgreSQLDataType ( `` REAL '' , None , None ) ) type_timestamp4_with_time_zone TIMESTAMP ( 4 ) WITH TIME ZONE , elif match : = macaddr_matcher.match ( type_name ) : import re r '' ^ ( ? : numeric|decimal ) \s * \ ( \s * ( \d+ ) ( ? : \s * , \s * ( \d+ ) ) ? \s * \ ) $ '' elif match : = bigint_matcher.match ( type_name ) : type_serial SERIAL , 18 , 'varchar ' , parsed_sql.find ( exp.Identifier ) ) ) == exp.Select ' { { \ '' foo\ '' : [ \ '' bar\ '' , \ '' baz\ '' , false , 0.0 ] } } ' , NESTED_WHERE = `` '' '' type_line , elif match : = bit_matcher.match ( type_name ) : def sql_parser_datatypedb ( datatypedb : Connection ) : converted_types.append ( PostgreSQLDataType ( `` JSON '' , None , None ) ) type_serial8 SERIAL8 , converted_types.append ( PostgreSQLDataType ( `` LINE '' , None , None ) ) elif match : = date_matcher.match ( type_name ) : '127.0.0.1 ' , tsquery_matcher = re.compile ( r '' ^ ( ? : tsquery ) $ '' ) type_bitvarying , type_char , ) ; type_lseg LSEG , type_bigint , type_path PATH , type_inet , '10.1.2.3/32 ' , converted_types.append ( PostgreSQLDataType ( `` POINT '' , None , None ) ) interval_matcher = re.compile ( r '' ^ ( ? : interval ) $ '' ) type_numeric , ' c ' , type_polygon , ' ( 0 , 0 ) ' : :point , converted_types.append ( PostgreSQLDataType ( `` INET '' , None , None ) ) THREE_TABLE_STATEMENT = \ converted_types.append ( PostgreSQLDataType ( `` JSONB '' , None , None ) ) # scope= '' function '' weakens pytest magic '01010101010101010101 ' , type_json , # | OPT_PRECISSION_MATCHERS | conv_type = PostgreSQLDataType ( converted_types.append ( conv_type ) column_name = parser.get_column_name_from_column_expression ( column_expression ) timestamp_matcher = re.compile ( elif match : = text_matcher.match ( type_name ) : converted_types.append ( PostgreSQLDataType ( `` PATH '' , None , None ) ) type_path , column_name = parser.get_column_name_from_column_expression ( type_time4_with_time_zone TIME ( 4 ) WITH TIME ZONE , type_box BOX , if type_name == `` integer '' : 'char20 ' , ' ( ( 0 , 0 ) , 1 ) ' : :circle , 12.4 , bigint_matcher = re.compile ( r '' ^ ( ? : bigint|int8 ) $ '' , re.IGNORECASE ) type_char CHAR , Evaluates a internal type of the form : ' < typename > [ ( p ) ] ' type_boolean , THREE_TABLE_STATEMENT = f '' '' '' VALUES ( type_text , varbit_matcher = re.compile ( r '' ^ ( ? : ( ? : bit varying ) |varbit ) ( ? : \ ( \s * ( \d+ ) \s * \ ) ) ? $ '' ) elif match : = smallint_matcher.match ( type_name ) : '08:05:06.7891+02 ' , ) - > PostgreSQLDataType : type_bool , r '' ^ ( ? : numeric|decimal ) ( ? : \ ( \s * ( \d+ ) ( ? : \s * , \s * ( \d+ ) ) ? \s * \ ) ) ? $ '' type_decimal83 DECIMAL ( 8,3 ) , type_macaddr8 MACADDR8 , type_float8 FLOAT8 , type_timestamp_without_time_zone , converted_types.append ( return PostgreSQLDataType ( converted_types.append ( conv_type ) int_matcher = re.compile ( r '' ^ ( ? : int|integer|int4 ) $ '' , re.IGNORECASE ) IMPOSSIBLE_STATEMENT = `` '' '' ' ( ( 0 , 0 ) , ( 1 , 1 ) ) ' : :box , '08002b:0102030405 ' , '08-00-2b-01-02-03 ' , parser = sql_parser_datatypedb elif match : = xml_matcher.match ( type_name ) : ' a fat cat sat on a mat and ate a fat rat ' : :tsvector , def load_datatypedb ( * * kwargs ) : ' < foo > bar < /foo > ' : :xml lseg_matcher = re.compile ( r '' ^ ( ? : lseg ) $ '' ) try : type_bigint BIGINT , 0.04 , ' ( ( 0 , 1 ) , ( -1 , -1 ) , ( -1 , 1 ) ) ' : :polygon , # elif match : = uuid_matcher.match ( type_name ) : conn : Connection = psycopg.connect ( * * kwargs ) elif match : = real_matcher.match ( type_name ) : INSERT INTO { TYPE_TEST_TABLE_NAME } ( elif match : = varbit_matcher.match ( type_name ) : current_timestamp , type_bitvarying BIT VARYING , type_xml XML , elif num_groups == 2 : '08:05:06.7891 ' , elif match : = cidr_matcher.match ( type_name ) : type_date , converted_types.append ( PostgreSQLDataType ( `` BYTEA '' , None , None ) ) '0101 ' , f '' unrecognized number ' { num_groups } ' of arguments for numeric ( ) column type '' , if match.group ( 1 ) is None : cur.execute ( type_smallint , type_time4_without_time_zone , type_numeric83 NUMERIC ( 8,3 ) , type_time_without_time_zone , ) SELECT * timetz_matcher = re.compile ( type_varchar VARCHAR , type_jsonb JSONB , type_timestamp_with_time_zone TIMESTAMP WITH TIME ZONE , elif match : = lseg_matcher.match ( type_name ) : converted_types.append ( PostgreSQLDataType ( `` MONEY '' , None , None ) ) type_timestamp4_without_time_zone , elif match : = polygon_matcher.match ( type_name ) : ) ; '' '' '' ' [ 1 , 2 , 3 ] ' : :jsonb , type_interval INTERVAL , columns = parser.get_query_columns ( parsed_sql ) test_type_id , converted_types.append ( PostgreSQLDataType ( `` BIGINT '' , None , None ) ) assert type ( parser.get_root_node ( parsed_sql.find ( exp.Select ) ) ) == exp.Select converted_types.append ( PostgreSQLDataType ( `` INTERVAL '' , None , None ) ) type_charactervarying , converted_types.append ( PostgreSQLDataType ( `` TEXT '' , None , None ) ) type_smallserial SMALLSERIAL , type_time4_without_time_zone TIME ( 4 ) WITHOUT TIME ZONE , type_text TEXT , type_timestamp4 , type_timestamp4 TIMESTAMP ( 4 ) , elif match.group ( 1 ) is not None and match.group ( 2 ) is None : num_groups = len ( match.groups ( ) ) type_time_with_time_zone TIME WITH TIME ZONE , 14 , type_char20 CHAR ( 20 ) , type_character , import sqlglot.expressions as exp f '' DECIMAL ( { match.group ( 1 ) } ) '' , int ( match.group ( 1 ) ) , None type_float4 FLOAT4 , type_tsvector TSVECTOR , 10 , converted_types.append ( PostgreSQLDataType ( `` CHAR '' , None , None ) ) r '' ^ ( ? : timestamp|timestamptz ) ( ? : \ ( \s * ( \d+ ) \s * \ ) ) ? ( ? : with time zone ) ? $ '' SELECT_STATEMENT = f '' '' '' type_timetz , bytea_matcher = re.compile ( r '' ^ ( ? : bytea ) $ '' ) type_decimal DECIMAL , type_time4 TIME ( 4 ) , type_int8 INT8 , cidr_matcher = re.compile ( r '' ^ ( ? : cidr ) $ '' ) type_timestamptz TIMESTAMPTZ , datatypedb = factories.postgresql ( `` datatypedb_factory '' ) TYPE_TEST_TABLE_NAME = `` sqlparser_datatype_test_table '' line_matcher = re.compile ( r '' ^ ( ? : line ) $ '' ) 2 , macaddr8_matcher = re.compile ( r '' ^ ( ? : macaddr8 ) $ '' ) type_int4 INT4 , type_int2 , r '' ^timestamp ( ? : \ ( \s * ( \d+ ) \s * \ ) ) ? ( ? : without time zone ) ? $ '' type_bit20 , inet_matcher = re.compile ( r '' ^ ( ? : inet ) $ '' ) type_float4 , CHECK_CONSTRAINT = \ # print ( f '' column_names : { column_names } '' ) time_matcher = re.compile ( r '' ^time ( ? : \ ( \s * ( \d+ ) \s * \ ) ) ? ( ? : without time zone ) ? $ '' ) type_bit , @ pytest.fixture type_xml ) character_matcher = re.compile ( r '' ^ ( ? : character|char ) ( ? : \ ( \s * ( \d+ ) \s * \ ) ) ? $ '' ) return sqlparser.SqlParser ( db_connection=datatypedb ) type_integer , converted_types.append ( PostgreSQLDataType ( `` UUID '' , None , None ) ) xml_matcher = re.compile ( r '' ^ ( ? : xml ) $ '' ) type_char20 , type_smallint SMALLINT , type_circle , type_macaddr , # | COMPLEX_CASES | 'text ' , type_date DATE , if match.group ( 1 ) is None and match.group ( 2 ) is None : load= [ load_datatypedb ] , ' ( ( -1 , -1 ) , ( 1 , 1 ) ) ' : :lseg , NESTED_WHERE = \ elif match : = macaddr8_matcher.match ( type_name ) : converted_types.append ( PostgreSQLDataType ( `` MACADDR '' , None , None ) ) type_serial2 SERIAL2 , type_real REAL , type_bool BOOL , # | OPT_PRECISSION_CASES | elif match : = money_matcher.match ( type_name ) : f '' '' '' parsed_sql.find ( exp.Select ) ) ) == exp.Select money_matcher = re.compile ( r '' ^ ( ? : money ) $ '' ) elif type_name == `` char '' : type_timestamptz , '00000000111000000000 ' , self._eval_opt_precission_field_match ( match , `` VARCHAR '' ) '10101010101010101010 ' , type_json JSON , type_serial4 SERIAL4 , type_timestamptz4 , type_bit BIT , type_numeric NUMERIC , type_uuid , f '' VARCHAR ( { match.group ( 1 ) } ) '' , int ( match.group ( 1 ) ) , None assert False , f '' exception : { e } '' type_circle CIRCLE , type_tsvector , 'fat & rat ' : :tsquery , elif match : = tsvector_matcher.match ( type_name ) : 38.001 , type_timetz4 , assert type ( parser.get_root_node ( parsed_sql.find ( exp.Identifier ) ) ) == exp.Select type_timestamp4_without_time_zone TIMESTAMP ( 4 ) WITHOUT TIME ZONE , 12 , COMPLEX_COLUMNS_QUERY = f '' '' '' COMPLEX_COLUMNS_QUERY = \ insert into e31_test_table_orders ( order_id , order_total_eur , customer_id ) values ( 250 , 367.56 , 214 ) ; '' '' '' converted_types.append ( PostgreSQLDataType ( `` MACADDR8 '' , None , None ) ) type_double_precision , # | TRIVIAL_MATCHERS | column_expression ) type_varchar20 VARCHAR ( 20 ) , 'character varying ' , type_money MONEY , elif match : = bytea_matcher.match ( type_name ) : converted_types.append ( PostgreSQLDataType ( `` LSEG '' , None , None ) ) type_character20 , elif match : = timetz_matcher.match ( type_name ) : converted_types.append ( PostgreSQLDataType ( `` TSQUERY '' , None , None ) ) type_cidr , type_charactervarying CHARACTER VARYING , type_int , import psycopg elif match : = path_matcher.match ( type_name ) : type_tsquery TSQUERY , conn.commit ( ) import re PostgreSQLDataType ( `` DOUBLE_PRECISSION '' , None , None ) ) self._eval_opt_precission_field_match ( match , `` CHAR '' ) type_uuid UUID , jsonb_matcher = re.compile ( r '' ^ ( ? : jsonb ) $ '' ) converted_types.append ( PostgreSQLDataType ( `` POLYGON '' , None , None ) ) type_timetz4 TIMETZ ( 4 ) , r '' ^ ( ? : time|timetz ) ( ? : \ ( \s * ( \d+ ) \s * \ ) ) ? ( ? : with time zone ) ? $ '' name = f '' NUMERIC ( { match.group ( 1 ) } , { match.group ( 2 ) } ) '' point_matcher = re.compile ( r '' ^ ( ? : point ) $ '' ) import psycopg type_timestamp4_with_time_zone , type_time_without_time_zone TIME WITHOUT TIME ZONE , converted_types.append ( PostgreSQLDataType ( `` SMALLINT '' , None , None ) ) elif match : = bool_matcher.match ( type_name ) : elif match : = box_matcher.match ( type_name ) : 100.12345 , ' 1 ' , '08:05:06.789+02 ' , datatypedb_factory = factories.postgresql_proc ( type_float8 , f '' unrecognized number type format ' { type_name } ' for numeric ( ) column type '' , '1999-01-08 ' , converted_types.append ( PostgreSQLDataType ( `` CIDR '' , None , None ) ) ZERO_TABLE_STATEMENT = `` '' '' type_macaddr8 , uuid_matcher = re.compile ( r '' ^ ( ? : uuid ) $ '' ) if match : = int_matcher.match ( type_name ) : 2.2 , type_inet INET , from psycopg import Connection except Exception as e : 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 ' : :uuid , FALSE , # | TRIVIAL_CASES | from psycopg import Connection elif match : = tsquery_matcher.match ( type_name ) : FROM { TYPE_TEST_TABLE_NAME } ; '' '' '' elif match : = time_matcher.match ( type_name ) : type_integer INTEGER , bool_matcher = re.compile ( r '' ^ ( ? : boolean|bool ) $ '' ) self._eval_opt_precission_field_match ( match , `` TIMESTAMP '' ) def test_datatypes ( sql_parser_datatypedb : sqlparser.SqlParser ) : self._eval_opt_precission_field_match ( match , `` TIMESTAMPTZ '' ) converted_types.append ( PostgreSQLDataType ( `` CIRCLE '' , None , None ) ) TRUE , ) f '' CHAR ( { match.group ( 1 ) } ) '' , int ( match.group ( 1 ) ) , None where p is optional precission field and returns a converted type used insert into e31_test_table_orders ( order_id , order_total_eur , customer_id ) values ( 250 , 367.56 , 214 ) ; '' '' '' ) SINGLE_TABLE_STATEMENT = \ from os import getenv '11:05:06.789+02 ' , # pylint : disable=line-too-long CREATE TABLE { TYPE_TEST_TABLE_NAME } ( character_matcher = re.compile ( r '' ^ ( ? : character|char ) \ ( \s * ( \d+ ) \s * \ ) $ '' ) type_varbit20 VARBIT ( 20 ) , type_lseg , type_jsonb , elif match : = inet_matcher.match ( type_name ) : if num_groups == 1 : real_matcher = re.compile ( r '' ^ ( ? : real|float4 ) $ '' ) '04:05:06.7891 ' , type_charactervarying20 CHARACTER VARYING ( 20 ) , type_varchar20 , BORING_STATEMENT = `` '' '' r '' ^ ( ? : ( ? : character varying ) |varchar ) \ ( \s * ( \d+ ) \s * \ ) $ '' circle_matcher = re.compile ( r '' ^ ( ? : circle ) $ '' ) type_varchar , type_timestamptz4 TIMESTAMPTZ ( 4 ) , macaddr_matcher = re.compile ( r '' ^ ( ? : macaddr ) $ '' ) type_decimal83 , polygon_matcher = re.compile ( r '' ^ ( ? : polygon ) $ '' ) self._eval_opt_precission_field_match ( match , `` TIME '' ) type_timestamp_with_time_zone , r '' ^ ( ? : ( ? : character varying ) |varchar ) ( ? : \ ( \s * ( \d+ ) \s * \ ) ) ? $ '' type_varbit , type_character CHARACTER , '1010 ' , f '' '' '' double_precission_matcher = re.compile ( r '' ^ ( ? : ( ? : double precision ) |float8 ) $ '' ) import sqlglot type_timestamp TIMESTAMP , # self._eval_opt_precission_field_match ( match , `` TIMETZ '' ) elif match : = jsonb_matcher.match ( type_name ) : 'character20 ' , converted_types.append ( PostgreSQLDataType ( `` BOX '' , None , None ) ) type_numeric83 , type_bitvarying20 BIT VARYING ( 20 ) , type_interval , elif type_name == `` character '' : ' 1 year 2 months 3 days 4 hours 5 minutes 6 seconds ' , converted_types.append ( PostgreSQLDataType ( `` TSVECTOR '' , None , None ) ) type_bitvarying20 , type_point POINT , type_boolean BOOLEAN , self._eval_opt_precission_field_match ( match , `` VARBIT '' ) type_time4_with_time_zone , CHECK_CONSTRAINT = `` '' '' type_bit20 BIT ( 20 ) , type_int4 , type_time , type_varbit VARBIT , `` `` '' bit_matcher = re.compile ( r '' ^ ( ? : bit ) ( ? : \ ( \s * ( \d+ ) \s * \ ) ) ? $ '' ) type_tsquery , json_matcher = re.compile ( r '' ^ ( ? : json ) $ '' ) ' ( ( -1 , -1 ) , ( -1 , 1 ) , ( 0 , 1 ) ) ' : :path , 'varchar20 ' , elif match : = circle_matcher.match ( type_name ) :","['src/pg4n/sqlparser.py', 'src/pg4n/test/test_sqlparser.py']",2022-11-30 12:25:04+00:00,2022-12-02 17:51:34+00:00,2022-12-02 19:51:33+02:00
