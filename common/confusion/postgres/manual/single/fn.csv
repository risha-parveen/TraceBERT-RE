issue_id,commit_id,p_x,l_x,issue_desc,issue_comments,summary,files,created_at,closed_at,commit_time
6,4fa9eda88b8e6a94c4e6662a86f87da7bc41d060,2.929818037955556e-05,1,"An end user wants to know when an expression will always return empty due to table enforcement rule ( e.g primary/foreign key , CHECK constraint ) Minimal implementation : detect PKEY , FKEY and CHECK constraints",Detect implied expressions,Merge pull request # 59 from Project-C-SQL/feat/implied-expression,"['src/pg4n/implied_expression_checker.py', 'src/pg4n/qepparser.py', 'src/pg4n/test/test_implied_expression_checker.py']",2022-09-23 11:37:52+00:00,2022-11-08 08:09:34+00:00,2022-11-08 10:09:32+02:00
15,576ff1d3f49e6180a05f05e0e2ae13ba93d7ecb4,1.0347650459152646e-05,1,"Add requirements.txt , directory structure , thought out main.py , etc .",Incorporate project template and a thought out main.py,Merge pull request # 31 from Project-C-SQL/feat/add-docs,"['.github/workflows/ci-flow.yml', '.gitignore', 'README.md', 'docs/architecture.md', 'docs/conf.py', 'docs/index.rst', 'docs/interfaces.md', 'docs/program-architecture.md', 'main.py', 'orderby.py', 'poetry.lock', 'psqlparser.py', 'psqlwrapper.py', 'pyproject.toml', 'qepparser.py', 'sqlparser.py', 'src/pg4n/__init__.py', 'src/pg4n/main.py', 'src/pg4n/orderby.py', 'src/pg4n/psqlparser.py', 'src/pg4n/psqlwrapper.py', 'src/pg4n/qepparser.py', 'src/pg4n/sqlparser.py', 'src/pg4n/test/__init__.py', 'src/pg4n/test/test_qepparser.py', 'src/pg4n/util.py', 'test_qepparser.py']",2022-09-25 13:26:43+00:00,2022-10-13 09:22:39+00:00,2022-10-13 12:22:38+03:00
18,149f24e74104b324b62326453e7cbe12b53a5f5a,1.0208223102381451e-05,1,Design required classes and interfaces according to SOLID principles and potentially GoF design patterns . Document them in GitHub wiki .,Document architecture and interfaces for semantic analysis,Merge pull request # 101 from Project-C-SQL/feat/maintenance-plan,"['docs/architecture.jpg', 'docs/architecture.md', 'docs/index.rst', 'docs/interfaces.md', 'docs/maintenance-plan.md', 'docs/pg4n.md', 'docs/program-architecture.md']",2022-09-29 09:55:51+00:00,2022-11-10 10:38:14+00:00,2022-12-16 18:54:08+02:00
27,34b89977c8da671ed279950b4e5c98e364b2ee0a,1.0359479347243903e-05,1,Related to # 5,"Create FSM for interpreting control codes induced by e.g . up-/down-arrows , ctrl-R and backspace",Merge pull request # 48 from Project-C-SQL/feat/vt100decode,"['poetry.lock', 'pyproject.toml', 'src/pg4n/main.py', 'src/pg4n/psqlparser.py', 'src/pg4n/psqlwrapper.py', 'src/pg4n/test/test_psqlparser.py', 'src/pg4n/test/test_psqlwrapper.py']",2022-10-07 08:29:54+00:00,2022-11-06 14:07:53+00:00,2022-11-06 16:07:52+02:00
33,672575a8e3f414ce9ffa1f47b1e18b13d13fb9eb,2.3715618226560764e-05,1,Allow a visitor ( ? ) pattern for passing custom functions to examine tree structure for semantic analysis,Extend QEPAnalysis interface for easier analysis,Merge pull request # 44 from Project-C-SQL/feat/improve-qeps,"['README.md', 'src/pg4n/qepparser.py', 'src/pg4n/test/test_qepparser.py']",2022-10-13 10:05:14+00:00,2022-11-10 10:55:29+00:00,2022-11-05 13:28:47+02:00
42,67a44d6dcf82358abcf699c347b79c06a6c74dbe,1.01355572041939e-05,1,Pull request incoming,Improve CI/CD pipeline,Merge pull request # 51 from Project-C-SQL/feat/add-linter,"['.github/actions/install/action.yml', '.github/workflows/ci-flow.yml', '.github/workflows/pr_flow.yml', '.github/workflows/pytest.yml', '.github/workflows/sphinx.yml', 'README.md', 'docs/_static/github-mark.svg', 'docs/_templates/footer.html', 'docs/conf.py', 'docs/program-architecture.md', 'poetry.lock', 'pyproject.toml', 'scripts/ci-grade.sh']",2022-10-26 10:02:30+00:00,2022-11-06 12:04:39+00:00,2022-11-06 14:04:38+02:00
49,cd7168bd9791c3c51875f85850371cec52a72e57,1.2870067621406632e-05,1,"Wrapper has 2 significant bugs left : - parse multiline queries properly ( ` db= > SELECT db- > db- > * FROM orders ; ` ) - separate queries properly ( ` db= > SELECT * FROM orders ; db= > INSERT INTO queries VALUES ( 6,6,6 ) ; ` should not parse as ` SELECT * FROM orders ; db= > INSERT INTO queries VALUES ( 6,6,6 ) ; ` ) due to lazily sticking to SELECT as the delimiter .","Multiline queries , detect separate queries",Merge pull request # 80 from Project-C-SQL/fix/wrapper,"['src/pg4n/psqlparser.py', 'src/pg4n/psqlwrapper.py', 'src/pg4n/test/test_psqlparser.py', 'src/pg4n/test/test_psqlwrapper.py']",2022-11-04 15:31:55+00:00,2022-11-21 14:23:46+00:00,2022-11-21 16:23:44+02:00
52,dbbd4ef6012e41811e4d34b77b6e621abbb89329,1.042272288032109e-05,1,To be discussed in sprint planning,Adding automatic formatter to development pipeline,Merge pull request # 103 from Project-C-SQL/feat/githooks,"['README.md', 'docs/conf.py', 'poetry.lock', 'pyproject.toml', 'src/pg4n/cmp_domain_checker.py', 'src/pg4n/eq_wildcard_checker.py', 'src/pg4n/implied_expression_checker.py', 'src/pg4n/main.py', 'src/pg4n/psqlconninfo.py', 'src/pg4n/psqlparser.py', 'src/pg4n/psqlwrapper.py', 'src/pg4n/qepparser.py', 'src/pg4n/semanticrouter.py', 'src/pg4n/strange_having_checker.py', 'src/pg4n/subquery_order_by_checker.py', 'src/pg4n/subquery_select_checker.py', 'src/pg4n/sum_distinct_checker.py', 'src/pg4n/test/test_cmp_domain_checker.py', 'src/pg4n/test/test_config_parser.py', 'src/pg4n/test/test_implied_expression_checker.py', 'src/pg4n/test/test_psqlparser.py', 'src/pg4n/test/test_psqlwrapper.py', 'src/pg4n/test/test_qepparser.py', 'src/pg4n/test/test_subquery_order_by_checker.py', 'src/pg4n/test/test_subquery_select_checker.py']",2022-11-06 11:25:40+00:00,2022-12-22 10:07:51+00:00,2022-12-22 12:07:50+02:00
54,33120fdaf85b81b29fda0b164e51a4d43a477810,1.6571768355788663e-05,1,"Upon push to ` main ` branch < sup > 1 < /sup > , we should - enact sensible versioning < sup > 2 < /sup > - only deploy versions that pass tests - have automatic formation of changelog - upload to PyPI , TestPyPI , or equivalent < sup > 3 < /sup > - have uploaded a version that an end user can install with a clean installation of Python 3.10+ , e.g . by running ` pip install pg4n ` or equivalent < sup > 4 < /sup > - as per good programming practices , ` pg4n -h ` or ` pg4n -- help ` should give info required to get pg4n running < sup > 1 < /sup > Alternative strategy : push only releases/tags ? < sup > 2 < /sup > Consider if a short git hash suffices , ` < major > . < minor > . < patch > ` might not be too feasible to enact automatically . < sup > 3 < /sup > Idea : upload GitHub releases to PyPI , and merges to ` main ` to TestPyPI ? This way we can test the end user installation experience in advance through TestPyPI . < sup > 4 < /sup > ~~Also look into whether we can bundle a PostgreSQL instance alongside pg4n.~~ Nay by customer . -- - In case more dev hours can be expended : distribute man pages ? https : //github.com/pypa/packaging-problems/issues/72",Incorporate automatic deployment into the CI/CD pipeline,Merge pull request # 85 from Project-C-SQL/feat/cd-publish,"['.github/workflows/ci-cd.yml', '.github/workflows/grade.yml', '.github/workflows/pytest.yml', '.github/workflows/sphinx.yml', 'README.md', 'pyproject.toml', 'scripts/cd-publish.sh']",2022-11-07 12:32:45+00:00,2022-11-22 15:15:02+00:00,2022-11-22 17:15:00+02:00
61,7a2404b05defc51c519424b9b8ecfc2de17e58a5,1.0231576197838876e-05,1,,Warning message levels ?,Merge pull request # 78 from Project-C-SQL/feat/config,"['src/pg4n/config_parser.py', 'src/pg4n/config_reader.py', 'src/pg4n/config_values.py', 'src/pg4n/test/test_config_parser.py']",2022-11-08 09:23:02+00:00,2022-11-22 10:09:25+00:00,2022-11-21 22:39:05+02:00
70,9e87043b619778dee4903f22deeda35ed41af442,2.471053267072421e-05,1,,Detect strange HAVING clause without GROUP BY ( e32 per Brass ),Merge pull request # 71 from Project-C-SQL/feat/strange-having,"['src/pg4n/strange_having_checker.py', 'src/pg4n/test/test_strange_having_checker.py']",2022-11-17 17:50:30+00:00,2022-11-21 10:02:16+00:00,2022-11-21 12:02:15+02:00
74,dd91d2f5cb68a8ada87f47034162548dafa00053,6.51922746328637e-05,1,,Detect wildcards without LIKE ( e34 per Brass ),Merge pull request # 75 from Project-C-SQL/feat/eq-wildcard,"['src/pg4n/eq_wildcard_checker.py', 'src/pg4n/test/test_eq_wildcard_checker.py']",2022-11-17 19:17:53+00:00,2022-11-21 10:02:46+00:00,2022-11-21 12:02:45+02:00
79,535fdf800713ce7b74f1e330e9c02af0bb981db2,1.026131121761864e-05,1,"Removing ` \n 's is a tough problem , see ought to replace \n with ` ` to avoid ` SELECT * FROM ` .",Edge cases with newlined psql queries,Merge pull request # 95 from Project-C-SQL/feat/error-handling-and-syntax-error-detection,"['src/pg4n/main.py', 'src/pg4n/psqlconninfo.py', 'src/pg4n/psqlparser.py', 'src/pg4n/psqlwrapper.py', 'src/pg4n/semanticrouter.py', 'src/pg4n/test/test_psqlparser.py', 'src/pg4n/test/test_psqlwrapper.py']",2022-11-19 17:10:41+00:00,2022-12-12 12:47:05+00:00,2022-12-12 14:47:03+02:00
92,ff25e18f8bfefbf98a4f27a1eccaf633c8313844,1.0447899512655567e-05,1,"Run ` SELECT * FROM albums ; ` or ` SELECT * FROM orders ; ` on customer-provided test database . Does n't crash without QEP parser , or without semantic router loaded , so seems like SQL parser is at fault . ` = # SELECT * FROM albums ; unable to convert from internal type 'boolean ' to declared type `",SQL parser crashes when querying database_generate.sql,Merge pull request # 93 from Project-C-SQL/fix/sqlparser-typeconv,"['src/pg4n/sqlparser.py', 'src/pg4n/test/test_sqlparser.py']",2022-11-30 12:25:04+00:00,2022-12-02 17:51:34+00:00,2022-12-02 19:51:33+02:00
